
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

theory Enum__bool_aux

  use why3.Bool.Bool 
  
  function max  : int = (1)
  
  function min  : int = (0)
  
end

theory Enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool_aux 
  
  clone export enum.Enum with constant min = min, constant max = max
  
end

module Unsafe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root_unsigned_intP_safe

  use why3.Bool.Bool 
  
end

module Root_unsigned_intP_unsafe

  use why3.Bool.Bool 
  
end

module Root_char_xP_safe

  use why3.Bool.Bool 
  
end

module Root_char_xP_unsafe

  use why3.Bool.Bool 
  
end

module Root__BoolP_safe

  use why3.Bool.Bool 
  
end

module Root__BoolP_unsafe

  use why3.Bool.Bool 
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_return_label_0_exc unit
  
  exception Goto_return_label_1_exc unit
  
  exception Goto_return_label_2_exc unit
  
  exception Goto_return_label_3_exc unit
  
  exception Goto_return_label_4_exc unit
  
  exception Goto_return_label_5_exc unit
  
  exception Goto_return_label_6_exc unit
  
  exception Goto_return_label_7_exc unit
  
  exception Goto_return_label_8_exc unit
  
  exception Goto_return_label_9_exc unit
  
  exception Goto_switch_0_break_exc unit
  
  exception Goto_switch_1_break_exc unit
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Goto_while_0_break_0_0_exc unit
  
  exception Goto_while_0_break_1_exc unit
  
  exception Goto_while_0_break_10_exc unit
  
  exception Goto_while_0_break_11_exc unit
  
  exception Goto_while_0_break_12_exc unit
  
  exception Goto_while_0_break_13_exc unit
  
  exception Goto_while_0_break_14_exc unit
  
  exception Goto_while_0_break_15_exc unit
  
  exception Goto_while_0_break_16_exc unit
  
  exception Goto_while_0_break_17_exc unit
  
  exception Goto_while_0_break_18_exc unit
  
  exception Goto_while_0_break_19_exc unit
  
  exception Goto_while_0_break_2_exc unit
  
  exception Goto_while_0_break_3_exc unit
  
  exception Goto_while_0_break_4_exc unit
  
  exception Goto_while_0_break_5_exc unit
  
  exception Goto_while_0_break_6_exc unit
  
  exception Goto_while_0_break_7_exc unit
  
  exception Goto_while_0_break_8_exc unit
  
  exception Goto_while_0_break_9_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Goto_while_1_break_0_exc unit
  
  exception Goto_while_1_break_1_exc unit
  
  exception Goto_while_1_break_2_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_memcpy_safety
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
"expl:memcpy, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memcpy
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
  "expl:Function memcpy, safety" =
  fun
   (dest_0 : (pointer voidP)) (src_0 : (pointer voidP)) (count_0 : Uint64.t)
   (charP_charM_dest_0_21 : ref (memory voidP Int8.t))
   (voidP_dest_0_21_alloc_table : (alloc_table voidP))
   (voidP_src_0_22_alloc_table : (alloc_table voidP))
   (voidP_src_0_22_tag_table : (tag_table voidP)) (voidP_dest_0_21_tag_table
   : (tag_table voidP)) (charP_charM_src_0_22 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_0_22_alloc_table src_0) ->
     ((instanceof voidP_src_0_22_tag_table src_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_0_22_alloc_table src_0) i) /\
       ((<) i (offset_max voidP_src_0_22_alloc_table src_0))) ->
       (instanceof voidP_src_0_22_tag_table (shift src_0 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_0_21_alloc_table dest_0) ->
     ((instanceof voidP_dest_0_21_tag_table dest_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_0_21_alloc_table dest_0) i) /\
       ((<) i (offset_max voidP_dest_0_21_alloc_table dest_0))) ->
       (instanceof voidP_dest_0_21_tag_table (shift dest_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 16 13 42#
    (instanceof voidP_src_0_22_tag_table src_0 charP_tag))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 17 13 43#
    (instanceof voidP_dest_0_21_tag_table dest_0 charP_tag))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
     (((<=)
      (offset_min voidP_src_0_22_alloc_table
      (downcast voidP_src_0_22_tag_table src_0 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_src_0_22_alloc_table
      (downcast voidP_src_0_22_tag_table src_0 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_0) (1)))
     /\
     (forall __framac_tmp11 : int.
      ((((<=) (0) __framac_tmp11) /\
       ((<=) __framac_tmp11 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcpy.h" 19 13 46#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
    (((<=)
     (offset_min voidP_dest_0_21_alloc_table
     (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_dest_0_21_alloc_table
     (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_0) (1)))
    /\
    (forall __framac_tmp12 : int.
     ((((<=) (0) __framac_tmp12) /\
      ((<=) __framac_tmp12 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_0 = ref count_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12 = ref (any_pointer  () : (pointer voidP)) in
    (let ocount = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Safe_bit_uint64.any_  () ) in
    try
     begin
     (tmp_0_2 :=
      (let _jessie_448 =
      (#"/home/work/workspace/self/verker/memcpy.c" 5 13 17#
      (downcast_  voidP_dest_0_21_tag_table dest_0 (charP_tag  ) )) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/memcpy.c" 5 6 10#
      "expl:Pointer index bounds" true) }); _jessie_448 end));
      begin
      (s_12 :=
       (let _jessie_447 =
       (#"/home/work/workspace/self/verker/memcpy.c" 6 17 20#
       (downcast_  voidP_src_0_22_tag_table src_0 (charP_tag  ) )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/memcpy.c" 6 12 14#
       "expl:Pointer index bounds" true) }); _jessie_447 end));
       begin
       (ocount :=
        (let _jessie_435 = !mutable_count_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memcpy.c" 7 18 24#
        "expl:Pointer index bounds" true) }); _jessie_435 end));
        'Loop_14:
        loop
        invariant { (#"whole_program.jc" 1105 6 3263# true) }
          variant { (#"/home/work/workspace/self/verker/memcpy.c" 15 18 23#
            (Bit_uint64.to_int
            (#"/home/work/workspace/self/verker/memcpy.c" 15 18 23#
            !mutable_count_0))) }
         begin
         any unit
         requires { true } reads { charP_charM_dest_0_21, dest_0,
         mutable_count_0, src_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/memcpy.c" 13 20 124#
            (forall i_5 : int.
             ((((<=) (0) i_5) /\
              ((<) i_5
              (Int.(-) (Bit_uint64.to_int !ocount)
              (Bit_uint64.to_int !mutable_count_0)))) ->
              (Int8.(=)
              (select !charP_charM_dest_0_21
              (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
              i_5))
              (select charP_charM_src_0_22
              (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag) i_5))))))
           /\
           ((#"/home/work/workspace/self/verker/memcpy.c" 12 20 59#
            (#"/home/work/workspace/self/verker/memcpy.c" 12 20 59#
            ((#"/home/work/workspace/self/verker/memcpy.c" 12 20 41#
             ((=)
             (sub_pointer !tmp_0_2
             (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
             (sub_pointer !s_12
             (downcast voidP_src_0_22_tag_table src_0 charP_tag))))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 12 34 59#
            ((=)
            (sub_pointer !s_12
            (downcast voidP_src_0_22_tag_table src_0 charP_tag))
            (Int.(-) (Bit_uint64.to_int !ocount)
            (Bit_uint64.to_int !mutable_count_0)))))))
           /\
           ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
            (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 36#
             (same_block (downcast voidP_src_0_22_tag_table src_0 charP_tag)
             !s_12))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 36#
             ((<=)
             (sub_pointer (downcast voidP_src_0_22_tag_table src_0 charP_tag)
             !s_12) (0)))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
            ((#"/home/work/workspace/self/verker/memcpy.c" 11 35 60#
             (same_block !s_12
             (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
             (Bit_uint64.to_int !ocount))))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 11 35 60#
            ((<=)
            (sub_pointer !s_12
            (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
            (Bit_uint64.to_int !ocount))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
            (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 39#
             (same_block
             (downcast voidP_dest_0_21_tag_table dest_0 charP_tag) !tmp_0_2))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 39#
             ((<=)
             (sub_pointer
             (downcast voidP_dest_0_21_tag_table dest_0 charP_tag) !tmp_0_2)
             (0)))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
            ((#"/home/work/workspace/self/verker/memcpy.c" 10 36 64#
             (same_block !tmp_0_2
             (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
             (Bit_uint64.to_int !ocount))))
            /\
            (#"/home/work/workspace/self/verker/memcpy.c" 10 36 64#
            ((<=)
            (sub_pointer !tmp_0_2
            (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
            (Bit_uint64.to_int !ocount))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/memcpy.c" 9 20 40#
           (#"/home/work/workspace/self/verker/memcpy.c" 9 20 40#
           ((#"/home/work/workspace/self/verker/memcpy.c" 9 20 30#
            (Bit_uint64.(<=) (#"whole_program.jc" 1107 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0))
            !mutable_count_0))
           /\
           (#"/home/work/workspace/self/verker/memcpy.c" 9 25 40#
           (Bit_uint64.(<=) !mutable_count_0 !ocount))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_2 :=
            (let _jessie_436 = !mutable_count_0 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/memcpy.c" 17 8 19#
            "expl:Pointer index bounds" true) }); _jessie_436 end));
            begin
            (mutable_count_0 :=
             (let _jessie_437 =
             (Safe_bit_uint64.(-%)  !mutable_count_0
              (#"whole_program.jc" 1152 59 72# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 1)) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memcpy.c" 17 8 19#
             "expl:Pointer index bounds" true) }); _jessie_437 end)); () end
           end;
            (if
            (#"/home/work/workspace/self/verker/memcpy.c" 17 8 19#
            (Safe_bit_uint64.(<>)  !tmp_2
             (#"whole_program.jc" 1155 48 61# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_2_exc ())));
            begin
            (tmp_0_3 :=
             (let _jessie_438 = !tmp_0_2 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memcpy.c" 18 3 8#
             "expl:Pointer index bounds" true) }); _jessie_438 end));
             begin
             (tmp_0_2 :=
              (let _jessie_439 =
              (shift_typesafe  !tmp_0_2
               (Safe_int32.to_int 
                (#"whole_program.jc" 1159 57 69# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memcpy.c" 18 3 8#
              "expl:Pointer index bounds" true) }); _jessie_439 end));
              begin
              (tmp_1_0 :=
               (let _jessie_440 = !s_12 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memcpy.c" 18 12 15#
               "expl:Pointer index bounds" true) }); _jessie_440 end));
               begin
               (s_12 :=
                (let _jessie_441 =
                (shift_typesafe  !s_12
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 1161 51 63# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memcpy.c" 18 12 15#
                "expl:Pointer index bounds" true) }); _jessie_441 end));
                (let _jessie_443 =
                (let _jessie_442 =
                (#"/home/work/workspace/self/verker/memcpy.c" 18 11 15#
                "expl:Pointer dereference"
                (acc  voidP_src_0_22_alloc_table charP_charM_src_0_22
                 !tmp_1_0 )) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memcpy.c" 18 2 15#
                "expl:Pointer index bounds" true) }); _jessie_442 end) in
                (let _jessie_444 = !tmp_0_3 in
                (let _jessie_445 = (0) in
                (let _jessie_446 = _jessie_444 in
                (#"/home/work/workspace/self/verker/memcpy.c" 18 2 15#
                "expl:Pointer dereference"
                (upd  voidP_dest_0_21_alloc_table charP_charM_dest_0_21
                 _jessie_444 _jessie_443 )))))) end end end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_21 -> () end end end;
        (raise (Goto_while_0_break_2_exc ())) end end end with
     Goto_while_0_break_2_exc _jessie_19 ->
     'While_0_break_2:
     'While_0_break_2:
     begin
     ();
      begin
      any unit
      requires { true } reads { mutable_count_0 }
      ensures {
        (#"/home/work/workspace/self/verker/memcpy.c" 19 12 35#
        (Bit_uint64.(=) !mutable_count_0 (#"whole_program.jc" 1170 52 70#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
       () end;
      begin
      (return :=
       (let _jessie_449 = dest_0 in
       begin
       (assert {
       (#"whole_program.jc" 1174 7 20# "expl:Pointer index bounds" true) });
        _jessie_449 end)); (raise Return) end end end)))))); absurd  end with
    Return -> !return end))
  
end

module Function_memcpy_behaviors
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
"expl:memcpy, behaviors"

  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memcpy_ensures_default
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 68 5 51#
  "expl:Function memcpy, default behavior" =
  fun
   (dest_0 : (pointer voidP)) (src_0 : (pointer voidP)) (count_0 : Uint64.t)
   (charP_charM_dest_0_21 : ref (memory voidP Int8.t))
   (voidP_dest_0_21_alloc_table : (alloc_table voidP))
   (voidP_src_0_22_alloc_table : (alloc_table voidP))
   (voidP_src_0_22_tag_table : (tag_table voidP)) (voidP_dest_0_21_tag_table
   : (tag_table voidP)) (charP_charM_src_0_22 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_0_22_alloc_table src_0) ->
     ((instanceof voidP_src_0_22_tag_table src_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_0_22_alloc_table src_0) i) /\
       ((<) i (offset_max voidP_src_0_22_alloc_table src_0))) ->
       (instanceof voidP_src_0_22_tag_table (shift src_0 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_0_21_alloc_table dest_0) ->
     ((instanceof voidP_dest_0_21_tag_table dest_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_0_21_alloc_table dest_0) i) /\
       ((<) i (offset_max voidP_dest_0_21_alloc_table dest_0))) ->
       (instanceof voidP_dest_0_21_tag_table (shift dest_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 16 13 42#
    (instanceof voidP_src_0_22_tag_table src_0 charP_tag))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 17 13 43#
    (instanceof voidP_dest_0_21_tag_table dest_0 charP_tag))
   /\
   (#"whole_program.jc" 1058 12 1614#
   ((#"/home/work/workspace/self/verker/memcpy.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
     (((<=)
      (offset_min voidP_src_0_22_alloc_table
      (downcast voidP_src_0_22_tag_table src_0 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_src_0_22_alloc_table
      (downcast voidP_src_0_22_tag_table src_0 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_0) (1)))
     /\
     (forall __framac_tmp11 : int.
      ((((<=) (0) __framac_tmp11) /\
       ((<=) __framac_tmp11 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcpy.h" 19 13 46#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_0) (1))) then
    (((<=)
     (offset_min voidP_dest_0_21_alloc_table
     (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_dest_0_21_alloc_table
     (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_0) (1)))
    /\
    (forall __framac_tmp12 : int.
     ((((<=) (0) __framac_tmp12) /\
      ((<=) __framac_tmp12 (Int.(-) (Bit_uint64.to_int count_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 1083 10 73# "expl:Assigns clause"
      (not_assigns voidP_dest_0_21_alloc_table voidP_dest_0_21_alloc_table
      (old !charP_charM_dest_0_21) !charP_charM_dest_0_21
      (pset_range
      (pset_singleton (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
      (0) (Int.(-) (Bit_uint64.to_int count_0) (1)))))
     /\
     (#"/home/work/workspace/self/verker/memcpy.h" 21 12 99#
     "expl:Ensures clause"
     (forall i_4_0 : int.
      ((((<=) (0) i_4_0) /\ ((<) i_4_0 (Bit_uint64.to_int count_0))) ->
       (Int8.(=)
       (select !charP_charM_dest_0_21
       (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag) i_4_0))
       (select charP_charM_src_0_22
       (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag) i_4_0))))))))
     } diverges  ->
   (let mutable_count_0 = ref count_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_2 = ref (any_pointer  () : (pointer voidP)) in
    (let s_12 = ref (any_pointer  () : (pointer voidP)) in
    (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Unsafe_bit_uint64.any_  () ) in
    try
     begin
     (tmp_0_2 :=
      (downcast_  voidP_dest_0_21_tag_table dest_0 (charP_tag  ) ));
      begin
      (s_12 := (downcast_  voidP_src_0_22_tag_table src_0 (charP_tag  ) ));
       begin
       (ocount := !mutable_count_0);
        'Loop_13:
        loop
        invariant
          { (((#"/home/work/workspace/self/verker/memcpy.c" 9 20 40#
              (#"/home/work/workspace/self/verker/memcpy.c" 9 20 40#
              ((#"/home/work/workspace/self/verker/memcpy.c" 9 20 30#
               (Bit_uint64.(<=) (#"whole_program.jc" 1107 40 53#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_0))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 9 25 40#
              (Bit_uint64.(<=) !mutable_count_0 !ocount)))))
             &&
             ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
              (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 39#
               (same_block
               (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               !tmp_0_2))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker/memcpy.c" 10 20 39#
               ((<=)
               (sub_pointer
               (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               !tmp_0_2) (0)))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 10 20 64#
              ((#"/home/work/workspace/self/verker/memcpy.c" 10 36 64#
               (same_block !tmp_0_2
               (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               (Bit_uint64.to_int !ocount))))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 10 36 64#
              ((<=)
              (sub_pointer !tmp_0_2
              (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
              (Bit_uint64.to_int !ocount))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
              (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 36#
               (same_block
               (downcast voidP_src_0_22_tag_table src_0 charP_tag) !s_12))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker/memcpy.c" 11 20 36#
               ((<=)
               (sub_pointer
               (downcast voidP_src_0_22_tag_table src_0 charP_tag) !s_12)
               (0)))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 11 20 60#
              ((#"/home/work/workspace/self/verker/memcpy.c" 11 35 60#
               (same_block !s_12
               (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
               (Bit_uint64.to_int !ocount))))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 11 35 60#
              ((<=)
              (sub_pointer !s_12
              (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
              (Bit_uint64.to_int !ocount))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/memcpy.c" 12 20 59#
              (#"/home/work/workspace/self/verker/memcpy.c" 12 20 59#
              ((#"/home/work/workspace/self/verker/memcpy.c" 12 20 41#
               ((=)
               (sub_pointer !tmp_0_2
               (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
               (sub_pointer !s_12
               (downcast voidP_src_0_22_tag_table src_0 charP_tag))))
              /\
              (#"/home/work/workspace/self/verker/memcpy.c" 12 34 59#
              ((=)
              (sub_pointer !s_12
              (downcast voidP_src_0_22_tag_table src_0 charP_tag))
              (Int.(-) (Bit_uint64.to_int !ocount)
              (Bit_uint64.to_int !mutable_count_0)))))))
             &&
             (#"/home/work/workspace/self/verker/memcpy.c" 13 20 124#
             (forall i_5 : int.
              ((((<=) (0) i_5) /\
               ((<) i_5
               (Int.(-) (Bit_uint64.to_int !ocount)
               (Bit_uint64.to_int !mutable_count_0)))) ->
               (Int8.(=)
               (select !charP_charM_dest_0_21
               (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               i_5))
               (select charP_charM_src_0_22
               (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
               i_5))))))))))
            /\
            (#"whole_program.jc" 1083 10 73# "expl:Assigns clause"
            (not_assigns voidP_dest_0_21_alloc_table
            voidP_dest_0_21_alloc_table (at !charP_charM_dest_0_21 'Init)
            !charP_charM_dest_0_21
            (pset_range
            (pset_singleton
            (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0)
            (Int.(-) (Bit_uint64.to_int (at !mutable_count_0 'Init)) (1)))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           (tmp_2 := !mutable_count_0);
            begin
            (mutable_count_0 :=
             (Unsafe_bit_uint64.(-%)  !mutable_count_0
              (#"whole_program.jc" 1152 59 72# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/memcpy.c" 17 8 19#
            (Unsafe_bit_uint64.(<>)  !tmp_2
             (#"whole_program.jc" 1155 48 61# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_2_exc ())));
            begin
            (tmp_0_3 := !tmp_0_2);
             begin
             (tmp_0_2 :=
              (shift_  !tmp_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 1159 57 69# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              begin
              (tmp_1_0 := !s_12);
               begin
               (s_12 :=
                (shift_  !s_12
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 1161 51 63# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (let _jessie_428 = (acc  charP_charM_src_0_22 !tmp_1_0 ) in
                (let _jessie_429 = !tmp_0_3 in
                (let _jessie_430 = (0) in
                (let _jessie_431 = _jessie_429 in
                (upd  charP_charM_dest_0_21 _jessie_431 _jessie_428 ))))) end
              end end end end; (raise (Loop_continue_exc ())) end with
           Loop_continue_exc _jessie_21 -> () end end end;
        (raise (Goto_while_0_break_2_exc ())) end end end with
     Goto_while_0_break_2_exc _jessie_19 ->
     'While_0_break_2:
     'While_0_break_2:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker/memcpy.c" 19 12 35#
      "expl:Assertion in line 19"
      (Bit_uint64.(=) !mutable_count_0 (#"whole_program.jc" 1170 52 70#
      "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
      end; begin (return := dest_0); (raise Return) end end end)))))); 
     absurd  end with Return -> !return end))
  
end

module Function_memmove_safety
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
"expl:memmove, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, safety" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_3_24 : ref (memory voidP Int8.t))
   (voidP_dest_3_24_alloc_table : (alloc_table voidP))
   (voidP_dest_3_24_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_3_24_alloc_table src_3) ->
     ((instanceof voidP_dest_3_24_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table src_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_24_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_24_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_24_tag_table dest_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_24_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp13 : int.
      ((((<=) (0) __framac_tmp13) /\
       ((<=) __framac_tmp13 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp14 : int.
      ((((<=) (0) __framac_tmp14) /\
       ((<=) __framac_tmp14 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3)))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_0 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Safe_bit_uint64.any_  () ) in
    begin
    (orig_count :=
     (let _jessie_534 = !mutable_count_1 in
     begin
     (assert {
     (#"/home/work/workspace/self/verker/memmove.c" 5 18 28#
     "expl:Pointer index bounds" true) }); _jessie_534 end));
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 1240 22 36# (sub_pointer_  dest_3 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_4 :=
        (let _jessie_560 =
        (#"/home/work/workspace/self/verker/memmove.c" 10 8 12#
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memmove.c" 10 2 12#
        "expl:Pointer index bounds" true) }); _jessie_560 end));
        begin
        (s_13 :=
         (let _jessie_548 =
         (#"/home/work/workspace/self/verker/memmove.c" 11 6 9#
         (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memmove.c" 11 2 9#
         "expl:Pointer index bounds" true) }); _jessie_548 end));
         'Loop_22:
         loop
         invariant { (#"whole_program.jc" 1244 9 4968# true) }
           variant { (#"/home/work/workspace/self/verker/memmove.c" 18 19 24#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker/memmove.c" 18 19 24#
             !mutable_count_1))) }
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_24, dest_3,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_8 : int.
              ((((<=) (0) i_8) /\
               ((<) i_8
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               i_8))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_8))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_7 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_7)
               /\ ((<) i_7 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s_13
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_13
             (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp_0_4
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_4
             (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_4
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_13
             (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 1246 43 56#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_0 :=
             (let _jessie_549 = !mutable_count_1 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             "expl:Pointer index bounds" true) }); _jessie_549 end));
             begin
             (mutable_count_1 :=
              (let _jessie_550 =
              (Safe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 1302 62 75# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
              "expl:Pointer index bounds" true) }); _jessie_550 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Safe_bit_uint64.(<>)  !tmp_2_0
              (#"whole_program.jc" 1305 53 66# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_3_exc ())));
             begin
             begin
             (tmp_0_5 :=
              (let _jessie_551 = !tmp_0_4 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 20 4 9#
              "expl:Pointer index bounds" true) }); _jessie_551 end));
              begin
              (tmp_0_4 :=
               (let _jessie_552 =
               (shift_typesafe  !tmp_0_4
                (Safe_int32.to_int 
                 (#"whole_program.jc" 1310 63 75# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memmove.c" 20 4 9#
               "expl:Pointer index bounds" true) }); _jessie_552 end));
               begin
               (tmp_1_1 :=
                (let _jessie_553 = !s_13 in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 20 13 16#
                "expl:Pointer index bounds" true) }); _jessie_553 end));
                begin
                (s_13 :=
                 (let _jessie_554 =
                 (shift_typesafe  !s_13
                  (Safe_int32.to_int 
                   (#"whole_program.jc" 1312 57 69# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 20 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_554 end));
                 (let _jessie_556 =
                 (let _jessie_555 =
                 (#"/home/work/workspace/self/verker/memmove.c" 20 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_3_24_alloc_table !charP_charM_dest_3_24
                  !tmp_1_1 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 20 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_555 end) in
                 (let _jessie_557 = !tmp_0_5 in
                 (let _jessie_558 = (0) in
                 (let _jessie_559 = _jessie_557 in
                 (#"/home/work/workspace/self/verker/memmove.c" 20 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_3_24_alloc_table charP_charM_dest_3_24
                  _jessie_557 _jessie_556 )))))) end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_24, dest_3,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_25 -> () end end end;
         (raise (Goto_while_0_break_3_exc ())) end end with
       Goto_while_0_break_3_exc _jessie_22 ->
       'While_0_break_3: 'While_0_break_3: () end
     else
      try
       begin
       (tmp_0_4 :=
        (let _jessie_547 =
        (#"/home/work/workspace/self/verker/memmove.c" 24 8 12#
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memmove.c" 24 2 12#
        "expl:Pointer index bounds" true) }); _jessie_547 end));
        begin
        (tmp_0_4 :=
         (let _jessie_546 =
         (shift_typesafe  !tmp_0_4
          (Safe_bit_uint64.to_int  !mutable_count_1 ) ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memmove.c" 25 2 14#
         "expl:Pointer index bounds" true) }); _jessie_546 end));
         begin
         (s_13 :=
          (let _jessie_545 =
          (#"/home/work/workspace/self/verker/memmove.c" 26 6 9#
          (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/memmove.c" 26 2 9#
          "expl:Pointer index bounds" true) }); _jessie_545 end));
          begin
          (s_13 :=
           (let _jessie_535 =
           (shift_typesafe  !s_13 (Safe_bit_uint64.to_int  !mutable_count_1 )
            ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/memmove.c" 27 2 12#
           "expl:Pointer index bounds" true) }); _jessie_535 end));
           'Loop_21:
           loop
           invariant { (#"whole_program.jc" 1337 9 4128# true) }
             variant {
               (#"/home/work/workspace/self/verker/memmove.c" 34 19 24#
               (Bit_uint64.to_int
               (#"/home/work/workspace/self/verker/memmove.c" 34 19 24#
               !mutable_count_1))) }
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_24, dest_3,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_10 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_10) /\
                 ((<) i_10 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                 i_10))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_10))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_9 : int.
                ((((<=) (0) i_9) /\
                 ((<) i_9 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s_13
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_13
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp_0_4
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_4
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_4
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_13
               (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 1339 43 56#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 :=
               (let _jessie_536 = !mutable_count_1 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               "expl:Pointer index bounds" true) }); _jessie_536 end));
               begin
               (mutable_count_1 :=
                (let _jessie_537 =
                (Safe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 1388 62 75# "expl:Integer cast"
                 (Safe_bit_uint64.of_int_const 1)) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
                "expl:Pointer index bounds" true) }); _jessie_537 end)); ()
               end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Safe_bit_uint64.(<>)  !tmp_3
                (#"whole_program.jc" 1391 51 64# "expl:Integer cast"
                (Safe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_0_exc ())));
               begin
               begin
               (tmp_0_4 :=
                (let _jessie_538 =
                (shift_typesafe  !tmp_0_4
                 (Int.(-_) 
                  (Safe_int32.to_int 
                   (#"whole_program.jc" 1395 63 75# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 36 4 9#
                "expl:Pointer index bounds" true) }); _jessie_538 end));
                begin
                (s_13 :=
                 (let _jessie_539 =
                 (shift_typesafe  !s_13
                  (Int.(-_) 
                   (Safe_int32.to_int 
                    (#"whole_program.jc" 1396 57 69# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 36 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_539 end));
                 (let _jessie_541 =
                 (let _jessie_540 =
                 (#"/home/work/workspace/self/verker/memmove.c" 36 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_3_24_alloc_table !charP_charM_dest_3_24
                  !s_13 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 36 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_540 end) in
                 (let _jessie_542 = !tmp_0_4 in
                 (let _jessie_543 = (0) in
                 (let _jessie_544 = _jessie_542 in
                 (#"/home/work/workspace/self/verker/memmove.c" 36 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_3_24_alloc_table charP_charM_dest_3_24
                  _jessie_542 _jessie_541 )))))) end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_24, dest_3,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_24
                  (shift
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_3_24
                  (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_27 -> () end end end;
           (raise (Goto_while_0_break_0_0_exc ())) end end end end with
       Goto_while_0_break_0_0_exc _jessie_23 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 1415 52 70#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end;
     begin
     (return :=
      (let _jessie_561 = dest_3 in
      begin
      (assert {
      (#"whole_program.jc" 1419 7 20# "expl:Pointer index bounds" true) });
       _jessie_561 end)); (raise Return) end end))))))); absurd  end with
    Return -> !return end))
  
end

module Function_memmove_behaviors
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
"expl:memmove, behaviors"

  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove_ensures_default
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, default behavior" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_3_24 : ref (memory voidP Int8.t))
   (voidP_dest_3_24_alloc_table : (alloc_table voidP))
   (voidP_dest_3_24_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_3_24_alloc_table src_3) ->
     ((instanceof voidP_dest_3_24_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table src_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_24_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_24_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_24_tag_table dest_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_24_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp13 : int.
      ((((<=) (0) __framac_tmp13) /\
       ((<=) __framac_tmp13 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp14 : int.
      ((((<=) (0) __framac_tmp14) /\
       ((<=) __framac_tmp14 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"whole_program.jc" 1210 10 73# "expl:Assigns clause"
     (not_assigns voidP_dest_3_24_alloc_table voidP_dest_3_24_alloc_table
     (old !charP_charM_dest_3_24) !charP_charM_dest_3_24
     (pset_range
     (pset_singleton (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
     (0) (Int.(-) (Bit_uint64.to_int count_1) (1)))))) } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_0 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 1240 22 36# (sub_pointer_  dest_3 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (s_13 := (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
         'Loop_16:
         loop
         invariant
           { (((#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
               (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
               ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
                (Bit_uint64.(<=) (#"whole_program.jc" 1246 43 56#
                "expl:Integer cast" (Bit_uint64.of_int_const 0))
                !mutable_count_1))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
               (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
               (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
               ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
                ((=)
                (sub_pointer !tmp_0_4
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
               ((=)
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1))
               (sub_pointer !s_13
               (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
                (same_block
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
                (same_block !tmp_0_4
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
               ((<=)
               (sub_pointer !tmp_0_4
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
                (same_block
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
                (same_block !s_13
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
               ((<=)
               (sub_pointer !s_13
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
               (forall i_7 : int.
                ((((<=)
                  (Int.(-) (Bit_uint64.to_int !orig_count)
                  (Bit_uint64.to_int !mutable_count_1)) i_7)
                 /\ ((<) i_7 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_7))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_7))))))
              &&
              (#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
              (forall i_8 : int.
               ((((<=) (0) i_8) /\
                ((<) i_8
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)))) ->
                (Int8.(=)
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                i_8))
                (select (at !charP_charM_dest_3_24 'Init)
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                i_8)))))))))))
             /\
             (#"whole_program.jc" 1210 10 73# "expl:Assigns clause"
             (not_assigns voidP_dest_3_24_alloc_table
             voidP_dest_3_24_alloc_table (at !charP_charM_dest_3_24 'Init)
             !charP_charM_dest_3_24
             (pset_range
             (pset_singleton
             (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0)
             (Int.(-) (Bit_uint64.to_int (at !mutable_count_1 'Init)) (1)))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_2_0 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 1302 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_0
              (#"whole_program.jc" 1305 53 66# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_3_exc ())));
             begin
             begin
             (tmp_0_5 := !tmp_0_4);
              begin
              (tmp_0_4 :=
               (shift_  !tmp_0_4
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1310 63 75# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_1 := !s_13);
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1312 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_472 = (acc  !charP_charM_dest_3_24 !tmp_1_1 )
                 in
                 (let _jessie_473 = !tmp_0_5 in
                 (let _jessie_474 = (0) in
                 (let _jessie_475 = _jessie_473 in
                 (upd  charP_charM_dest_3_24 _jessie_475 _jessie_472 )))))
                end end end end;
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
              "expl:Assertion in line 21"
              (Int8.(=)
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1)) (1))))
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1)) (1)))))) }); () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_25 -> () end end end;
         (raise (Goto_while_0_break_3_exc ())) end end with
       Goto_while_0_break_3_exc _jessie_22 ->
       'While_0_break_3: 'While_0_break_3: () end
     else
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp_0_4 :=
         (shift_  !tmp_0_4 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_13 :=
          (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
          begin
          (s_13 :=
           (shift_  !s_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_15:
           loop
           invariant
             { (((#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
                 (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
                 ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
                  (Bit_uint64.(<=) (#"whole_program.jc" 1339 43 56#
                  "expl:Integer cast" (Bit_uint64.of_int_const 0))
                  !mutable_count_1))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
                 (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
                 (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
                 ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                  ((=)
                  (sub_pointer !tmp_0_4
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
                  (Bit_uint64.to_int !mutable_count_1)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
                 ((=) (Bit_uint64.to_int !mutable_count_1)
                 (sub_pointer !s_13
                 (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                  (same_block
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  !tmp_0_4))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  !tmp_0_4) (0)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                  (same_block !tmp_0_4
                  (shift
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                 ((<=)
                 (sub_pointer !tmp_0_4
                 (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                  (same_block
                  (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
                  (0)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                  (same_block !s_13
                  (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                 ((<=)
                 (sub_pointer !s_13
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
                 (forall i_9 : int.
                  ((((<=) (0) i_9) /\
                   ((<) i_9 (Bit_uint64.to_int !mutable_count_1))) ->
                   (Int8.(=)
                   (select !charP_charM_dest_3_24
                   (shift
                   (downcast voidP_dest_3_24_tag_table src_3 charP_tag) i_9))
                   (select (at !charP_charM_dest_3_24 'Init)
                   (shift
                   (downcast voidP_dest_3_24_tag_table src_3 charP_tag) i_9))))))
                &&
                (#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
                (forall i_10 : int.
                 ((((<=) (Bit_uint64.to_int !mutable_count_1) i_10) /\
                  ((<) i_10 (Bit_uint64.to_int !orig_count))) ->
                  (Int8.(=)
                  (select !charP_charM_dest_3_24
                  (shift
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) i_10))
                  (select (at !charP_charM_dest_3_24 'Init)
                  (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                  i_10)))))))))))
               /\
               (#"whole_program.jc" 1210 10 73# "expl:Assigns clause"
               (not_assigns voidP_dest_3_24_alloc_table
               voidP_dest_3_24_alloc_table (at !charP_charM_dest_3_24 'Init)
               !charP_charM_dest_3_24
               (pset_range
               (pset_singleton
               (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0)
               (Int.(-) (Bit_uint64.to_int (at !mutable_count_1 'Init)) (1)))))) }
             
            begin
            any unit requires { true } ensures { true } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 1388 62 75# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"whole_program.jc" 1391 51 64# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_0_exc ())));
               begin
               begin
               (tmp_0_4 :=
                (shift_  !tmp_0_4
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1395 63 75# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 1396 57 69# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_457 = (acc  !charP_charM_dest_3_24 !s_13 ) in
                 (let _jessie_458 = !tmp_0_4 in
                 (let _jessie_459 = (0) in
                 (let _jessie_460 = _jessie_458 in
                 (upd  charP_charM_dest_3_24 _jessie_460 _jessie_457 )))))
                end end;
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                "expl:Assertion in line 37"
                (Int8.(=)
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !mutable_count_1)))
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !mutable_count_1))))) }); () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_27 -> () end end end;
           (raise (Goto_while_0_break_0_0_exc ())) end end end end with
       Goto_while_0_break_0_0_exc _jessie_23 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end);
     begin
     (assert {
     (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
     "expl:Assertion in line 40"
     (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 1415 52 70#
     "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
     end; begin (return := dest_3); (raise Return) end end))))))); absurd 
    end with Return -> !return end))
  
  let memmove_ensures_diff_addr
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, behavior diff_addr" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_3_24 : ref (memory voidP Int8.t))
   (voidP_dest_3_24_alloc_table : (alloc_table voidP))
   (voidP_dest_3_24_tag_table : (tag_table voidP)) 
   requires {
   ((not (same_block dest_3 src_3)) /\
   (((allocated voidP_dest_3_24_alloc_table src_3) ->
     ((instanceof voidP_dest_3_24_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table src_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_24_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_24_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_24_tag_table dest_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_24_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp13 : int.
      ((((<=) (0) __framac_tmp13) /\
       ((<=) __framac_tmp13 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp14 : int.
      ((((<=) (0) __framac_tmp14) /\
       ((<=) __framac_tmp14 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
     "expl:Ensures clause"
     (forall i_5_0 : int.
      ((((<=) (0) i_5_0) /\ ((<) i_5_0 (Bit_uint64.to_int count_1))) ->
       (Int8.(=)
       (select !charP_charM_dest_3_24
       (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) i_5_0))
       (select (old !charP_charM_dest_3_24)
       (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag) i_5_0)))))))
     } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_0 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 1240 22 36# (sub_pointer_  dest_3 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (s_13 := (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
         'Loop_20:
         loop
         invariant { (#"whole_program.jc" 1244 9 4968# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_24, dest_3,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_8 : int.
              ((((<=) (0) i_8) /\
               ((<) i_8
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               i_8))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_8))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_7 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_7)
               /\ ((<) i_7 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s_13
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_13
             (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp_0_4
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_4
             (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_4
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_13
             (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 1246 43 56#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_0 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 1302 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_0
              (#"whole_program.jc" 1305 53 66# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_3_exc ())));
             begin
             begin
             (tmp_0_5 := !tmp_0_4);
              begin
              (tmp_0_4 :=
               (shift_  !tmp_0_4
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1310 63 75# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_1 := !s_13);
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1312 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_528 = (acc  !charP_charM_dest_3_24 !tmp_1_1 )
                 in
                 (let _jessie_529 = !tmp_0_5 in
                 (let _jessie_530 = (0) in
                 (let _jessie_531 = _jessie_529 in
                 (upd  charP_charM_dest_3_24 _jessie_531 _jessie_528 )))))
                end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_24, dest_3,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_25 -> () end end end;
         (raise (Goto_while_0_break_3_exc ())) end end with
       Goto_while_0_break_3_exc _jessie_22 ->
       'While_0_break_3: 'While_0_break_3: () end
     else
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp_0_4 :=
         (shift_  !tmp_0_4 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_13 :=
          (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
          begin
          (s_13 :=
           (shift_  !s_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_19:
           loop
           invariant { (#"whole_program.jc" 1337 9 4128# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_24, dest_3,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_10 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_10) /\
                 ((<) i_10 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                 i_10))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_10))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_9 : int.
                ((((<=) (0) i_9) /\
                 ((<) i_9 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s_13
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_13
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp_0_4
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_4
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_4
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_13
               (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 1339 43 56#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 1388 62 75# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"whole_program.jc" 1391 51 64# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_0_exc ())));
               begin
               begin
               (tmp_0_4 :=
                (shift_  !tmp_0_4
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1395 63 75# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 1396 57 69# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_513 = (acc  !charP_charM_dest_3_24 !s_13 ) in
                 (let _jessie_514 = !tmp_0_4 in
                 (let _jessie_515 = (0) in
                 (let _jessie_516 = _jessie_514 in
                 (upd  charP_charM_dest_3_24 _jessie_516 _jessie_513 )))))
                end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_24, dest_3,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_24
                  (shift
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_3_24
                  (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_27 -> () end end end;
           (raise (Goto_while_0_break_0_0_exc ())) end end end end with
       Goto_while_0_break_0_0_exc _jessie_23 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 1415 52 70#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_3); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
  let memmove_ensures_same_addr
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 82 5 52#
  "expl:Function memmove, behavior same_addr" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count_1 : Uint64.t)
   (charP_charM_dest_3_24 : ref (memory voidP Int8.t))
   (voidP_dest_3_24_alloc_table : (alloc_table voidP))
   (voidP_dest_3_24_tag_table : (tag_table voidP)) 
   requires {
   ((same_block dest_3 src_3) /\
   (((allocated voidP_dest_3_24_alloc_table src_3) ->
     ((instanceof voidP_dest_3_24_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table src_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_24_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_24_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_24_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_24_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_24_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_24_tag_table dest_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_24_tag_table src_3 charP_tag))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp13 : int.
      ((((<=) (0) __framac_tmp13) /\
       ((<=) __framac_tmp13 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 1179 12 2029#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_1) (1))) then
     (((<=)
      (offset_min voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_24_alloc_table
      (downcast voidP_dest_3_24_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count_1) (1)))
     /\
     (forall __framac_tmp14 : int.
      ((((<=) (0) __framac_tmp14) /\
       ((<=) __framac_tmp14 (Int.(-) (Bit_uint64.to_int count_1) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
     "expl:Ensures clause"
     (forall i_6 : int.
      ((((<=) (0) i_6) /\ ((<) i_6 (Bit_uint64.to_int count_1))) ->
       (Int8.(=)
       (select !charP_charM_dest_3_24
       (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) i_6))
       (select (old !charP_charM_dest_3_24)
       (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag) i_6)))))))
     } diverges  ->
   (let mutable_count_1 = ref count_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_4 = ref (any_pointer  () : (pointer voidP)) in
    (let s_13 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_5 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_0 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count_1);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"whole_program.jc" 1240 22 36# (sub_pointer_  dest_3 src_3 ))
      (0) ))
     then
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (s_13 := (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
         'Loop_18:
         loop
         invariant { (#"whole_program.jc" 1244 9 4968# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_24, dest_3,
          mutable_count_1, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_8 : int.
              ((((<=) (0) i_8) /\
               ((<) i_8
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count_1)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               i_8))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_8))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_7 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) i_7)
               /\ ((<) i_7 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_24
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))
               (select (at !charP_charM_dest_3_24 'Init)
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               i_7))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s_13
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s_13
             (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag) !tmp_0_4)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp_0_4
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp_0_4
             (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp_0_4
              (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count_1))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count_1))
             (sub_pointer !s_13
             (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"whole_program.jc" 1246 43 56#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_1))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2_0 := !mutable_count_1);
             begin
             (mutable_count_1 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_1
               (#"whole_program.jc" 1302 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2_0
              (#"whole_program.jc" 1305 53 66# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_3_exc ())));
             begin
             begin
             (tmp_0_5 := !tmp_0_4);
              begin
              (tmp_0_4 :=
               (shift_  !tmp_0_4
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1310 63 75# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1_1 := !s_13);
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1312 57 69# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_500 = (acc  !charP_charM_dest_3_24 !tmp_1_1 )
                 in
                 (let _jessie_501 = !tmp_0_5 in
                 (let _jessie_502 = (0) in
                 (let _jessie_503 = _jessie_501 in
                 (upd  charP_charM_dest_3_24 _jessie_503 _jessie_500 )))))
                end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_24, dest_3,
              mutable_count_1, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1))))
                (select !charP_charM_dest_3_24
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count_1)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_25 -> () end end end;
         (raise (Goto_while_0_break_3_exc ())) end end with
       Goto_while_0_break_3_exc _jessie_22 ->
       'While_0_break_3: 'While_0_break_3: () end
     else
      try
       begin
       (tmp_0_4 :=
        (downcast_  voidP_dest_3_24_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp_0_4 :=
         (shift_  !tmp_0_4 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
         begin
         (s_13 :=
          (downcast_  voidP_dest_3_24_tag_table src_3 (charP_tag  ) ));
          begin
          (s_13 :=
           (shift_  !s_13 (Unsafe_bit_uint64.to_int  !mutable_count_1 ) ));
           'Loop_17:
           loop
           invariant { (#"whole_program.jc" 1337 9 4128# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_24, dest_3,
            mutable_count_1, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_10 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count_1) i_10) /\
                 ((<) i_10 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                 i_10))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_10))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_9 : int.
                ((((<=) (0) i_9) /\
                 ((<) i_9 (Bit_uint64.to_int !mutable_count_1))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_24
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))
                 (select (at !charP_charM_dest_3_24 'Init)
                 (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                 i_9))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table src_3 charP_tag) !s_13)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s_13
                (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s_13
               (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                !tmp_0_4) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp_0_4
                (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp_0_4
               (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp_0_4
                (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count_1)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count_1)
               (sub_pointer !s_13
               (downcast voidP_dest_3_24_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"whole_program.jc" 1339 43 56#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_1))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count_1 !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count_1);
               begin
               (mutable_count_1 :=
                (Unsafe_bit_uint64.(-%)  !mutable_count_1
                 (#"whole_program.jc" 1388 62 75# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"whole_program.jc" 1391 51 64# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_0_exc ())));
               begin
               begin
               (tmp_0_4 :=
                (shift_  !tmp_0_4
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"whole_program.jc" 1395 63 75# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s_13 :=
                 (shift_  !s_13
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"whole_program.jc" 1396 57 69# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_485 = (acc  !charP_charM_dest_3_24 !s_13 ) in
                 (let _jessie_486 = !tmp_0_4 in
                 (let _jessie_487 = (0) in
                 (let _jessie_488 = _jessie_486 in
                 (upd  charP_charM_dest_3_24 _jessie_488 _jessie_485 )))))
                end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_24, dest_3,
                mutable_count_1, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_24
                  (shift
                  (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1)))
                  (select !charP_charM_dest_3_24
                  (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count_1))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_27 -> () end end end;
           (raise (Goto_while_0_break_0_0_exc ())) end end end end with
       Goto_while_0_break_0_0_exc _jessie_23 ->
       'While_0_break_0_0: 'While_0_break_0_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count_1 }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count_1 (#"whole_program.jc" 1415 52 70#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_3); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_unsigned_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function unsigned_charP_tag  : (tag_id
  voidP)
  
  axiom Unsigned_charP_parenttag_voidP :
  (parenttag unsigned_charP_tag voidP_tag)
  
  axiom Unsigned_charP_is_final :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p unsigned_charP_tag) ->
     ((=) (typeof voidP_tag_table p) unsigned_charP_tag))))
  
  predicate frame_tag_struct_unsigned_charP (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_unsigned_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_unsigned_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_unsigned_charP (p : (pointer voidP))
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_unsigned_charP (p : (pointer
  voidP)) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_unsigned_charP (p : (pointer voidP)) (l :
  int) (r : int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) unsigned_charP_tag)
  
  predicate typeof_struct_unsigned_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) unsigned_charP_tag))))
  
  predicate instanceof_singleton_struct_unsigned_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p unsigned_charP_tag)
  
  predicate instanceof_struct_unsigned_charP (p : (pointer voidP)) (l : int)
  (r : int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) unsigned_charP_tag))))
  
  predicate right_valid_struct_unsigned_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_unsigned_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_unsigned_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_unsigned_charP (p : (pointer voidP)) (a :
  int) (b : int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom Unsigned_charP_int : ((=) (int_of_tag unsigned_charP_tag) (6))
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Function_memcmp_safety
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
"expl:memcmp, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memcmp
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, safety" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_19_alloc_table : (alloc_table voidP)) (voidP_ct_20_alloc_table :
   (alloc_table voidP)) (voidP_ct_20_tag_table : (tag_table voidP))
   (voidP_cs_19_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_ct_20_alloc_table ct) ->
     ((instanceof voidP_ct_20_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_20_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_20_alloc_table ct))) ->
       (instanceof voidP_ct_20_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_19_alloc_table cs) ->
     ((instanceof voidP_cs_19_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_19_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_19_alloc_table cs))) ->
       (instanceof voidP_cs_19_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 25 13 39#
    (instanceof voidP_cs_19_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 26 13 39#
    (instanceof voidP_ct_20_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp9 : int.
      ((((<=) (0) __framac_tmp9) /\
       ((<=) __framac_tmp9 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp10 : int.
      ((((<=) (0) __framac_tmp10) /\
       ((<=) __framac_tmp10 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Safe_int32.any_  () ) in
     (let __retres_2 = ref (Safe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (let _jessie_417 =
       (#"whole_program.jc" 985 25 37# "expl:Integer cast"
       (Safe_int32.of_int (0))) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/memcmp.c" 50 5 8#
       "expl:Pointer index bounds" true) }); _jessie_417 end));
       begin
       (su1 :=
        (let _jessie_416 =
        (#"/home/work/workspace/self/verker/memcmp.c" 66 12 14#
        (downcast_  voidP_cs_19_tag_table cs (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memcmp.c" 66 6 14#
        "expl:Pointer index bounds" true) }); _jessie_416 end));
        begin
        (su2 :=
         (let _jessie_411 =
         (#"/home/work/workspace/self/verker/memcmp.c" 66 22 24#
         (downcast_  voidP_ct_20_tag_table ct (unsigned_charP_tag  ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memcmp.c" 66 16 24#
         "expl:Pointer index bounds" true) }); _jessie_411 end));
         'Loop_12:
         loop
         invariant { (#"whole_program.jc" 989 6 3495# true) }
           variant { (#"/home/work/workspace/self/verker/memcmp.c" 64 18 23#
             (Uint64.to_int
             (#"/home/work/workspace/self/verker/memcmp.c" 64 18 23#
             !mutable_count))) }
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 1032 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_19
               (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_20
               (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 991 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/memcmp.c" 66 26 35#
            (Safe_uint64.(<) 
             (#"whole_program.jc" 1039 27 40# "expl:Integer cast"
             (Safe_uint64.of_int (0))) !mutable_count )) then ()
            else (raise (Goto_while_0_break_1_exc ())));
             begin
             (res_0 :=
              (let _jessie_412 =
              (Safe_int32.(-) 
               (#"/home/work/workspace/self/verker/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Safe_int32_of_Safe_uint8.cast 
                (#"/home/work/workspace/self/verker/memcmp.c" 67 13 17#
                "expl:Pointer dereference"
                (acc  voidP_cs_19_alloc_table
                 unsigned_charP_unsigned_charM_cs_19 !su1 )) ))
               (#"/home/work/workspace/self/verker/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Safe_int32_of_Safe_uint8.cast 
                (#"/home/work/workspace/self/verker/memcmp.c" 67 20 24#
                "expl:Pointer dereference"
                (acc  voidP_ct_20_alloc_table
                 unsigned_charP_unsigned_charM_ct_20 !su2 )) )) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memcmp.c" 67 7 24#
              "expl:Pointer index bounds" true) }); _jessie_412 end));
              (if
              (#"/home/work/workspace/self/verker/memcmp.c" 67 6 30#
              (Safe_int32.(<>)  !res_0
               (#"whole_program.jc" 1043 36 48# "expl:Integer cast"
               (Safe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_1_exc ())) else ());
              begin
              (su1 :=
               (let _jessie_413 =
               (shift_typesafe  !su1
                (Safe_int32.to_int 
                 (#"whole_program.jc" 1045 46 58# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memcmp.c" 66 37 42#
               "expl:Pointer index bounds" true) }); _jessie_413 end));
               begin
               (su2 :=
                (let _jessie_414 =
                (shift_typesafe  !su2
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 1046 46 58# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memcmp.c" 66 44 49#
                "expl:Pointer index bounds" true) }); _jessie_414 end));
                (mutable_count :=
                 (let _jessie_415 =
                 (Safe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 1047 61 74# "expl:Integer cast"
                  (Safe_uint64.of_int (1))) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memcmp.c" 66 51 58#
                 "expl:Pointer index bounds" true) }); _jessie_415 end)) end
              end end end; (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_18 -> () end end end;
         (raise (Goto_while_0_break_1_exc ())) end end end with
      Goto_while_0_break_1_exc _jessie_16 ->
      'While_0_break_1:
      'While_0_break_1:
      begin
      ();
       begin
       (__retres_2 :=
        (let _jessie_418 = !res_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memcmp.c" 70 1 12#
        "expl:Pointer index bounds" true) }); _jessie_418 end));
        begin
        (return :=
         (let _jessie_419 = !__retres_2 in
         begin
         (assert {
         (#"whole_program.jc" 1053 7 24# "expl:Pointer index bounds" true) });
          _jessie_419 end)); (raise Return) end end end end)))); absurd  end
    with Return -> !return end))
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Function_memcmp_behaviors
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
"expl:memcmp, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memcmp_ensures_default
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, default behavior" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_19_alloc_table : (alloc_table voidP)) (voidP_ct_20_alloc_table :
   (alloc_table voidP)) (voidP_ct_20_tag_table : (tag_table voidP))
   (voidP_cs_19_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_ct_20_alloc_table ct) ->
     ((instanceof voidP_ct_20_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_20_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_20_alloc_table ct))) ->
       (instanceof voidP_ct_20_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_19_alloc_table cs) ->
     ((instanceof voidP_cs_19_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_19_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_19_alloc_table cs))) ->
       (instanceof voidP_cs_19_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 25 13 39#
    (instanceof voidP_cs_19_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 26 13 39#
    (instanceof voidP_ct_20_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp9 : int.
      ((((<=) (0) __framac_tmp9) /\
       ((<=) __framac_tmp9 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp10 : int.
      ((((<=) (0) __framac_tmp10) /\
       ((<=) __framac_tmp10 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))))))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 955 10 757# "expl:Behavior disjointness check"
    (not
    ((forall i_3_1 : int.
      ((((<=) (0) i_3_1) /\ ((<) i_3_1 (Uint64.to_int !mutable_count))) ->
       (Uint8.(=)
       (select unsigned_charP_unsigned_charM_cs_19
       (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_3_1))
       (select unsigned_charP_unsigned_charM_ct_20
       (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_3_1)))))
    /\
    (exists i_1_1 : int.
     (((<=) (0) i_1_1) /\
     (((<) i_1_1 (Uint64.to_int !mutable_count)) /\
     (Uint8.(<>)
     (select unsigned_charP_unsigned_charM_cs_19
     (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_1_1))
     (select unsigned_charP_unsigned_charM_ct_20
     (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_1_1)))))))))
    });
     (check {
     (#"whole_program.jc" 966 10 726# "expl:Behavior completeness check"
     ((exists i_1_2 : int.
       (((<=) (0) i_1_2) /\
       (((<) i_1_2 (Uint64.to_int !mutable_count)) /\
       (Uint8.(<>)
       (select unsigned_charP_unsigned_charM_cs_19
       (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_1_2))
       (select unsigned_charP_unsigned_charM_ct_20
       (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_1_2))))))
     \/
     (forall i_3_2 : int.
      ((((<=) (0) i_3_2) /\ ((<) i_3_2 (Uint64.to_int !mutable_count))) ->
       (Uint8.(=)
       (select unsigned_charP_unsigned_charM_cs_19
       (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_3_2))
       (select unsigned_charP_unsigned_charM_ct_20
       (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_3_2)))))))
     });
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_2 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 985 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_19_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 :=
         (downcast_  voidP_ct_20_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_9:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
              (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
              ((#"/home/work/workspace/self/verker/memcmp.c" 52 20 30#
               (Uint64.(<=) (#"whole_program.jc" 991 40 53#
               "expl:Integer cast" (Uint64.of_int (0))) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 52 25 48#
              (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))
             &&
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
              (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
               (same_block
               (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
               ((<=)
               (sub_pointer
               (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1)
               (0)))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
               (same_block !su1
               (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
               (Uint64.to_int (at !mutable_count 'Init)))))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
              ((<=)
              (sub_pointer !su1
              (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
              (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
               (same_block
               (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
               ((<=)
               (sub_pointer
               (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2)
               (0)))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
              ((#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
               (same_block !su2
               (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
               (Uint64.to_int (at !mutable_count 'Init)))))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
              ((<=)
              (sub_pointer !su2
              (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
              (#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
              ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 72#
               ((=)
               (sub_pointer !su1
               (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
               (sub_pointer !su2
               (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))
              /\
              (#"/home/work/workspace/self/verker/memcmp.c" 56 20 80#
              ((=)
              (sub_pointer !su2
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
              (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
              (Uint64.to_int !mutable_count)))))))
             &&
             ((#"/home/work/workspace/self/verker/memcmp.c" 58 20 125#
              (forall i_4 : int.
               ((((<=) (0) i_4) /\
                ((<) i_4
                (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
                (Uint64.to_int !mutable_count)))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_4))
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_4))))))
             &&
             (#"/home/work/workspace/self/verker/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 1032 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"whole_program.jc" 1039 27 40# "expl:Integer cast"
             (Unsafe_uint64.of_int (0))) !mutable_count )) then ()
            else (raise (Goto_while_0_break_1_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_19 !su1 ) ))
               (#"/home/work/workspace/self/verker/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_20 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 1043 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_1_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1045 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 1046 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 1047 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_18 -> () end end end;
         (raise (Goto_while_0_break_1_exc ())) end end end with
      Goto_while_0_break_1_exc _jessie_16 ->
      'While_0_break_1:
      'While_0_break_1:
      begin
      ();
       begin
       (__retres_2 := !res_0);
        begin (return := !__retres_2); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let memcmp_ensures_diff
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, behavior diff" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_19_alloc_table : (alloc_table voidP)) (voidP_ct_20_alloc_table :
   (alloc_table voidP)) (voidP_ct_20_tag_table : (tag_table voidP))
   (voidP_cs_19_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
   requires {
   ((exists i_1_0 : int.
     (((<=) (0) i_1_0) /\
     (((<) i_1_0 (Uint64.to_int count)) /\
     (Uint8.(<>)
     (select unsigned_charP_unsigned_charM_cs_19
     (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_1_0))
     (select unsigned_charP_unsigned_charM_ct_20
     (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_1_0))))))
   /\
   (((allocated voidP_ct_20_alloc_table ct) ->
     ((instanceof voidP_ct_20_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_20_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_20_alloc_table ct))) ->
       (instanceof voidP_ct_20_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_19_alloc_table cs) ->
     ((instanceof voidP_cs_19_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_19_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_19_alloc_table cs))) ->
       (instanceof voidP_cs_19_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 25 13 39#
    (instanceof voidP_cs_19_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 26 13 39#
    (instanceof voidP_ct_20_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp9 : int.
      ((((<=) (0) __framac_tmp9) /\
       ((<=) __framac_tmp9 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp10 : int.
      ((((<=) (0) __framac_tmp10) /\
       ((<=) __framac_tmp10 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memcmp.c" 40 15 241#
     "expl:Ensures clause"
     (exists i_2_0 : int.
      (((<=) (0) i_2_0) /\
      (((<) i_2_0 (Uint64.to_int count)) /\
      ((forall j_0 : int.
        ((((<=) (0) j_0) /\ ((<) j_0 i_2_0)) ->
         (Uint8.(=)
         (select unsigned_charP_unsigned_charM_cs_19
         (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) j_0))
         (select unsigned_charP_unsigned_charM_ct_20
         (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) j_0)))))
      /\
      ((Uint8.(<>)
       (select unsigned_charP_unsigned_charM_cs_19
       (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_2_0))
       (select unsigned_charP_unsigned_charM_ct_20
       (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_2_0)))
      /\
      ((=) (Int32.to_int result)
      (Int.(-)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_cs_19
      (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_2_0)))
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_ct_20
      (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_2_0))))))))))))
     } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_2 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 985 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_19_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 :=
         (downcast_  voidP_ct_20_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_11:
         loop
         invariant { (#"whole_program.jc" 989 6 3495# true) } 
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 1032 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_19
               (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_20
               (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 991 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"whole_program.jc" 1039 27 40# "expl:Integer cast"
             (Unsafe_uint64.of_int (0))) !mutable_count )) then ()
            else (raise (Goto_while_0_break_1_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_19 !su1 ) ))
               (#"/home/work/workspace/self/verker/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_20 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 1043 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_1_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1045 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 1046 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 1047 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_18 -> () end end end;
         (raise (Goto_while_0_break_1_exc ())) end end end with
      Goto_while_0_break_1_exc _jessie_16 ->
      'While_0_break_1:
      'While_0_break_1:
      begin
      ();
       begin
       (__retres_2 := !res_0);
        begin (return := !__retres_2); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let memcmp_ensures_equal
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 96 4 55#
  "expl:Function memcmp, behavior equal" =
  fun
   (cs : (pointer voidP)) (ct : (pointer voidP)) (count : Uint64.t)
   (voidP_cs_19_alloc_table : (alloc_table voidP)) (voidP_ct_20_alloc_table :
   (alloc_table voidP)) (voidP_ct_20_tag_table : (tag_table voidP))
   (voidP_cs_19_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t))
   (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
   requires {
   ((forall i_3_0 : int.
     ((((<=) (0) i_3_0) /\ ((<) i_3_0 (Uint64.to_int count))) ->
      (Uint8.(=)
      (select unsigned_charP_unsigned_charM_cs_19
      (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) i_3_0))
      (select unsigned_charP_unsigned_charM_ct_20
      (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) i_3_0)))))
   /\
   (((allocated voidP_ct_20_alloc_table ct) ->
     ((instanceof voidP_ct_20_tag_table ct voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_20_alloc_table ct) i) /\
       ((<) i (offset_max voidP_ct_20_alloc_table ct))) ->
       (instanceof voidP_ct_20_tag_table (shift ct i) voidP_tag)))))
   /\
   (((allocated voidP_cs_19_alloc_table cs) ->
     ((instanceof voidP_cs_19_tag_table cs voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_19_alloc_table cs) i) /\
       ((<) i (offset_max voidP_cs_19_alloc_table cs))) ->
       (instanceof voidP_cs_19_tag_table (shift cs i) voidP_tag)))))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 25 13 39#
    (instanceof voidP_cs_19_tag_table cs unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 26 13 39#
    (instanceof voidP_ct_20_tag_table ct unsigned_charP_tag))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 27 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_cs_19_alloc_table
      (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp9 : int.
      ((((<=) (0) __framac_tmp9) /\
       ((<=) __framac_tmp9 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 897 12 2278#
   ((#"/home/work/workspace/self/verker/memcmp.c" 28 13 44#
    (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_ct_20_alloc_table
      (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
      (Int.(-) (Uint64.to_int count) (1)))
     /\
     (forall __framac_tmp10 : int.
      ((((<=) (0) __framac_tmp10) /\
       ((<=) __framac_tmp10 (Int.(-) (Uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memcmp.c" 29 13 118#
   (((same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
     (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
    /\
    (not
    (not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))
   \/
   ((not
    (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
    (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))
   /\
   (not
   (same_block (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memcmp.c" 37 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 937 32 44# "expl:Integer cast"
     (Int32.of_int (0)))))) } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let su1 = ref (any_pointer  () : (pointer voidP)) in
     (let su2 = ref (any_pointer  () : (pointer voidP)) in
     (let res_0 = ref (Unsafe_int32.any_  () ) in
     (let __retres_2 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (res_0 :=
       (#"whole_program.jc" 985 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       begin
       (su1 := (downcast_  voidP_cs_19_tag_table cs (unsigned_charP_tag  ) ));
        begin
        (su2 :=
         (downcast_  voidP_ct_20_tag_table ct (unsigned_charP_tag  ) ));
         'Loop_10:
         loop
         invariant { (#"whole_program.jc" 989 6 3495# true) } 
          begin
          any unit
          requires { true } reads { cs, ct, mutable_count }
          ensures {
            ((#"/home/work/workspace/self/verker/memcmp.c" 62 20 28#
             (Int32.(=) !res_0 (#"whole_program.jc" 1032 38 50#
             "expl:Integer cast" (Int32.of_int (0)))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 58 20 125#
             (forall i_4 : int.
              ((((<=) (0) i_4) /\
               ((<) i_4
               (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
               (Uint64.to_int !mutable_count)))) ->
               (Uint8.(=)
               (select unsigned_charP_unsigned_charM_cs_19
               (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
               i_4))
               (select unsigned_charP_unsigned_charM_ct_20
               (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
               i_4))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             (#"/home/work/workspace/self/verker/memcmp.c" 55 20 118#
             ((#"/home/work/workspace/self/verker/memcmp.c" 55 20 72#
              ((=)
              (sub_pointer !su1
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
              (sub_pointer !su2
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 56 20 80#
             ((=)
             (sub_pointer !su2
             (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_count 'Init))
             (Uint64.to_int !mutable_count)))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              (same_block
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag) !su2)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
              (same_block !su2
              (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 54 32 64#
             ((<=)
             (sub_pointer !su2
             (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              (same_block
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag) !su1)
              (0)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 20 64#
             ((#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
              (same_block !su1
              (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (Uint64.to_int (at !mutable_count 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 53 32 64#
             ((<=)
             (sub_pointer !su1
             (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
             (Uint64.to_int (at !mutable_count 'Init)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            (#"/home/work/workspace/self/verker/memcmp.c" 52 20 48#
            ((#"/home/work/workspace/self/verker/memcmp.c" 52 20 30#
             (Uint64.(<=) (#"whole_program.jc" 991 40 53# "expl:Integer cast"
             (Uint64.of_int (0))) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memcmp.c" 52 25 48#
            (Uint64.(<=) !mutable_count (at !mutable_count 'Init))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/memcmp.c" 66 26 35#
            (Unsafe_uint64.(<) 
             (#"whole_program.jc" 1039 27 40# "expl:Integer cast"
             (Unsafe_uint64.of_int (0))) !mutable_count )) then ()
            else (raise (Goto_while_0_break_1_exc ())));
             begin
             (res_0 :=
              (Unsafe_int32.(-) 
               (#"/home/work/workspace/self/verker/memcmp.c" 67 13 17#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_cs_19 !su1 ) ))
               (#"/home/work/workspace/self/verker/memcmp.c" 67 20 24#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_uint8.cast 
                (acc  unsigned_charP_unsigned_charM_ct_20 !su2 ) )) ));
              (if
              (#"/home/work/workspace/self/verker/memcmp.c" 67 6 30#
              (Unsafe_int32.(<>)  !res_0
               (#"whole_program.jc" 1043 36 48# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then (raise (Goto_while_0_break_1_exc ())) else ());
              begin
              (su1 :=
               (shift_  !su1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 1045 46 58# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (su2 :=
                (shift_  !su2
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 1046 46 58# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (mutable_count :=
                 (Unsafe_uint64.(-)  !mutable_count
                  (#"whole_program.jc" 1047 61 74# "expl:Integer cast"
                  (Unsafe_uint64.of_int (1))) )) end end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_18 -> () end end end;
         (raise (Goto_while_0_break_1_exc ())) end end end with
      Goto_while_0_break_1_exc _jessie_16 ->
      'While_0_break_1:
      'While_0_break_1:
      begin
      ();
       begin
       (__retres_2 := !res_0);
        begin (return := !__retres_2); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memset_safety
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
"expl:memset, safety"

  use enum.Uint64 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  let memset
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
  "expl:Function memset, safety" =
  fun
   (s_2_1 : (pointer voidP)) (c_13 : Int32.t) (count_2 : Uint64.t)
   (charP_charM_s_2_29 : ref (memory voidP Int8.t)) (voidP_s_2_29_alloc_table
   : (alloc_table voidP)) (voidP_s_2_29_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_s_2_29_alloc_table s_2_1) ->
     ((instanceof voidP_s_2_29_tag_table s_2_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_2_29_alloc_table s_2_1) i) /\
       ((<) i (offset_max voidP_s_2_29_alloc_table s_2_1))) ->
       (instanceof voidP_s_2_29_tag_table (shift s_2_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1560 12 757#
   ((#"/home/work/workspace/self/verker/memset.h" 15 13 40#
    (instanceof voidP_s_2_29_tag_table s_2_1 charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memset.h" 16 13 43#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_2) (1))) then
    (((<=)
     (offset_min voidP_s_2_29_alloc_table
     (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_2_29_alloc_table
     (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_2) (1)))
    /\
    (forall __framac_tmp16 : int.
     ((((<=) (0) __framac_tmp16) /\
      ((<=) __framac_tmp16 (Int.(-) (Bit_uint64.to_int count_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_2 = ref count_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let xs = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_0 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_0_6 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_7 = ref (Safe_bit_uint64.any_  () ) in
    try
     begin
     (xs :=
      (let _jessie_608 =
      (#"/home/work/workspace/self/verker/memset.c" 5 12 13#
      (downcast_  voidP_s_2_29_tag_table s_2_1 (charP_tag  ) )) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/memset.c" 5 6 9#
      "expl:Pointer index bounds" true) }); _jessie_608 end));
      begin
      (ocount_0 :=
       (let _jessie_598 = !mutable_count_2 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/memset.c" 6 18 24#
       "expl:Pointer index bounds" true) }); _jessie_598 end));
       'Loop_28:
       loop
       invariant { (#"whole_program.jc" 1600 6 2169# true) }
         variant { (#"/home/work/workspace/self/verker/memset.c" 12 18 23#
           (Bit_uint64.to_int
           (#"/home/work/workspace/self/verker/memset.c" 12 18 23#
           !mutable_count_2))) }
        begin
        any unit
        requires { true } reads { c_13, charP_charM_s_2_29, mutable_count_2,
        s_2_1 }
        ensures {
          ((#"/home/work/workspace/self/verker/memset.c" 11 20 76#
           (forall p_5 : (pointer voidP).
            (((same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_5)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_5) (0))
             /\ ((same_block p_5 !xs) /\ ((<) (sub_pointer p_5 !xs) (0)))))
             ->
             (Bit_int8.(=) (select !charP_charM_s_2_29 p_5)
             (#"whole_program.jc" 1625 44 59# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13))))))
          /\
          ((#"/home/work/workspace/self/verker/memset.c" 10 20 44#
           ((=)
           (sub_pointer !xs
           (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
           (Int.(-) (Bit_uint64.to_int !ocount_0)
           (Bit_uint64.to_int !mutable_count_2))))
          /\
          ((#"/home/work/workspace/self/verker/memset.c" 9 20 57#
           (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker/memset.c" 9 20 35#
            (same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
            !xs))
           /\
           (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker/memset.c" 9 20 35#
            ((<=)
            (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
            !xs) (0)))
           /\
           (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
           ((#"/home/work/workspace/self/verker/memset.c" 9 33 57#
            (same_block !xs
            (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
            (Bit_uint64.to_int !ocount_0))))
           /\
           (#"/home/work/workspace/self/verker/memset.c" 9 33 57#
           ((<=)
           (sub_pointer !xs
           (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
           (Bit_uint64.to_int !ocount_0))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/memset.c" 8 20 40#
          (#"/home/work/workspace/self/verker/memset.c" 8 20 40#
          ((#"/home/work/workspace/self/verker/memset.c" 8 20 30#
           (Bit_uint64.(<=) (#"whole_program.jc" 1602 40 53#
           "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_count_2))
          /\
          (#"/home/work/workspace/self/verker/memset.c" 8 25 40#
          (Bit_uint64.(<=) !mutable_count_2 !ocount_0)))))))) } ;
         try
          begin
          begin
          begin
          (tmp_0_7 :=
           (let _jessie_599 = !mutable_count_2 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/memset.c" 14 8 19#
           "expl:Pointer index bounds" true) }); _jessie_599 end));
           begin
           (mutable_count_2 :=
            (let _jessie_600 =
            (Safe_bit_uint64.(-%)  !mutable_count_2
             (#"whole_program.jc" 1632 59 72# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 1)) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/memset.c" 14 8 19#
            "expl:Pointer index bounds" true) }); _jessie_600 end)); () end
          end;
           (if
           (#"/home/work/workspace/self/verker/memset.c" 14 8 19#
           (Safe_bit_uint64.(<>)  !tmp_0_7
            (#"whole_program.jc" 1635 50 63# "expl:Integer cast"
            (Safe_bit_uint64.of_int_const 0)) )) then ()
           else (raise (Goto_while_0_break_5_exc ())));
           begin
           (tmp_0_6 :=
            (let _jessie_601 = !xs in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/memset.c" 15 3 7#
            "expl:Pointer index bounds" true) }); _jessie_601 end));
            begin
            (xs :=
             (let _jessie_602 =
             (shift_typesafe  !xs
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 1639 47 59# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memset.c" 15 3 7#
             "expl:Pointer index bounds" true) }); _jessie_602 end));
             (let _jessie_604 =
             (let _jessie_603 =
             (#"/home/work/workspace/self/verker/memset.c" 15 10 23#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_13 )) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memset.c" 15 2 23#
             "expl:Pointer index bounds" true) }); _jessie_603 end) in
             (let _jessie_605 = !tmp_0_6 in
             (let _jessie_606 = (0) in
             (let _jessie_607 = _jessie_605 in
             (#"/home/work/workspace/self/verker/memset.c" 15 2 23#
             "expl:Pointer dereference"
             (upd  voidP_s_2_29_alloc_table charP_charM_s_2_29 _jessie_605
              _jessie_604 )))))) end end end; (raise (Loop_continue_exc ()))
          end with Loop_continue_exc _jessie_34 -> () end end end;
       (raise (Goto_while_0_break_5_exc ())) end end with
     Goto_while_0_break_5_exc _jessie_32 ->
     'While_0_break_5:
     'While_0_break_5:
     begin
     ();
      begin
      any unit
      requires { true } reads { mutable_count_2 }
      ensures {
        (#"/home/work/workspace/self/verker/memset.c" 16 12 35#
        (Bit_uint64.(=) !mutable_count_2 (#"whole_program.jc" 1648 52 70#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
       () end;
      begin
      (return :=
       (let _jessie_609 = s_2_1 in
       begin
       (assert {
       (#"whole_program.jc" 1652 7 17# "expl:Pointer index bounds" true) });
        _jessie_609 end)); (raise Return) end end end)))); absurd  end with
    Return -> !return end))
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memset_behaviors
#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
"expl:memset, behaviors"

  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  let memset_ensures_default
  #"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 112 5 43#
  "expl:Function memset, default behavior" =
  fun
   (s_2_1 : (pointer voidP)) (c_13 : Int32.t) (count_2 : Uint64.t)
   (charP_charM_s_2_29 : ref (memory voidP Int8.t)) (voidP_s_2_29_alloc_table
   : (alloc_table voidP)) (voidP_s_2_29_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_s_2_29_alloc_table s_2_1) ->
     ((instanceof voidP_s_2_29_tag_table s_2_1 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_2_29_alloc_table s_2_1) i) /\
       ((<) i (offset_max voidP_s_2_29_alloc_table s_2_1))) ->
       (instanceof voidP_s_2_29_tag_table (shift s_2_1 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1560 12 757#
   ((#"/home/work/workspace/self/verker/memset.h" 15 13 40#
    (instanceof voidP_s_2_29_tag_table s_2_1 charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memset.h" 16 13 43#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count_2) (1))) then
    (((<=)
     (offset_min voidP_s_2_29_alloc_table
     (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_2_29_alloc_table
     (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
     (Int.(-) (Bit_uint64.to_int count_2) (1)))
    /\
    (forall __framac_tmp16 : int.
     ((((<=) (0) __framac_tmp16) /\
      ((<=) __framac_tmp16 (Int.(-) (Bit_uint64.to_int count_2) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 1573 10 70# "expl:Assigns clause"
      (not_assigns voidP_s_2_29_alloc_table voidP_s_2_29_alloc_table (old
      !charP_charM_s_2_29) !charP_charM_s_2_29
      (pset_range
      (pset_singleton (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)) (0)
      (Int.(-) (Bit_uint64.to_int count_2) (1)))))
     /\
     (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memset.h" 18 12 95#
      "expl:Ensures clause"
      (forall p_2_0 : (pointer voidP).
       (((same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag) p_2_0)
        /\
        (((<=)
         (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
         p_2_0) (0))
        /\
        ((same_block p_2_0
         (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
         (Bit_uint64.to_int count_2)))
        /\
        ((<)
        (sub_pointer p_2_0
        (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
        (Bit_uint64.to_int count_2))) (0))))) ->
        (Bit_int8.(=) (select !charP_charM_s_2_29 p_2_0)
        (#"whole_program.jc" 1586 49 73# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_13))))))
     /\
     (#"/home/work/workspace/self/verker/memset.h" 20 12 24#
     "expl:Ensures clause" ((=) result s_2_1))))))) } diverges  ->
   (let mutable_count_2 = ref count_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let xs = ref (any_pointer  () : (pointer voidP)) in
    (let ocount_0 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_0_6 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_7 = ref (Unsafe_bit_uint64.any_  () ) in
    try
     begin
     (xs := (downcast_  voidP_s_2_29_tag_table s_2_1 (charP_tag  ) ));
      begin
      (ocount_0 := !mutable_count_2);
       'Loop_27:
       loop
       invariant
         { (((#"/home/work/workspace/self/verker/memset.c" 8 20 40#
             (#"/home/work/workspace/self/verker/memset.c" 8 20 40#
             ((#"/home/work/workspace/self/verker/memset.c" 8 20 30#
              (Bit_uint64.(<=) (#"whole_program.jc" 1602 40 53#
              "expl:Integer cast" (Bit_uint64.of_int_const 0))
              !mutable_count_2))
             /\
             (#"/home/work/workspace/self/verker/memset.c" 8 25 40#
             (Bit_uint64.(<=) !mutable_count_2 !ocount_0)))))
            &&
            ((#"/home/work/workspace/self/verker/memset.c" 9 20 57#
             (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker/memset.c" 9 20 35#
              (same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              !xs))
             /\
             (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker/memset.c" 9 20 35#
              ((<=)
              (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              !xs) (0)))
             /\
             (#"/home/work/workspace/self/verker/memset.c" 9 20 57#
             ((#"/home/work/workspace/self/verker/memset.c" 9 33 57#
              (same_block !xs
              (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              (Bit_uint64.to_int !ocount_0))))
             /\
             (#"/home/work/workspace/self/verker/memset.c" 9 33 57#
             ((<=)
             (sub_pointer !xs
             (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
             (Bit_uint64.to_int !ocount_0))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/memset.c" 10 20 44#
             ((=)
             (sub_pointer !xs
             (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
             (Int.(-) (Bit_uint64.to_int !ocount_0)
             (Bit_uint64.to_int !mutable_count_2))))
            &&
            (#"/home/work/workspace/self/verker/memset.c" 11 20 76#
            (forall p_5 : (pointer voidP).
             (((same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
               p_5)
              /\
              (((<=)
               (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
               p_5) (0))
              /\ ((same_block p_5 !xs) /\ ((<) (sub_pointer p_5 !xs) (0)))))
              ->
              (Bit_int8.(=) (select !charP_charM_s_2_29 p_5)
              (#"whole_program.jc" 1625 44 59# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_13)))))))))
           /\
           (#"whole_program.jc" 1573 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_29_alloc_table voidP_s_2_29_alloc_table (at
           !charP_charM_s_2_29 'Init) !charP_charM_s_2_29
           (pset_range
           (pset_singleton (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
           (0) (Int.(-) (Bit_uint64.to_int (at !mutable_count_2 'Init)) (1)))))) }
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_7 := !mutable_count_2);
           begin
           (mutable_count_2 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_2
             (#"whole_program.jc" 1632 59 72# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker/memset.c" 14 8 19#
           (Unsafe_bit_uint64.(<>)  !tmp_0_7
            (#"whole_program.jc" 1635 50 63# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) )) then ()
           else (raise (Goto_while_0_break_5_exc ())));
           begin
           (tmp_0_6 := !xs);
            begin
            (xs :=
             (shift_  !xs
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 1639 47 59# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (let _jessie_592 =
             (#"/home/work/workspace/self/verker/memset.c" 15 10 23#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_13 )) in
             (let _jessie_593 = !tmp_0_6 in
             (let _jessie_594 = (0) in
             (let _jessie_595 = _jessie_593 in
             (upd  charP_charM_s_2_29 _jessie_595 _jessie_592 ))))) end end
          end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_34 -> () end end end; (raise (Goto_while_0_break_5_exc ()))
      end end with Goto_while_0_break_5_exc _jessie_32 ->
     'While_0_break_5:
     'While_0_break_5:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker/memset.c" 16 12 35#
      "expl:Assertion in line 16"
      (Bit_uint64.(=) !mutable_count_2 (#"whole_program.jc" 1648 52 70#
      "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
      end; begin (return := s_2_1); (raise Return) end end end)))); absurd 
    end with Return -> !return end))
  
end

theory Root_unsigned_intP

  use why3.Bool.Bool 
  
  type unsigned_intP 
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

theory Axiomatic_Ctype

  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function tolower int : int
  
  
  axiom A_0 #"/home/work/workspace/self/verker/ctype.h" 59 13 32#
  "expl:Axiom a" :
  (#"/home/work/workspace/self/verker/ctype.h" 59 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 97 20 32# "expl:Integer cast"
  (Int8.of_int (65)))))
  (Int8.to_int (#"whole_program.jc" 97 50 62# "expl:Integer cast"
  (Int8.of_int (97))))))
  
  axiom B #"/home/work/workspace/self/verker/ctype.h" 59 43 62#
  "expl:Axiom b" :
  (#"/home/work/workspace/self/verker/ctype.h" 59 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 100 20 32# "expl:Integer cast"
  (Int8.of_int (66)))))
  (Int8.to_int (#"whole_program.jc" 100 50 62# "expl:Integer cast"
  (Int8.of_int (98))))))
  
  axiom C_36 #"/home/work/workspace/self/verker/ctype.h" 59 73 92#
  "expl:Axiom c" :
  (#"/home/work/workspace/self/verker/ctype.h" 59 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 103 20 32# "expl:Integer cast"
  (Int8.of_int (67)))))
  (Int8.to_int (#"whole_program.jc" 103 50 62# "expl:Integer cast"
  (Int8.of_int (99))))))
  
  axiom D #"/home/work/workspace/self/verker/ctype.h" 60 13 32#
  "expl:Axiom d" :
  (#"/home/work/workspace/self/verker/ctype.h" 60 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 106 20 32# "expl:Integer cast"
  (Int8.of_int (68)))))
  (Int8.to_int (#"whole_program.jc" 106 50 63# "expl:Integer cast"
  (Int8.of_int (100))))))
  
  axiom E #"/home/work/workspace/self/verker/ctype.h" 60 43 62#
  "expl:Axiom e" :
  (#"/home/work/workspace/self/verker/ctype.h" 60 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 109 20 32# "expl:Integer cast"
  (Int8.of_int (69)))))
  (Int8.to_int (#"whole_program.jc" 109 50 63# "expl:Integer cast"
  (Int8.of_int (101))))))
  
  axiom F #"/home/work/workspace/self/verker/ctype.h" 60 73 92#
  "expl:Axiom f" :
  (#"/home/work/workspace/self/verker/ctype.h" 60 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 112 20 32# "expl:Integer cast"
  (Int8.of_int (70)))))
  (Int8.to_int (#"whole_program.jc" 112 50 63# "expl:Integer cast"
  (Int8.of_int (102))))))
  
  axiom G #"/home/work/workspace/self/verker/ctype.h" 61 13 32#
  "expl:Axiom g" :
  (#"/home/work/workspace/self/verker/ctype.h" 61 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 115 20 32# "expl:Integer cast"
  (Int8.of_int (71)))))
  (Int8.to_int (#"whole_program.jc" 115 50 63# "expl:Integer cast"
  (Int8.of_int (103))))))
  
  axiom H #"/home/work/workspace/self/verker/ctype.h" 61 43 62#
  "expl:Axiom h" :
  (#"/home/work/workspace/self/verker/ctype.h" 61 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 118 20 32# "expl:Integer cast"
  (Int8.of_int (72)))))
  (Int8.to_int (#"whole_program.jc" 118 50 63# "expl:Integer cast"
  (Int8.of_int (104))))))
  
  axiom I_46 #"/home/work/workspace/self/verker/ctype.h" 61 73 92#
  "expl:Axiom i" :
  (#"/home/work/workspace/self/verker/ctype.h" 61 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 121 20 32# "expl:Integer cast"
  (Int8.of_int (73)))))
  (Int8.to_int (#"whole_program.jc" 121 50 63# "expl:Integer cast"
  (Int8.of_int (105))))))
  
  axiom J_8 #"/home/work/workspace/self/verker/ctype.h" 62 13 32#
  "expl:Axiom j" :
  (#"/home/work/workspace/self/verker/ctype.h" 62 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 124 21 33# "expl:Integer cast"
  (Int8.of_int (74)))))
  (Int8.to_int (#"whole_program.jc" 124 51 64# "expl:Integer cast"
  (Int8.of_int (106))))))
  
  axiom K_0 #"/home/work/workspace/self/verker/ctype.h" 62 43 62#
  "expl:Axiom k" :
  (#"/home/work/workspace/self/verker/ctype.h" 62 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 127 21 33# "expl:Integer cast"
  (Int8.of_int (75)))))
  (Int8.to_int (#"whole_program.jc" 127 51 64# "expl:Integer cast"
  (Int8.of_int (107))))))
  
  axiom L #"/home/work/workspace/self/verker/ctype.h" 62 73 92#
  "expl:Axiom l" :
  (#"/home/work/workspace/self/verker/ctype.h" 62 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 130 21 33# "expl:Integer cast"
  (Int8.of_int (76)))))
  (Int8.to_int (#"whole_program.jc" 130 51 64# "expl:Integer cast"
  (Int8.of_int (108))))))
  
  axiom M #"/home/work/workspace/self/verker/ctype.h" 63 13 32#
  "expl:Axiom m" :
  (#"/home/work/workspace/self/verker/ctype.h" 63 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 133 21 33# "expl:Integer cast"
  (Int8.of_int (77)))))
  (Int8.to_int (#"whole_program.jc" 133 51 64# "expl:Integer cast"
  (Int8.of_int (109))))))
  
  axiom N_9 #"/home/work/workspace/self/verker/ctype.h" 63 43 62#
  "expl:Axiom n" :
  (#"/home/work/workspace/self/verker/ctype.h" 63 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 136 21 33# "expl:Integer cast"
  (Int8.of_int (78)))))
  (Int8.to_int (#"whole_program.jc" 136 51 64# "expl:Integer cast"
  (Int8.of_int (110))))))
  
  axiom O #"/home/work/workspace/self/verker/ctype.h" 63 73 92#
  "expl:Axiom o" :
  (#"/home/work/workspace/self/verker/ctype.h" 63 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 139 21 33# "expl:Integer cast"
  (Int8.of_int (79)))))
  (Int8.to_int (#"whole_program.jc" 139 51 64# "expl:Integer cast"
  (Int8.of_int (111))))))
  
  axiom P_26 #"/home/work/workspace/self/verker/ctype.h" 64 13 32#
  "expl:Axiom p" :
  (#"/home/work/workspace/self/verker/ctype.h" 64 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 142 21 33# "expl:Integer cast"
  (Int8.of_int (80)))))
  (Int8.to_int (#"whole_program.jc" 142 51 64# "expl:Integer cast"
  (Int8.of_int (112))))))
  
  axiom Q #"/home/work/workspace/self/verker/ctype.h" 64 43 62#
  "expl:Axiom q" :
  (#"/home/work/workspace/self/verker/ctype.h" 64 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 145 21 33# "expl:Integer cast"
  (Int8.of_int (81)))))
  (Int8.to_int (#"whole_program.jc" 145 51 64# "expl:Integer cast"
  (Int8.of_int (113))))))
  
  axiom R_0 #"/home/work/workspace/self/verker/ctype.h" 64 73 92#
  "expl:Axiom r" :
  (#"/home/work/workspace/self/verker/ctype.h" 64 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 148 21 33# "expl:Integer cast"
  (Int8.of_int (82)))))
  (Int8.to_int (#"whole_program.jc" 148 51 64# "expl:Integer cast"
  (Int8.of_int (114))))))
  
  axiom S_51 #"/home/work/workspace/self/verker/ctype.h" 65 13 32#
  "expl:Axiom s" :
  (#"/home/work/workspace/self/verker/ctype.h" 65 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 151 21 33# "expl:Integer cast"
  (Int8.of_int (83)))))
  (Int8.to_int (#"whole_program.jc" 151 51 64# "expl:Integer cast"
  (Int8.of_int (115))))))
  
  axiom T_14 #"/home/work/workspace/self/verker/ctype.h" 65 43 62#
  "expl:Axiom t" :
  (#"/home/work/workspace/self/verker/ctype.h" 65 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 154 21 33# "expl:Integer cast"
  (Int8.of_int (84)))))
  (Int8.to_int (#"whole_program.jc" 154 51 64# "expl:Integer cast"
  (Int8.of_int (116))))))
  
  axiom U #"/home/work/workspace/self/verker/ctype.h" 65 73 92#
  "expl:Axiom u" :
  (#"/home/work/workspace/self/verker/ctype.h" 65 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 157 21 33# "expl:Integer cast"
  (Int8.of_int (85)))))
  (Int8.to_int (#"whole_program.jc" 157 51 64# "expl:Integer cast"
  (Int8.of_int (117))))))
  
  axiom V_0 #"/home/work/workspace/self/verker/ctype.h" 66 13 32#
  "expl:Axiom v" :
  (#"/home/work/workspace/self/verker/ctype.h" 66 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 160 21 33# "expl:Integer cast"
  (Int8.of_int (86)))))
  (Int8.to_int (#"whole_program.jc" 160 51 64# "expl:Integer cast"
  (Int8.of_int (118))))))
  
  axiom W #"/home/work/workspace/self/verker/ctype.h" 66 43 62#
  "expl:Axiom w" :
  (#"/home/work/workspace/self/verker/ctype.h" 66 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 163 21 33# "expl:Integer cast"
  (Int8.of_int (87)))))
  (Int8.to_int (#"whole_program.jc" 163 51 64# "expl:Integer cast"
  (Int8.of_int (119))))))
  
  axiom X #"/home/work/workspace/self/verker/ctype.h" 66 73 92#
  "expl:Axiom x" :
  (#"/home/work/workspace/self/verker/ctype.h" 66 73 92#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 166 21 33# "expl:Integer cast"
  (Int8.of_int (88)))))
  (Int8.to_int (#"whole_program.jc" 166 51 64# "expl:Integer cast"
  (Int8.of_int (120))))))
  
  axiom Y #"/home/work/workspace/self/verker/ctype.h" 67 13 32#
  "expl:Axiom y" :
  (#"/home/work/workspace/self/verker/ctype.h" 67 13 32#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 169 21 33# "expl:Integer cast"
  (Int8.of_int (89)))))
  (Int8.to_int (#"whole_program.jc" 169 51 64# "expl:Integer cast"
  (Int8.of_int (121))))))
  
  axiom Z #"/home/work/workspace/self/verker/ctype.h" 67 43 62#
  "expl:Axiom z" :
  (#"/home/work/workspace/self/verker/ctype.h" 67 43 62#
  ((=)
  (tolower
  (Int8.to_int (#"whole_program.jc" 172 21 33# "expl:Integer cast"
  (Int8.of_int (90)))))
  (Int8.to_int (#"whole_program.jc" 172 51 64# "expl:Integer cast"
  (Int8.of_int (122))))))
  
  predicate isupper (c_0 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 63 5 17# "expl:Integer cast"
      (Int8.of_int (65)))) c_0)
     /\
     ((<=) c_0
     (Int8.to_int (#"whole_program.jc" 63 50 62# "expl:Integer cast"
     (Int8.of_int (90))))))
  
  
  axiom Pl #"/home/work/workspace/self/verker/ctype.h" 69 14 64#
  "expl:Axiom pl" :
  (#"/home/work/workspace/self/verker/ctype.h" 69 14 64#
  (forall c_9_0 : int.
   ((not (isupper c_9_0)) -> ((=) (tolower c_9_0) c_9_0))))
  
  predicate islower (c : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 60 5 17# "expl:Integer cast"
      (Int8.of_int (97)))) c)
     /\
     ((<=) c
     (Int8.to_int (#"whole_program.jc" 60 46 59# "expl:Integer cast"
     (Int8.of_int (122))))))
  
  
  function toupper int : int
  
  
  axiom Pu #"/home/work/workspace/self/verker/ctype.h" 70 14 64#
  "expl:Axiom pu" :
  (#"/home/work/workspace/self/verker/ctype.h" 70 14 64#
  (forall c_10_0 : int.
   ((not (islower c_10_0)) -> ((=) (toupper c_10_0) c_10_0))))
  
  axiom Tl #"/home/work/workspace/self/verker/ctype.h" 71 14 73#
  "expl:Axiom tl" :
  (#"/home/work/workspace/self/verker/ctype.h" 71 14 73#
  (forall c_11_1 : int.
   ((not (islower c_11_1)) -> ((=) (toupper (tolower c_11_1)) c_11_1))))
  
  axiom Tu #"/home/work/workspace/self/verker/ctype.h" 72 14 73#
  "expl:Axiom tu" :
  (#"/home/work/workspace/self/verker/ctype.h" 72 14 73#
  (forall c_12_0 : int.
   ((not (isupper c_12_0)) -> ((=) (tolower (toupper c_12_0)) c_12_0))))
  
  predicate isodigit (c_3 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 72 5 17# "expl:Integer cast"
      (Int8.of_int (48)))) c_3)
     /\
     ((<=) c_3
     (Int8.to_int (#"whole_program.jc" 72 50 62# "expl:Integer cast"
     (Int8.of_int (55))))))
  
  
  predicate isspace (c_5 : int)
  =
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 78 16 28# "expl:Integer cast"
      (Int8.of_int (32)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 79 17 29# "expl:Integer cast"
      (Int8.of_int (12)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 80 16 28# "expl:Integer cast"
      (Int8.of_int (10)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 81 15 27# "expl:Integer cast"
      (Int8.of_int (13)))))
     \/
     (((=) c_5
      (Int8.to_int (#"whole_program.jc" 82 14 25# "expl:Integer cast"
      (Int8.of_int (9)))))
     \/
     ((=) c_5
     (Int8.to_int (#"whole_program.jc" 83 13 25# "expl:Integer cast"
     (Int8.of_int (11))))))))))
  
  
  predicate isdigit (c_2 : int)
  =
     (((<=)
      (Int8.to_int (#"whole_program.jc" 69 5 17# "expl:Integer cast"
      (Int8.of_int (48)))) c_2)
     /\
     ((<=) c_2
     (Int8.to_int (#"whole_program.jc" 69 50 62# "expl:Integer cast"
     (Int8.of_int (57))))))
  
  
  predicate isxdigit (c_6 : int)
  =
     ((isdigit c_6) \/
     ((((<=)
       (Int8.to_int (#"whole_program.jc" 87 8 20# "expl:Integer cast"
       (Int8.of_int (97)))) c_6)
      /\
      ((<=) c_6
      (Int8.to_int (#"whole_program.jc" 88 16 29# "expl:Integer cast"
      (Int8.of_int (102))))))
     \/
     (((<=)
      (Int8.to_int (#"whole_program.jc" 89 7 19# "expl:Integer cast"
      (Int8.of_int (65)))) c_6)
     /\
     ((<=) c_6
     (Int8.to_int (#"whole_program.jc" 90 15 27# "expl:Integer cast"
     (Int8.of_int (70))))))))
  
  
  predicate isalpha (c_1 : int) = ((isupper c_1) \/ (islower c_1))
  
  
  predicate isalnum (c_4 : int) = ((isdigit c_4) \/ (isalpha c_4))
  
  
end

module Function__tolower_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _tolower
  (c_1_0 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 122 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_1_0)))) }
  
end

module Function_isxdigit_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isxdigit_0
  (c_10 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 91 12 36#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isxdigit (Int8.to_int c_10)))) }
  
end

module Function__parse_integer_fixup_radix_safety
#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
"expl:_parse_integer_fixup_radix, safety"

  use enum.Uint32 
  
  use Safe_uint32 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import core.Jessie_acc_offset_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isxdigit_0_safe 
  
  use Function__tolower_safe 
  
  use why3.Bool.Bool 
  
  let _parse_integer_fixup_radix
  #"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, safety" =
  fun
   (s_2 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP Uint32.t))
   (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP))
   (voidP_s_5_alloc_table : (alloc_table voidP)) (voidP_s_5_tag_table :
   (tag_table voidP)) (charP_charM_s_5 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((<=) (offset_min voidP_s_5_alloc_table s_2) (0)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((>=) (offset_max voidP_s_5_alloc_table s_2) (2)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((<=) (offset_min unsigned_intP_base_6_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((>=) (offset_max unsigned_intP_base_6_alloc_table base) (0)))
   /\ (#"whole_program.jc" 298 12 409# ((=) true true)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_2 = ref s_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp = ref (Safe_int8.any_  () ) in
    (let tmp_0 = ref (Safe_enum__bool.any_  () ) in
    (let tmp_1 = ref (Safe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 5 5 15#
    (Safe_uint32.(=) 
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 5 5 10#
     "expl:Pointer dereference"
     (acc  unsigned_intP_base_6_alloc_table
      !unsigned_intP_unsigned_intM_base_6 base ))
     (#"whole_program.jc" 336 52 65# "expl:Integer cast"
     (Safe_uint32.of_int (0))) ))
    then
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 17#
     (Safe_int32.(=) 
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Safe_int32_of_Safe_int8.cast 
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 10#
       "expl:Pointer dereference"
       (acc  voidP_s_5_alloc_table charP_charM_s_5 !mutable_s_2 )) ))
      (#"whole_program.jc" 338 21 34# "expl:Integer cast"
      (Safe_int32.of_int (48))) ))
     then
      begin
      (tmp :=
       (let _jessie_185 =
       (let _jessie_186 =
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 16 20#
       "expl:Pointer dereference"
       (acc_offset_typesafe  voidP_s_5_alloc_table charP_charM_s_5
        !mutable_s_2 (1) )) in
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower_safe._tolower  _jessie_186 ))) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Pointer index bounds" true) }); _jessie_185 end));
       (if
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 28#
       (Safe_int32.(=) 
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp ))
        (#"whole_program.jc" 341 51 65# "expl:Integer cast"
        (Safe_int32.of_int (120))) ))
       then
        begin
        (tmp_0 :=
         (let _jessie_192 =
         (let _jessie_193 =
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 41 45#
         "expl:Pointer dereference"
         (acc_offset_typesafe  voidP_s_5_alloc_table charP_charM_s_5
          !mutable_s_2 (2) )) in
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0_safe.isxdigit_0  _jessie_193 ))) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Pointer index bounds" true) }); _jessie_192 end));
         (if
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         (Safe_enum__bool.(<>)  !tmp_0
          (#"whole_program.jc" 344 46 58# "expl:Integer cast"
          (Safe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_200 =
          (let _jessie_199 =
          (#"whole_program.jc" 345 97 111# "expl:Integer cast"
          (Safe_uint32.of_int (16))) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 8 4 14#
          "expl:Pointer index bounds" true) }); _jessie_199 end) in
          (let _jessie_201 = base in
          (let _jessie_202 = (0) in
          (let _jessie_203 = _jessie_201 in
          (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 8 4 14#
          "expl:Pointer dereference"
          (upd  unsigned_intP_base_6_alloc_table
           unsigned_intP_unsigned_intM_base_6 _jessie_201 _jessie_200 ))))))
         else
          (let _jessie_195 =
          (let _jessie_194 =
          (#"whole_program.jc" 346 53 66# "expl:Integer cast"
          (Safe_uint32.of_int (8))) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 10 4 13#
          "expl:Pointer index bounds" true) }); _jessie_194 end) in
          (let _jessie_196 = base in
          (let _jessie_197 = (0) in
          (let _jessie_198 = _jessie_196 in
          (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 10 4 13#
          "expl:Pointer dereference"
          (upd  unsigned_intP_base_6_alloc_table
           unsigned_intP_unsigned_intM_base_6 _jessie_196 _jessie_195 )))))))
        end
       else
        (let _jessie_188 =
        (let _jessie_187 =
        (#"whole_program.jc" 347 57 70# "expl:Integer cast"
        (Safe_uint32.of_int (8))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 10 4 13#
        "expl:Pointer index bounds" true) }); _jessie_187 end) in
        (let _jessie_189 = base in
        (let _jessie_190 = (0) in
        (let _jessie_191 = _jessie_189 in
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 10 4 13#
        "expl:Pointer dereference"
        (upd  unsigned_intP_base_6_alloc_table
         unsigned_intP_unsigned_intM_base_6 _jessie_189 _jessie_188 )))))))
      end
     else
      (let _jessie_181 =
      (let _jessie_180 =
      (#"whole_program.jc" 348 54 68# "expl:Integer cast"
      (Safe_uint32.of_int (10))) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 12 3 13#
      "expl:Pointer index bounds" true) }); _jessie_180 end) in
      (let _jessie_182 = base in
      (let _jessie_183 = (0) in
      (let _jessie_184 = _jessie_182 in
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 12 3 13#
      "expl:Pointer dereference"
      (upd  unsigned_intP_base_6_alloc_table
       unsigned_intP_unsigned_intM_base_6 _jessie_182 _jessie_181 )))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 5 16#
     (Safe_uint32.(=) 
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 5 10#
      "expl:Pointer dereference"
      (acc  unsigned_intP_base_6_alloc_table
       !unsigned_intP_unsigned_intM_base_6 base ))
      (#"whole_program.jc" 349 52 66# "expl:Integer cast"
      (Safe_uint32.of_int (16))) ))
     then
      (if
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 31#
      (Safe_int32.(=) 
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Safe_int32_of_Safe_int8.cast 
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 24#
        "expl:Pointer dereference"
        (acc  voidP_s_5_alloc_table charP_charM_s_5 !mutable_s_2 )) ))
       (#"whole_program.jc" 351 21 34# "expl:Integer cast"
       (Safe_int32.of_int (48))) ))
      then
       begin
       (tmp_1 :=
        (let _jessie_204 =
        (let _jessie_205 =
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 44 48#
        "expl:Pointer dereference"
        (acc_offset_typesafe  voidP_s_5_alloc_table charP_charM_s_5
         !mutable_s_2 (1) )) in
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower_safe._tolower  _jessie_205 ))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Pointer index bounds" true) }); _jessie_204 end));
        (if
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 56#
        (Safe_int32.(=) 
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_1 ))
         (#"whole_program.jc" 354 53 67# "expl:Integer cast"
         (Safe_int32.of_int (120))) ))
        then
         (mutable_s_2 :=
          (let _jessie_206 =
          (shift_typesafe  !mutable_s_2
           (Safe_int32.to_int 
            (#"whole_program.jc" 355 37 49# "expl:Integer cast"
            (Safe_int32.of_int (2))) ) ) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 15 2 8#
          "expl:Pointer index bounds" true) }); _jessie_206 end)) else ())
       end else ()) else ());
     begin
     (return :=
      (let _jessie_207 = !mutable_s_2 in
      begin
      (assert {
      (#"whole_program.jc" 358 7 15# "expl:Pointer index bounds" true) });
       _jessie_207 end)); (raise Return) end end))); absurd  end with Return
    -> !return end))
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Function__tolower

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _tolower
  (c_1_0 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 122 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_1_0)))) }
  
end

module Function_isxdigit_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isxdigit_0
  (c_10 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 91 12 36#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isxdigit (Int8.to_int c_10)))) }
  
end

theory Axiomatic_IntBase

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  predicate is_hex (s : (pointer voidP)) (charP_charM_s_2_at_L : (memory
  voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_2_at_L (shift s (0)))
      (#"whole_program.jc" 285 26 38# "expl:Integer cast" (Int8.of_int
      (48))))
     /\
     (((=)
      (tolower (Int8.to_int (select charP_charM_s_2_at_L (shift s (1)))))
      (Int8.to_int (#"whole_program.jc" 286 50 63# "expl:Integer cast"
      (Int8.of_int (120)))))
     /\ (isxdigit (Int8.to_int (select charP_charM_s_2_at_L (shift s (2)))))))
  
  
  predicate is_oct (s_0 : (pointer voidP)) (charP_charM_s_0_3_at_L : (memory
  voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_0_3_at_L (shift s_0 (0)))
      (#"whole_program.jc" 290 27 39# "expl:Integer cast" (Int8.of_int
      (48))))
     /\ (not (is_hex s_0 charP_charM_s_0_3_at_L)))
  
  
  predicate is_dec (s_1 : (pointer voidP)) (charP_charM_s_1_4_at_L : (memory
  voidP Int8.t))
  =
     ((not (is_hex s_1 charP_charM_s_1_4_at_L)) /\
     (not (is_oct s_1 charP_charM_s_1_4_at_L)))
  
  
end

module Function__parse_integer_fixup_radix_behaviors
#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
"expl:_parse_integer_fixup_radix, behaviors"

  use Unsafe_uint32 
  
  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isxdigit_0 
  
  use Function__tolower 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let _parse_integer_fixup_radix_ensures_default
  #"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, default behavior" =
  fun
   (s_2 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP Uint32.t))
   (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP))
   (voidP_s_5_alloc_table : (alloc_table voidP)) (voidP_s_5_tag_table :
   (tag_table voidP)) (charP_charM_s_5 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((<=) (offset_min voidP_s_5_alloc_table s_2) (0)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((>=) (offset_max voidP_s_5_alloc_table s_2) (2)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((<=) (offset_min unsigned_intP_base_6_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((>=) (offset_max unsigned_intP_base_6_alloc_table base) (0)))
   /\ (#"whole_program.jc" 298 12 409# ((=) true true)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 305 10 28# "expl:Assigns clause"
      (not_assigns unsigned_intP_base_6_alloc_table
      unsigned_intP_base_6_alloc_table (old
      !unsigned_intP_unsigned_intM_base_6)
      !unsigned_intP_unsigned_intM_base_6 (pset_singleton base)))
     /\
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 16 12 44#
     "expl:Ensures clause"
     (((=) result s_2) \/ ((=) result (shift s_2 (2))))))) }  ->
   (let mutable_s_2 = ref s_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp = ref (Unsafe_int8.any_  () ) in
    (let tmp_0 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
     (#"whole_program.jc" 336 52 65# "expl:Integer cast"
     (Unsafe_uint32.of_int (0))) ))
    then
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 337 53 65# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 338 21 34# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp :=
       (let _jessie_102 =
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 340 63 75# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_102 ))));
       (if
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp ))
        (#"whole_program.jc" 341 51 65# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0 :=
         (let _jessie_109 =
         (acc  charP_charM_s_5
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 343 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_109 ))));
         (if
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0
          (#"whole_program.jc" 344 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_116 =
          (#"whole_program.jc" 345 97 111# "expl:Integer cast"
          (Unsafe_uint32.of_int (16))) in
          (let _jessie_117 = base in
          (let _jessie_118 = (0) in
          (let _jessie_119 = _jessie_117 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_119 _jessie_116 )))))
         else
          (let _jessie_111 =
          (#"whole_program.jc" 346 53 66# "expl:Integer cast"
          (Unsafe_uint32.of_int (8))) in
          (let _jessie_112 = base in
          (let _jessie_113 = (0) in
          (let _jessie_114 = _jessie_112 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_114 _jessie_111 ))))))
        end
       else
        (let _jessie_104 =
        (#"whole_program.jc" 347 57 70# "expl:Integer cast"
        (Unsafe_uint32.of_int (8))) in
        (let _jessie_105 = base in
        (let _jessie_106 = (0) in
        (let _jessie_107 = _jessie_105 in
        (upd  unsigned_intP_unsigned_intM_base_6 _jessie_107 _jessie_104 ))))))
      end
     else
      (let _jessie_97 =
      (#"whole_program.jc" 348 54 68# "expl:Integer cast"
      (Unsafe_uint32.of_int (10))) in
      (let _jessie_98 = base in
      (let _jessie_99 = (0) in
      (let _jessie_100 = _jessie_98 in
      (upd  unsigned_intP_unsigned_intM_base_6 _jessie_100 _jessie_97 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
      (#"whole_program.jc" 349 52 66# "expl:Integer cast"
      (Unsafe_uint32.of_int (16))) ))
     then
      (if
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 350 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 351 21 34# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1 :=
        (let _jessie_121 =
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 353 65 77# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_121 ))));
        (if
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1 ))
         (#"whole_program.jc" 354 53 67# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_2 :=
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 355 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_2); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
  let _parse_integer_fixup_radix_ensures_guess
  #"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, behavior guess" =
  fun
   (s_2 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP Uint32.t))
   (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP))
   (voidP_s_5_alloc_table : (alloc_table voidP)) (voidP_s_5_tag_table :
   (tag_table voidP)) (charP_charM_s_5 : (memory voidP Int8.t)) 
   requires {
   ((Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
    (#"whole_program.jc" 308 33 46# "expl:Integer cast" (Uint32.of_int (0))))
   /\
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((<=) (offset_min voidP_s_5_alloc_table s_2) (0)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((>=) (offset_max voidP_s_5_alloc_table s_2) (2)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((<=) (offset_min unsigned_intP_base_6_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((>=) (offset_max unsigned_intP_base_6_alloc_table base) (0)))
   /\ (#"whole_program.jc" 298 12 409# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
      "expl:Ensures clause"
      ((is_hex s_2 charP_charM_s_5) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
       (#"whole_program.jc" 311 33 47# "expl:Integer cast" (Uint32.of_int
       (16))))))
     /\
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 20 15 39#
      "expl:Ensures clause"
      ((is_oct s_2 charP_charM_s_5) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
       (#"whole_program.jc" 314 35 48# "expl:Integer cast" (Uint32.of_int
       (8))))))
     /\
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 21 15 40#
      "expl:Ensures clause"
      ((is_dec s_2 charP_charM_s_5) ->
       (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
       (#"whole_program.jc" 317 37 51# "expl:Integer cast" (Uint32.of_int
       (10))))))
     /\
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 22 15 45#
      "expl:Ensures clause"
      ((is_hex s_2 charP_charM_s_5) -> ((=) result (shift s_2 (2)))))
     /\
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 23 15 54#
     "expl:Ensures clause"
     (((is_oct s_2 charP_charM_s_5) \/ (is_dec s_2 charP_charM_s_5)) ->
      ((=) result s_2))))))))))))) }  ->
   (let mutable_s_2 = ref s_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp = ref (Unsafe_int8.any_  () ) in
    (let tmp_0 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
     (#"whole_program.jc" 336 52 65# "expl:Integer cast"
     (Unsafe_uint32.of_int (0))) ))
    then
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 337 53 65# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 338 21 34# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp :=
       (let _jessie_130 =
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 340 63 75# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_130 ))));
       (if
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp ))
        (#"whole_program.jc" 341 51 65# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0 :=
         (let _jessie_137 =
         (acc  charP_charM_s_5
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 343 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_137 ))));
         (if
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0
          (#"whole_program.jc" 344 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_144 =
          (#"whole_program.jc" 345 97 111# "expl:Integer cast"
          (Unsafe_uint32.of_int (16))) in
          (let _jessie_145 = base in
          (let _jessie_146 = (0) in
          (let _jessie_147 = _jessie_145 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_147 _jessie_144 )))))
         else
          (let _jessie_139 =
          (#"whole_program.jc" 346 53 66# "expl:Integer cast"
          (Unsafe_uint32.of_int (8))) in
          (let _jessie_140 = base in
          (let _jessie_141 = (0) in
          (let _jessie_142 = _jessie_140 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_142 _jessie_139 ))))))
        end
       else
        (let _jessie_132 =
        (#"whole_program.jc" 347 57 70# "expl:Integer cast"
        (Unsafe_uint32.of_int (8))) in
        (let _jessie_133 = base in
        (let _jessie_134 = (0) in
        (let _jessie_135 = _jessie_133 in
        (upd  unsigned_intP_unsigned_intM_base_6 _jessie_135 _jessie_132 ))))))
      end
     else
      (let _jessie_125 =
      (#"whole_program.jc" 348 54 68# "expl:Integer cast"
      (Unsafe_uint32.of_int (10))) in
      (let _jessie_126 = base in
      (let _jessie_127 = (0) in
      (let _jessie_128 = _jessie_126 in
      (upd  unsigned_intP_unsigned_intM_base_6 _jessie_128 _jessie_125 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
      (#"whole_program.jc" 349 52 66# "expl:Integer cast"
      (Unsafe_uint32.of_int (16))) ))
     then
      (if
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 350 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 351 21 34# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1 :=
        (let _jessie_149 =
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 353 65 77# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_149 ))));
        (if
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1 ))
         (#"whole_program.jc" 354 53 67# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_2 :=
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 355 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_2); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
  let _parse_integer_fixup_radix_ensures_shift
  #"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 3 11 73#
  "expl:Function _parse_integer_fixup_radix, behavior shift" =
  fun
   (s_2 : (pointer voidP)) (base : (pointer unsigned_intP))
   (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP Uint32.t))
   (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP))
   (voidP_s_5_alloc_table : (alloc_table voidP)) (voidP_s_5_tag_table :
   (tag_table voidP)) (charP_charM_s_5 : (memory voidP Int8.t)) 
   requires {
   (((Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
     (#"whole_program.jc" 324 35 49# "expl:Integer cast" (Uint32.of_int
     (16))))
    /\
    ((Int8.(=) (select charP_charM_s_5 (shift s_2 (0)))
     (#"whole_program.jc" 325 31 43# "expl:Integer cast" (Int8.of_int (48))))
    /\
    ((=) (tolower (Int8.to_int (select charP_charM_s_5 (shift s_2 (1)))))
    (Int8.to_int (#"whole_program.jc" 327 15 28# "expl:Integer cast"
    (Int8.of_int (120)))))))
   /\
   (((allocated voidP_s_5_alloc_table s_2) ->
     (((=) (typeof voidP_s_5_tag_table s_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_alloc_table s_2) i) /\
       ((<) i (offset_max voidP_s_5_alloc_table s_2))) ->
       ((=) (typeof voidP_s_5_tag_table (shift s_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 13 13 29#
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((<=) (offset_min voidP_s_5_alloc_table s_2) (0)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409#
     ((>=) (offset_max voidP_s_5_alloc_table s_2) (2)))
    /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409#
    ((#"whole_program.jc" 298 12 409# ((=) true true)) /\
    (#"whole_program.jc" 298 12 409# ((=) true true)))))))))))
   /\
   (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 14 13 25#
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((<=) (offset_min unsigned_intP_base_6_alloc_table base) (0)))
   /\
   (#"whole_program.jc" 298 12 409#
   ((#"whole_program.jc" 298 12 409#
    ((>=) (offset_max unsigned_intP_base_6_alloc_table base) (0)))
   /\ (#"whole_program.jc" 298 12 409# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 26 15 37#
     "expl:Ensures clause" ((=) result (shift s_2 (2))))) }  ->
   (let mutable_s_2 = ref s_2 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp = ref (Unsafe_int8.any_  () ) in
    (let tmp_0 = ref (Unsafe_enum__bool.any_  () ) in
    (let tmp_1 = ref (Unsafe_int8.any_  () ) in
    begin
    (if
    (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 5 5 15#
    (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
     (#"whole_program.jc" 336 52 65# "expl:Integer cast"
     (Unsafe_uint32.of_int (0))) ))
    then
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 17#
     (Unsafe_int32.(=) 
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 6 6 10#
      "expl:Integer cast"
      (Unsafe_int32_of_Unsafe_int8.cast 
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 337 53 65# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) ) ) ) ))
      (#"whole_program.jc" 338 21 34# "expl:Integer cast"
      (Unsafe_int32.of_int (48))) ))
     then
      begin
      (tmp :=
       (let _jessie_158 =
       (acc  charP_charM_s_5
        (shift_  !mutable_s_2
         (Unsafe_int32.to_int 
          (#"whole_program.jc" 340 63 75# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) ) in
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
       "expl:Precondition for _tolower"
       (Function__tolower._tolower  _jessie_158 ))));
       (if
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 28#
       (Unsafe_int32.(=) 
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 7 21#
        "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp ))
        (#"whole_program.jc" 341 51 65# "expl:Integer cast"
        (Unsafe_int32.of_int (120))) ))
       then
        begin
        (tmp_0 :=
         (let _jessie_165 =
         (acc  charP_charM_s_5
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 343 68 80# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) ) ) in
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         "expl:Precondition for isxdigit"
         (Function_isxdigit_0.isxdigit_0  _jessie_165 ))));
         (if
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 7 32 46#
         (Unsafe_enum__bool.(<>)  !tmp_0
          (#"whole_program.jc" 344 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) ))
         then
          (let _jessie_172 =
          (#"whole_program.jc" 345 97 111# "expl:Integer cast"
          (Unsafe_uint32.of_int (16))) in
          (let _jessie_173 = base in
          (let _jessie_174 = (0) in
          (let _jessie_175 = _jessie_173 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_175 _jessie_172 )))))
         else
          (let _jessie_167 =
          (#"whole_program.jc" 346 53 66# "expl:Integer cast"
          (Unsafe_uint32.of_int (8))) in
          (let _jessie_168 = base in
          (let _jessie_169 = (0) in
          (let _jessie_170 = _jessie_168 in
          (upd  unsigned_intP_unsigned_intM_base_6 _jessie_170 _jessie_167 ))))))
        end
       else
        (let _jessie_160 =
        (#"whole_program.jc" 347 57 70# "expl:Integer cast"
        (Unsafe_uint32.of_int (8))) in
        (let _jessie_161 = base in
        (let _jessie_162 = (0) in
        (let _jessie_163 = _jessie_161 in
        (upd  unsigned_intP_unsigned_intM_base_6 _jessie_163 _jessie_160 ))))))
      end
     else
      (let _jessie_153 =
      (#"whole_program.jc" 348 54 68# "expl:Integer cast"
      (Unsafe_uint32.of_int (10))) in
      (let _jessie_154 = base in
      (let _jessie_155 = (0) in
      (let _jessie_156 = _jessie_154 in
      (upd  unsigned_intP_unsigned_intM_base_6 _jessie_156 _jessie_153 ))))))
    else ());
     (if
     (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 5 16#
     (Unsafe_uint32.(=)  (acc  !unsigned_intP_unsigned_intM_base_6 base )
      (#"whole_program.jc" 349 52 66# "expl:Integer cast"
      (Unsafe_uint32.of_int (16))) ))
     then
      (if
      (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 31#
      (Unsafe_int32.(=) 
       (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 20 24#
       "expl:Integer cast"
       (Unsafe_int32_of_Unsafe_int8.cast 
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 350 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (0))) ) ) ) ))
       (#"whole_program.jc" 351 21 34# "expl:Integer cast"
       (Unsafe_int32.of_int (48))) ))
      then
       begin
       (tmp_1 :=
        (let _jessie_177 =
        (acc  charP_charM_s_5
         (shift_  !mutable_s_2
          (Unsafe_int32.to_int 
           (#"whole_program.jc" 353 65 77# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) ) in
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
        "expl:Precondition for _tolower"
        (Function__tolower._tolower  _jessie_177 ))));
        (if
        (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 56#
        (Unsafe_int32.(=) 
         (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.c" 14 35 49#
         "expl:Integer cast" (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1 ))
         (#"whole_program.jc" 354 53 67# "expl:Integer cast"
         (Unsafe_int32.of_int (120))) ))
        then
         (mutable_s_2 :=
          (shift_  !mutable_s_2
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 355 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (2))) ) )) else ()) end else ()) else ());
     begin (return := !mutable_s_2); (raise Return) end end))); absurd  end
    with Return -> !return end))
  
end

theory Axiomatic_CheckBytes8

  use enum.Uint8 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function check_bytes8 (start_0 : (pointer voidP)) (value : Uint8.t) (bytes
  : int) (unsigned_charP_unsigned_charM_start_8_at_L : (memory voidP
  Uint8.t)) : (pointer voidP)
  =
     (if ((=) bytes (0)) then null else
      (if
       (Uint8.(<>)
       (select unsigned_charP_unsigned_charM_start_8_at_L start_0) value)
       then start_0 else
       (check_bytes8 (shift start_0 (1)) value (Int.(-) bytes (1))
       unsigned_charP_unsigned_charM_start_8_at_L)))
  
  
  lemma Check_bytes8_shift1
  #"/home/work/workspace/self/verker/check_bytes8.h" 11 7 212#
  "expl:Lemma check_bytes8_shift1" :
  (forall voidP_start_0_92_alloc_table_at_L : (alloc_table voidP).
   (forall unsigned_charP_unsigned_charM_start_0_92_at_L : (memory voidP
    Uint8.t).
    (#"/home/work/workspace/self/verker/check_bytes8.h" 11 7 212#
    (forall start_0_0 : (pointer voidP).
     (forall value_0_0 : Uint8.t.
      (forall bytes_0_0 : int.
       ((((>) bytes_0_0 (0)) /\
        ((if ((<=) (0) (Int.(-) bytes_0_0 (1))) then
          (((<=) (offset_min voidP_start_0_92_alloc_table_at_L start_0_0)
           (0))
          /\
          (((>=) (offset_max voidP_start_0_92_alloc_table_at_L start_0_0)
           (Int.(-) bytes_0_0 (1)))
          /\
          (forall __framac_tmp3 : int.
           ((((<=) (0) __framac_tmp3) /\
            ((<=) __framac_tmp3 (Int.(-) bytes_0_0 (1)))) -> ((=) true true)))))
          else ((=) true true))
        /\
        (Uint8.(=)
        (select unsigned_charP_unsigned_charM_start_0_92_at_L start_0_0)
        value_0_0))) ->
        ((=)
        (check_bytes8 start_0_0 value_0_0 bytes_0_0
        unsigned_charP_unsigned_charM_start_0_92_at_L)
        (check_bytes8 (shift start_0_0 (1)) value_0_0 (Int.(-) bytes_0_0 (1))
        unsigned_charP_unsigned_charM_start_0_92_at_L)))))))))
  
  lemma Check_bytes8_stop
  #"/home/work/workspace/self/verker/check_bytes8.h" 15 7 176#
  "expl:Lemma check_bytes8_stop" :
  (forall voidP_start_1_95_alloc_table_at_L : (alloc_table voidP).
   (forall unsigned_charP_unsigned_charM_start_1_95_at_L : (memory voidP
    Uint8.t).
    (#"/home/work/workspace/self/verker/check_bytes8.h" 15 7 176#
    (forall start_1_0 : (pointer voidP).
     (forall value_1 : Uint8.t.
      (forall bytes_1 : int.
       ((((>) bytes_1 (0)) /\
        ((if ((<=) (0) (Int.(-) bytes_1 (1))) then
          (((<=) (offset_min voidP_start_1_95_alloc_table_at_L start_1_0)
           (0))
          /\
          (((>=) (offset_max voidP_start_1_95_alloc_table_at_L start_1_0)
           (Int.(-) bytes_1 (1)))
          /\
          (forall __framac_tmp4 : int.
           ((((<=) (0) __framac_tmp4) /\
            ((<=) __framac_tmp4 (Int.(-) bytes_1 (1)))) -> ((=) true true)))))
          else ((=) true true))
        /\
        (Uint8.(<>)
        (select unsigned_charP_unsigned_charM_start_1_95_at_L start_1_0)
        value_1))) ->
        ((=)
        (check_bytes8 start_1_0 value_1 bytes_1
        unsigned_charP_unsigned_charM_start_1_95_at_L) start_1_0))))))))
  
  lemma Check_bytes8_stop_bytes_zero
  #"/home/work/workspace/self/verker/check_bytes8.h" 19 7 81#
  "expl:Lemma check_bytes8_stop_bytes_zero" :
  (forall unsigned_charP_unsigned_charM_start_2_97_at_L : (memory voidP
   Uint8.t).
   (#"/home/work/workspace/self/verker/check_bytes8.h" 19 7 81#
   (forall start_2 : (pointer voidP).
    (forall value_2 : Uint8.t.
     ((=)
     (check_bytes8 start_2 value_2 (0)
     unsigned_charP_unsigned_charM_start_2_97_at_L) null)))))
  
end

module Function_check_bytes8_0_safety
#"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
"expl:check_bytes8, safety"

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint32 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  let check_bytes8_0
  #"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, safety" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_10_alloc_table : (alloc_table voidP))
   (voidP_start_10_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_start_10_alloc_table start_1) ->
     (((=) (typeof voidP_start_10_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_10_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_10_alloc_table start_1))) ->
       ((=) (typeof voidP_start_10_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_10_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_10_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp5 : int.
     ((((<=) (0) __framac_tmp5) /\
      ((<=) __framac_tmp5 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true)))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Safe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart :=
        (let _jessie_233 = !mutable_start_1 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/check_bytes8.c" 5 15 21#
        "expl:Pointer index bounds" true) }); _jessie_233 end));
        begin
        (obytes :=
         (let _jessie_229 = !mutable_bytes_0 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/check_bytes8.c" 6 24 30#
         "expl:Pointer index bounds" true) }); _jessie_229 end));
         'Loop_4:
         loop
         invariant { (#"whole_program.jc" 518 6 2400# true) }
           variant {
             (#"/home/work/workspace/self/verker/check_bytes8.c" 13 18 23#
             (Uint32.to_int
             (#"/home/work/workspace/self/verker/check_bytes8.c" 13 18 23#
             !mutable_bytes_0))) }
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_10)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_10)))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 11 20 70#
             (forall i_3 : (pointer voidP).
              (((same_block !ostart i_3) /\
               (((<=) (sub_pointer !ostart i_3) (0)) /\
               ((same_block i_3 !mutable_start_1) /\
               ((<) (sub_pointer i_3 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i_3)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 520 40 53# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/check_bytes8.c" 15 8 13#
            (Safe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 550 48 61# "expl:Integer cast"
             (Safe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 21#
             (Safe_int32.(<>) 
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Safe_int32_of_Safe_uint8.cast 
               (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 12#
               "expl:Pointer dereference"
               (acc  voidP_start_10_alloc_table
                unsigned_charP_unsigned_charM_start_10 !mutable_start_1 )) ))
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 16 21#
              "expl:Integer cast" (Safe_int32_of_Safe_uint8.cast  value_0 ))
              ))
             then
              begin
              (__retres :=
               (let _jessie_230 = !mutable_start_1 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/check_bytes8.c" 17 3 24#
               "expl:Pointer index bounds" true) }); _jessie_230 end));
               (raise (Return_label_exc ())) end else ());
              begin
              (mutable_start_1 :=
               (let _jessie_231 =
               (shift_typesafe  !mutable_start_1
                (Safe_int32.to_int 
                 (#"whole_program.jc" 559 53 65# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/check_bytes8.c" 18 2 9#
               "expl:Pointer index bounds" true) }); _jessie_231 end));
               (mutable_bytes_0 :=
                (let _jessie_232 =
                (Safe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 561 57 70# "expl:Integer cast"
                 (Safe_uint32.of_int (1))) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/check_bytes8.c" 19 2 9#
                "expl:Pointer index bounds" true) }); _jessie_232 end)) end
             end end; (raise (Loop_continue_exc ())) end with
            Loop_continue_exc _jessie_4 -> () end end end;
         (raise (Goto_while_0_break_exc ())) end end with
       Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 568 60 73#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_10) null)) } ; () end;
        (__retres :=
         (let _jessie_234 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/check_bytes8.c" 23 1 20#
         "expl:Pointer index bounds" true) }); _jessie_234 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_235 = !__retres in
       begin
       (assert {
       (#"whole_program.jc" 581 7 22# "expl:Pointer index bounds" true) });
        _jessie_235 end)); (raise Return) end end))); absurd  end with Return
    -> !return end)))
  
end

module Function_check_bytes8_0_behaviors
#"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
"expl:check_bytes8, behaviors"

  use Unsafe_uint32 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  let check_bytes8_ensures_default
  #"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, default behavior" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_10_alloc_table : (alloc_table voidP))
   (voidP_start_10_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) 
   requires {
   (((allocated voidP_start_10_alloc_table start_1) ->
     (((=) (typeof voidP_start_10_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_10_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_10_alloc_table start_1))) ->
       ((=) (typeof voidP_start_10_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_10_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_10_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp5 : int.
     ((((<=) (0) __framac_tmp5) /\
      ((<=) __framac_tmp5 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/check_bytes8.h" 26 12 56#
     "expl:Ensures clause"
     ((=) result
     (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
     unsigned_charP_unsigned_charM_start_10)))) } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 465 10 1463# "expl:Behavior disjointness check"
    (not
    ((exists i_0_0 : (pointer voidP).
      ((same_block !mutable_start_1 i_0_0) /\
      (((<=) (sub_pointer !mutable_start_1 i_0_0) (0)) /\
      ((same_block i_0_0
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      (((<)
       (sub_pointer i_0_0
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))
      /\
      (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_10 i_0_0)
      value_0))))))
    /\
    (forall i_1 : (pointer voidP).
     (((same_block !mutable_start_1 i_1) /\
      (((<=) (sub_pointer !mutable_start_1 i_1) (0)) /\
      ((same_block i_1
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      ((<)
      (sub_pointer i_1
      (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))))) ->
      (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i_1) value_0))))))
    });
     (check {
     (#"whole_program.jc" 488 10 1313# "expl:Behavior completeness check"
     ((forall i_2 : (pointer voidP).
       (((same_block !mutable_start_1 i_2) /\
        (((<=) (sub_pointer !mutable_start_1 i_2) (0)) /\
        ((same_block i_2
         (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
        /\
        ((<)
        (sub_pointer i_2
        (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))))) ->
        (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i_2)
        value_0)))
     \/
     (exists i_0_1 : (pointer voidP).
      ((same_block !mutable_start_1 i_0_1) /\
      (((<=) (sub_pointer !mutable_start_1 i_0_1) (0)) /\
      ((same_block i_0_1
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0)))
      /\
      (((<)
       (sub_pointer i_0_1
       (shift !mutable_start_1 (Uint32.to_int !mutable_bytes_0))) (0))
      /\
      (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_10 i_0_1)
      value_0)))))))) });
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_1:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
              (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
              ((#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 30#
               (Uint32.(<=) (#"whole_program.jc" 520 40 53#
               "expl:Integer cast" (Uint32.of_int (0))) !mutable_bytes_0))
              /\
              (#"/home/work/workspace/self/verker/check_bytes8.c" 8 25 40#
              (Uint32.(<=) !mutable_bytes_0 !obytes)))))
             &&
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
              (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
               (same_block !ostart !mutable_start_1))
              /\
              (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
               ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
              /\
              (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
              ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
               (same_block !mutable_start_1
               (shift !ostart (Uint32.to_int !obytes))))
              /\
              (#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
              ((<=)
              (sub_pointer !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 10 20 52#
              ((=) (sub_pointer !mutable_start_1 !ostart)
              (Int.(-) (Uint32.to_int !obytes)
              (Uint32.to_int !mutable_bytes_0))))
             &&
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 11 20 70#
              (forall i_3 : (pointer voidP).
               (((same_block !ostart i_3) /\
                (((<=) (sub_pointer !ostart i_3) (0)) /\
                ((same_block i_3 !mutable_start_1) /\
                ((<) (sub_pointer i_3 !mutable_start_1) (0))))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_start_10 i_3) value_0))))
             &&
             (#"/home/work/workspace/self/verker/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_10)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_10))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 550 48 61# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_10 !mutable_start_1
                ) ))
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 559 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 561 57 70# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker/check_bytes8.c" 21 12 22#
        "expl:Assertion in line 21"
        (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 568 60 73#
        "expl:Integer cast" (Uint32.of_int (0))))) }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker/check_bytes8.c" 22 12 56#
        "expl:Assertion in line 22"
        ((=)
        (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
        unsigned_charP_unsigned_charM_start_10) null)) }); () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
  let check_bytes8_ensures_found
  #"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, behavior found" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_10_alloc_table : (alloc_table voidP))
   (voidP_start_10_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) 
   requires {
   ((exists i_0 : (pointer voidP).
     ((same_block start_1 i_0) /\
     (((<=) (sub_pointer start_1 i_0) (0)) /\
     ((same_block i_0 (shift start_1 (Uint32.to_int bytes_0))) /\
     (((<) (sub_pointer i_0 (shift start_1 (Uint32.to_int bytes_0))) (0)) /\
     (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_10 i_0) value_0))))))
   /\
   (((allocated voidP_start_10_alloc_table start_1) ->
     (((=) (typeof voidP_start_10_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_10_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_10_alloc_table start_1))) ->
       ((=) (typeof voidP_start_10_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_10_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_10_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp5 : int.
     ((((<=) (0) __framac_tmp5) /\
      ((<=) __framac_tmp5 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
      "expl:Ensures clause"
      (same_block start_1
      (downcast voidP_start_10_tag_table result unsigned_charP_tag)))
     /\
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer start_1
      (downcast voidP_start_10_tag_table result unsigned_charP_tag)) (0)))
     /\
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
      "expl:Ensures clause"
      (same_block
      (downcast voidP_start_10_tag_table result unsigned_charP_tag)
      (shift start_1 (Uint32.to_int bytes_0))))
     /\
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
      "expl:Ensures clause"
      ((<)
      (sub_pointer
      (downcast voidP_start_10_tag_table result unsigned_charP_tag)
      (shift start_1 (Uint32.to_int bytes_0))) (0)))
     /\
     (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/check_bytes8.h" 30 15 40#
      "expl:Ensures clause"
      (Uint8.(<>)
      (select unsigned_charP_unsigned_charM_start_10
      (downcast voidP_start_10_tag_table result unsigned_charP_tag)) value_0))
     /\
     (#"/home/work/workspace/self/verker/check_bytes8.h" 31 15 72#
     "expl:Ensures clause"
     (forall j : (pointer voidP).
      (((same_block start_1 j) /\
       (((<=) (sub_pointer start_1 j) (0)) /\
       ((same_block j
        (downcast voidP_start_10_tag_table result unsigned_charP_tag))
       /\
       ((<)
       (sub_pointer j
       (downcast voidP_start_10_tag_table result unsigned_charP_tag)) (0)))))
       ->
       (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 j) value_0))))))))))))))))
     } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_2:
         loop
         invariant { (#"whole_program.jc" 518 6 2400# true) } 
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_10)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_10)))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 11 20 70#
             (forall i_3 : (pointer voidP).
              (((same_block !ostart i_3) /\
               (((<=) (sub_pointer !ostart i_3) (0)) /\
               ((same_block i_3 !mutable_start_1) /\
               ((<) (sub_pointer i_3 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i_3)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 520 40 53# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 550 48 61# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_10 !mutable_start_1
                ) ))
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 559 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 561 57 70# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 568 60 73#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_10) null)) } ; () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
  let check_bytes8_ensures_not_exists
  #"/home/work/workspace/self/verker/check_bytes8.c" 3 12 72#
  "expl:Function check_bytes8, behavior not_exists" =
  fun
   (start_1 : (pointer voidP)) (value_0 : Uint8.t) (bytes_0 : Uint32.t)
   (voidP_start_10_alloc_table : (alloc_table voidP))
   (voidP_start_10_tag_table : (tag_table voidP))
   (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) 
   requires {
   ((forall i : (pointer voidP).
     (((same_block start_1 i) /\
      (((<=) (sub_pointer start_1 i) (0)) /\
      ((same_block i (shift start_1 (Uint32.to_int bytes_0))) /\
      ((<) (sub_pointer i (shift start_1 (Uint32.to_int bytes_0))) (0))))) ->
      (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i) value_0)))
   /\
   (((allocated voidP_start_10_alloc_table start_1) ->
     (((=) (typeof voidP_start_10_tag_table start_1) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_start_10_alloc_table start_1) i) /\
       ((<) i (offset_max voidP_start_10_alloc_table start_1))) ->
       ((=) (typeof voidP_start_10_tag_table (shift start_1 i))
       unsigned_charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/check_bytes8.h" 24 13 39#
   (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
    (((<=) (offset_min voidP_start_10_alloc_table start_1) (0)) /\
    (((>=) (offset_max voidP_start_10_alloc_table start_1)
     (Int.(-) (Uint32.to_int bytes_0) (1)))
    /\
    (forall __framac_tmp5 : int.
     ((((<=) (0) __framac_tmp5) /\
      ((<=) __framac_tmp5 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
      ((=) true true))))) else ((=) true true))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/check_bytes8.h" 34 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_start_1 = ref start_1 in
   (let mutable_bytes_0 = ref bytes_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let ostart = ref (any_pointer  () : (pointer voidP)) in
     (let obytes = ref (Unsafe_uint32.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (ostart := !mutable_start_1);
        begin
        (obytes := !mutable_bytes_0);
         'Loop_3:
         loop
         invariant { (#"whole_program.jc" 518 6 2400# true) } 
          begin
          any unit
          requires { true } reads { mutable_bytes_0, mutable_start_1, value_0
          }
          ensures {
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 12 20 92#
             ((=)
             (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
             unsigned_charP_unsigned_charM_start_10)
             (check_bytes8 !mutable_start_1 value_0
             (Uint32.to_int !mutable_bytes_0)
             unsigned_charP_unsigned_charM_start_10)))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 11 20 70#
             (forall i_3 : (pointer voidP).
              (((same_block !ostart i_3) /\
               (((<=) (sub_pointer !ostart i_3) (0)) /\
               ((same_block i_3 !mutable_start_1) /\
               ((<) (sub_pointer i_3 !mutable_start_1) (0))))) ->
               (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i_3)
               value_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 10 20 52#
             ((=) (sub_pointer !mutable_start_1 !ostart)
             (Int.(-) (Uint32.to_int !obytes)
             (Uint32.to_int !mutable_bytes_0))))
            /\
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              (same_block !ostart !mutable_start_1))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 35#
              ((<=) (sub_pointer !ostart !mutable_start_1) (0)))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
              (same_block !mutable_start_1
              (shift !ostart (Uint32.to_int !obytes))))
             /\
             (#"/home/work/workspace/self/verker/check_bytes8.c" 9 30 54#
             ((<=)
             (sub_pointer !mutable_start_1
             (shift !ostart (Uint32.to_int !obytes))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 40#
            ((#"/home/work/workspace/self/verker/check_bytes8.c" 8 20 30#
             (Uint32.(<=) (#"whole_program.jc" 520 40 53# "expl:Integer cast"
             (Uint32.of_int (0))) !mutable_bytes_0))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.c" 8 25 40#
            (Uint32.(<=) !mutable_bytes_0 !obytes))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/check_bytes8.c" 15 8 13#
            (Unsafe_uint32.(<>)  !mutable_bytes_0
             (#"whole_program.jc" 550 48 61# "expl:Integer cast"
             (Unsafe_uint32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             begin
             (if
             (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 21#
             (Unsafe_int32.(<>) 
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 6 12#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_start_10 !mutable_start_1
                ) ))
              (#"/home/work/workspace/self/verker/check_bytes8.c" 16 16 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_uint8.cast  value_0 )) ))
             then
              begin
              (__retres := !mutable_start_1); (raise (Return_label_exc ()))
              end else ());
              begin
              (mutable_start_1 :=
               (shift_  !mutable_start_1
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 559 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               (mutable_bytes_0 :=
                (Unsafe_uint32.(-)  !mutable_bytes_0
                 (#"whole_program.jc" 561 57 70# "expl:Integer cast"
                 (Unsafe_uint32.of_int (1))) )) end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_bytes_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 21 12 22#
          (Uint32.(=) !mutable_bytes_0 (#"whole_program.jc" 568 60 73#
          "expl:Integer cast" (Uint32.of_int (0))))) } ; () end;
        begin
        any unit
        requires { true } reads { value_0 }
        ensures {
          (#"/home/work/workspace/self/verker/check_bytes8.c" 22 12 56#
          ((=)
          (check_bytes8 !ostart value_0 (Uint32.to_int !obytes)
          unsigned_charP_unsigned_charM_start_10) null)) } ; () end;
        (__retres := (null  )) end end; (raise (Return_label_exc ())) end
      with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)))
  
end

theory Root__BoolP

  use why3.Bool.Bool 
  
  type _BoolP 
  
end

module Function_kstrtobool_safety
#"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
"expl:kstrtobool, safety"

  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_eq_pointer_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use import core.Jessie_acc_offset_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool #"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, safety" =
  fun
   (s_0_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_16 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_16_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_15_alloc_table : (alloc_table voidP))
   (voidP_s_0_15_tag_table : (tag_table voidP)) (charP_charM_s_0_15 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_15_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_15_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_15_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_15_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"/home/work/workspace/self/verker/kstrtobool.h" 33 13 43#
    (((=) s_0_0 null) \/
    (((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) (0)) /\
    (((>=) (offset_max voidP_s_0_15_alloc_table s_0_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((<=) (offset_min _BoolP_res_16_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((>=) (offset_max _BoolP_res_16_alloc_table res) (0)))
   /\ (#"whole_program.jc" 607 12 448# ((=) true true)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_0 = ref (Safe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker/kstrtobool.c" 5 5 7#
       (Bool.notb 
        (#"whole_program.jc" 643 24 35#
        (neq_pointer  voidP_s_0_15_alloc_table voidP_s_0_15_alloc_table s_0_0
         (null  ) )) ))
       then
        begin
        (__retres_0 :=
         (let _jessie_323 =
         (#"whole_program.jc" 644 33 47# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/kstrtobool.c" 6 2 13#
         "expl:Pointer index bounds" true) }); _jessie_323 end));
         (raise (Goto_return_label_0_exc ())) end else ());
        (let _jessie_10 =
        (let _jessie_324 =
        (#"/home/work/workspace/self/verker/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Safe_int32_of_Safe_int8.cast 
         (#"/home/work/workspace/self/verker/kstrtobool.c" 8 9 13#
         "expl:Pointer dereference"
         (acc  voidP_s_0_15_alloc_table charP_charM_s_0_15 s_0_0 )) )) in
        begin (assert { ("expl:Pointer index bounds" true) }); _jessie_324
        end) in
        (if
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
         (Safe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Safe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
         (Safe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Safe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
        (Safe_int32.(=)  _jessie_10
         (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Safe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_346 =
         (let _jessie_345 =
         (#"whole_program.jc" 653 46 58# "expl:Integer cast"
         (Safe_enum__bool.of_int  (1) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/kstrtobool.c" 12 2 13#
         "expl:Pointer index bounds" true) }); _jessie_345 end) in
         (let _jessie_347 = res in
         (let _jessie_348 = (0) in
         (let _jessie_349 = _jessie_347 in
         (#"/home/work/workspace/self/verker/kstrtobool.c" 12 2 13#
         "expl:Pointer dereference"
         (upd  _BoolP_res_16_alloc_table _BoolP__BoolM_res_16 _jessie_347
          _jessie_346 ))))));
          begin
          (__retres_0 :=
           (let _jessie_344 =
           (#"whole_program.jc" 654 35 47# "expl:Integer cast"
           (Safe_int32.of_int (0))) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/kstrtobool.c" 13 2 11#
           "expl:Pointer index bounds" true) }); _jessie_344 end));
           (raise (Goto_return_label_0_exc ())) end end
        else
         (if
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
          (Safe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Safe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
          (Safe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Safe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
         (Safe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Safe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_340 =
          (let _jessie_339 =
          (#"whole_program.jc" 661 46 58# "expl:Integer cast"
          (Safe_enum__bool.of_int  (0) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/kstrtobool.c" 17 2 14#
          "expl:Pointer index bounds" true) }); _jessie_339 end) in
          (let _jessie_341 = res in
          (let _jessie_342 = (0) in
          (let _jessie_343 = _jessie_341 in
          (#"/home/work/workspace/self/verker/kstrtobool.c" 17 2 14#
          "expl:Pointer dereference"
          (upd  _BoolP_res_16_alloc_table _BoolP__BoolM_res_16 _jessie_341
           _jessie_340 ))))));
           begin
           (__retres_0 :=
            (let _jessie_338 =
            (#"whole_program.jc" 662 35 47# "expl:Integer cast"
            (Safe_int32.of_int (0))) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/kstrtobool.c" 18 2 11#
            "expl:Pointer index bounds" true) }); _jessie_338 end));
            (raise (Goto_return_label_0_exc ())) end end
         else
          begin
          (if
          (#"whole_program.jc" 649 14 84#
          ((#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
           (Safe_int32.(=)  _jessie_10
            (#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Safe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
          (Safe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Safe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_8 =
             (let _jessie_325 =
             (#"/home/work/workspace/self/verker/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker/kstrtobool.c" 21 10 14#
              "expl:Pointer dereference"
              (acc_offset_typesafe  voidP_s_0_15_alloc_table
               charP_charM_s_0_15 s_0_0 (1) )) )) in
             begin
             (assert { ("expl:Pointer index bounds" true) }); _jessie_325 end)
             in
             (if
             (#"whole_program.jc" 670 19 89#
             ((#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
              (Safe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Safe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
             (Safe_int32.(=)  _jessie_8
              (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Safe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_334 =
              (let _jessie_333 =
              (#"whole_program.jc" 673 51 63# "expl:Integer cast"
              (Safe_enum__bool.of_int  (1) )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/kstrtobool.c" 24 3 14#
              "expl:Pointer index bounds" true) }); _jessie_333 end) in
              (let _jessie_335 = res in
              (let _jessie_336 = (0) in
              (let _jessie_337 = _jessie_335 in
              (#"/home/work/workspace/self/verker/kstrtobool.c" 24 3 14#
              "expl:Pointer dereference"
              (upd  _BoolP_res_16_alloc_table _BoolP__BoolM_res_16
               _jessie_335 _jessie_334 ))))));
               begin
               (__retres_0 :=
                (let _jessie_332 =
                (#"whole_program.jc" 674 40 52# "expl:Integer cast"
                (Safe_int32.of_int (0))) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/kstrtobool.c" 25 3 12#
                "expl:Pointer index bounds" true) }); _jessie_332 end));
                (raise (Goto_return_label_0_exc ())) end end
             else
              (if
              (#"whole_program.jc" 670 19 89#
              ((#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
               (Safe_int32.(=)  _jessie_8
                (#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Safe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
              (Safe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Safe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_328 =
               (let _jessie_327 =
               (#"whole_program.jc" 680 51 63# "expl:Integer cast"
               (Safe_enum__bool.of_int  (0) )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/kstrtobool.c" 28 3 15#
               "expl:Pointer index bounds" true) }); _jessie_327 end) in
               (let _jessie_329 = res in
               (let _jessie_330 = (0) in
               (let _jessie_331 = _jessie_329 in
               (#"/home/work/workspace/self/verker/kstrtobool.c" 28 3 15#
               "expl:Pointer dereference"
               (upd  _BoolP_res_16_alloc_table _BoolP__BoolM_res_16
                _jessie_329 _jessie_328 ))))));
                begin
                (__retres_0 :=
                 (let _jessie_326 =
                 (#"whole_program.jc" 681 40 52# "expl:Integer cast"
                 (Safe_int32.of_int (0))) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/kstrtobool.c" 29 3 12#
                 "expl:Pointer index bounds" true) }); _jessie_326 end));
                 (raise (Goto_return_label_0_exc ())) end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_5 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_6 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_0 :=
         (let _jessie_350 =
         (#"whole_program.jc" 698 30 44# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (22) ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/kstrtobool.c" 37 1 12#
         "expl:Pointer index bounds" true) }); _jessie_350 end)) end end;
       (raise (Goto_return_label_0_exc ())) end with Goto_return_label_0_exc
      _jessie_7 ->
      'Return_label_0:
      'Return_label_0:
      begin
      (return :=
       (let _jessie_351 = !__retres_0 in
       begin
       (assert {
       (#"whole_program.jc" 700 7 24# "expl:Pointer index bounds" true) });
        _jessie_351 end)); (raise Return) end end); absurd  end with Return
    -> !return end)
  
end

theory Logic_kstrtobool_fmt_true

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_true (s_3 : (pointer voidP))
  (charP_charM_s_3_13_at_L : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (0)))
      (#"whole_program.jc" 595 27 39# "expl:Integer cast" (Int8.of_int
      (89))))
     \/
     ((Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (0)))
      (#"whole_program.jc" 596 28 41# "expl:Integer cast" (Int8.of_int
      (121))))
     \/
     ((Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (0)))
      (#"whole_program.jc" 597 27 39# "expl:Integer cast" (Int8.of_int
      (49))))
     \/
     (((Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (0)))
       (#"whole_program.jc" 598 28 41# "expl:Integer cast" (Int8.of_int
       (111))))
      \/
      (Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (0)))
      (#"whole_program.jc" 599 29 41# "expl:Integer cast" (Int8.of_int
      (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (1)))
      (#"whole_program.jc" 600 29 41# "expl:Integer cast" (Int8.of_int
      (78))))
     \/
     (Int8.(=) (select charP_charM_s_3_13_at_L (shift s_3 (1)))
     (#"whole_program.jc" 601 30 43# "expl:Integer cast" (Int8.of_int
     (110)))))))))
  
  
end

theory Logic_kstrtobool_fmt_false

  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt_false (s_2_0 : (pointer voidP))
  (charP_charM_s_2_12_at_L : (memory voidP Int8.t))
  =
     ((Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (0)))
      (#"whole_program.jc" 586 27 39# "expl:Integer cast" (Int8.of_int
      (78))))
     \/
     ((Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (0)))
      (#"whole_program.jc" 587 28 41# "expl:Integer cast" (Int8.of_int
      (110))))
     \/
     ((Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (0)))
      (#"whole_program.jc" 588 27 39# "expl:Integer cast" (Int8.of_int
      (48))))
     \/
     (((Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (0)))
       (#"whole_program.jc" 589 28 41# "expl:Integer cast" (Int8.of_int
       (111))))
      \/
      (Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (0)))
      (#"whole_program.jc" 590 29 41# "expl:Integer cast" (Int8.of_int
      (79)))))
     /\
     ((Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (1)))
      (#"whole_program.jc" 591 29 41# "expl:Integer cast" (Int8.of_int
      (70))))
     \/
     (Int8.(=) (select charP_charM_s_2_12_at_L (shift s_2_0 (1)))
     (#"whole_program.jc" 592 30 43# "expl:Integer cast" (Int8.of_int
     (102)))))))))
  
  
end

theory Logic_kstrtobool_fmt

  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  predicate kstrtobool_fmt (s_4 : (pointer voidP)) (charP_charM_s_4_14_at_L :
  (memory voidP Int8.t))
  =
     ((kstrtobool_fmt_true s_4 charP_charM_s_4_14_at_L) \/
     (kstrtobool_fmt_false s_4 charP_charM_s_4_14_at_L))
  
  
end

module Function_kstrtobool_behaviors
#"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
"expl:kstrtobool, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  let kstrtobool_ensures_CORRECT
  #"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior CORRECT" =
  fun
   (s_0_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_16 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_16_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_15_alloc_table : (alloc_table voidP))
   (voidP_s_0_15_tag_table : (tag_table voidP)) (charP_charM_s_0_15 : (memory
   voidP Int8.t)) 
   requires {
   ((((<>) s_0_0 null) /\ (kstrtobool_fmt s_0_0 charP_charM_s_0_15)) /\
   (((allocated voidP_s_0_15_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_15_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_15_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_15_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"/home/work/workspace/self/verker/kstrtobool.h" 33 13 43#
    (((=) s_0_0 null) \/
    (((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) (0)) /\
    (((>=) (offset_max voidP_s_0_15_alloc_table s_0_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((<=) (offset_min _BoolP_res_16_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((>=) (offset_max _BoolP_res_16_alloc_table res) (0)))
   /\ (#"whole_program.jc" 607 12 448# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 625 10 20# "expl:Assigns clause"
      (not_assigns _BoolP_res_16_alloc_table _BoolP_res_16_alloc_table (old
      !_BoolP__BoolM_res_16) !_BoolP__BoolM_res_16 (pset_singleton res)))
     /\
     (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_true s_0_0 charP_charM_s_0_15) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
       (#"whole_program.jc" 627 57 69# "expl:Integer cast"
       (Enum__bool.of_int (1))))))
     /\
     (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/kstrtobool.h" 45 15 52#
      "expl:Ensures clause"
      ((kstrtobool_fmt_false s_0_0 charP_charM_s_0_15) ->
       (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
       (#"whole_program.jc" 629 59 71# "expl:Integer cast"
       (Enum__bool.of_int (0))))))
     /\
     (#"/home/work/workspace/self/verker/kstrtobool.h" 46 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 630 46 58# "expl:Integer cast"
     (Int32.of_int (0)))))))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_0 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0_0 (null  ) ) ))
       then
        begin
        (__retres_0 :=
         (#"whole_program.jc" 644 33 47# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Goto_return_label_0_exc ())) end else ());
        (let _jessie_10 =
        (#"/home/work/workspace/self/verker/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_15
          (shift_  s_0_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 649 52 64# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_10
         (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_317 =
         (#"whole_program.jc" 653 46 58# "expl:Integer cast"
         (Unsafe_enum__bool.of_int  (1) )) in
         (let _jessie_318 = res in
         (let _jessie_319 = (0) in
         (let _jessie_320 = _jessie_318 in
         (upd  _BoolP__BoolM_res_16 _jessie_320 _jessie_317 )))));
          begin
          (__retres_0 :=
           (#"whole_program.jc" 654 35 47# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
          end end
        else
         (if
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_311 =
          (#"whole_program.jc" 661 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) in
          (let _jessie_312 = res in
          (let _jessie_313 = (0) in
          (let _jessie_314 = _jessie_312 in
          (upd  _BoolP__BoolM_res_16 _jessie_314 _jessie_311 )))));
           begin
           (__retres_0 :=
            (#"whole_program.jc" 662 35 47# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
           end end
         else
          begin
          (if
          (#"whole_program.jc" 649 14 84#
          ((#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_10
            (#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_8 =
             (#"/home/work/workspace/self/verker/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_0_15
               (shift_  s_0_0
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 670 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"whole_program.jc" 670 19 89#
             ((#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_8
              (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_305 =
              (#"whole_program.jc" 673 51 63# "expl:Integer cast"
              (Unsafe_enum__bool.of_int  (1) )) in
              (let _jessie_306 = res in
              (let _jessie_307 = (0) in
              (let _jessie_308 = _jessie_306 in
              (upd  _BoolP__BoolM_res_16 _jessie_308 _jessie_305 )))));
               begin
               (__retres_0 :=
                (#"whole_program.jc" 674 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (0))));
                (raise (Goto_return_label_0_exc ())) end end
             else
              (if
              (#"whole_program.jc" 670 19 89#
              ((#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_8
                (#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_299 =
               (#"whole_program.jc" 680 51 63# "expl:Integer cast"
               (Unsafe_enum__bool.of_int  (0) )) in
               (let _jessie_300 = res in
               (let _jessie_301 = (0) in
               (let _jessie_302 = _jessie_300 in
               (upd  _BoolP__BoolM_res_16 _jessie_302 _jessie_299 )))));
                begin
                (__retres_0 :=
                 (#"whole_program.jc" 681 40 52# "expl:Integer cast"
                 (Unsafe_int32.of_int (0))));
                 (raise (Goto_return_label_0_exc ())) end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_5 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_6 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_0 :=
         (#"whole_program.jc" 698 30 44# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Goto_return_label_0_exc ())) end with Goto_return_label_0_exc
      _jessie_7 ->
      'Return_label_0:
      'Return_label_0: begin (return := !__retres_0); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_INVAL
  #"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, behavior INVAL" =
  fun
   (s_0_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_16 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_16_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_15_alloc_table : (alloc_table voidP))
   (voidP_s_0_15_tag_table : (tag_table voidP)) (charP_charM_s_0_15 : (memory
   voidP Int8.t)) 
   requires {
   ((((=) s_0_0 null) \/ (not (kstrtobool_fmt s_0_0 charP_charM_s_0_15))) /\
   (((allocated voidP_s_0_15_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_15_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_15_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_15_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"/home/work/workspace/self/verker/kstrtobool.h" 33 13 43#
    (((=) s_0_0 null) \/
    (((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) (0)) /\
    (((>=) (offset_max voidP_s_0_15_alloc_table s_0_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((<=) (offset_min _BoolP_res_16_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((>=) (offset_max _BoolP_res_16_alloc_table res) (0)))
   /\ (#"whole_program.jc" 607 12 448# ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 621 10 18# "expl:Assigns clause"
      (not_assigns _BoolP_res_16_alloc_table _BoolP_res_16_alloc_table (old
      !_BoolP__BoolM_res_16) !_BoolP__BoolM_res_16 pset_empty))
     /\
     (#"/home/work/workspace/self/verker/kstrtobool.h" 40 15 29#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 622 32 49# "expl:Integer cast"
     (Int32.of_int (Int.(-_) (22)))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let __retres_0 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0_0 (null  ) ) ))
       then
        begin
        (__retres_0 :=
         (#"whole_program.jc" 644 33 47# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Goto_return_label_0_exc ())) end else ());
        (let _jessie_10 =
        (#"/home/work/workspace/self/verker/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_15
          (shift_  s_0_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 649 52 64# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_10
         (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_288 =
         (#"whole_program.jc" 653 46 58# "expl:Integer cast"
         (Unsafe_enum__bool.of_int  (1) )) in
         (let _jessie_289 = res in
         (let _jessie_290 = (0) in
         (let _jessie_291 = _jessie_289 in
         (upd  _BoolP__BoolM_res_16 _jessie_291 _jessie_288 )))));
          begin
          (__retres_0 :=
           (#"whole_program.jc" 654 35 47# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
          end end
        else
         (if
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_282 =
          (#"whole_program.jc" 661 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) in
          (let _jessie_283 = res in
          (let _jessie_284 = (0) in
          (let _jessie_285 = _jessie_283 in
          (upd  _BoolP__BoolM_res_16 _jessie_285 _jessie_282 )))));
           begin
           (__retres_0 :=
            (#"whole_program.jc" 662 35 47# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
           end end
         else
          begin
          (if
          (#"whole_program.jc" 649 14 84#
          ((#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_10
            (#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_8 =
             (#"/home/work/workspace/self/verker/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_0_15
               (shift_  s_0_0
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 670 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"whole_program.jc" 670 19 89#
             ((#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_8
              (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_276 =
              (#"whole_program.jc" 673 51 63# "expl:Integer cast"
              (Unsafe_enum__bool.of_int  (1) )) in
              (let _jessie_277 = res in
              (let _jessie_278 = (0) in
              (let _jessie_279 = _jessie_277 in
              (upd  _BoolP__BoolM_res_16 _jessie_279 _jessie_276 )))));
               begin
               (__retres_0 :=
                (#"whole_program.jc" 674 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (0))));
                (raise (Goto_return_label_0_exc ())) end end
             else
              (if
              (#"whole_program.jc" 670 19 89#
              ((#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_8
                (#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_270 =
               (#"whole_program.jc" 680 51 63# "expl:Integer cast"
               (Unsafe_enum__bool.of_int  (0) )) in
               (let _jessie_271 = res in
               (let _jessie_272 = (0) in
               (let _jessie_273 = _jessie_271 in
               (upd  _BoolP__BoolM_res_16 _jessie_273 _jessie_270 )))));
                begin
                (__retres_0 :=
                 (#"whole_program.jc" 681 40 52# "expl:Integer cast"
                 (Unsafe_int32.of_int (0))));
                 (raise (Goto_return_label_0_exc ())) end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_5 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_6 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_0 :=
         (#"whole_program.jc" 698 30 44# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Goto_return_label_0_exc ())) end with Goto_return_label_0_exc
      _jessie_7 ->
      'Return_label_0:
      'Return_label_0: begin (return := !__retres_0); (raise Return) end end);
     absurd  end with Return -> !return end)
  
  let kstrtobool_ensures_default
  #"/home/work/workspace/self/verker/kstrtobool.c" 3 4 40#
  "expl:Function kstrtobool, default behavior" =
  fun
   (s_0_0 : (pointer voidP)) (res : (pointer _BoolP)) (_BoolP__BoolM_res_16 :
   ref (memory _BoolP Enum__bool.t)) (_BoolP_res_16_alloc_table :
   (alloc_table _BoolP)) (voidP_s_0_15_alloc_table : (alloc_table voidP))
   (voidP_s_0_15_tag_table : (tag_table voidP)) (charP_charM_s_0_15 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_15_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_15_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_15_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_15_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"/home/work/workspace/self/verker/kstrtobool.h" 33 13 43#
    (((=) s_0_0 null) \/
    (((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) (0)) /\
    (((>=) (offset_max voidP_s_0_15_alloc_table s_0_0) (1)) /\
    (((=) true true) /\ ((=) true true))))))
   /\
   (#"/home/work/workspace/self/verker/kstrtobool.h" 34 13 24#
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((<=) (offset_min _BoolP_res_16_alloc_table res) (0)))
   /\
   (#"whole_program.jc" 607 12 448#
   ((#"whole_program.jc" 607 12 448#
    ((>=) (offset_max _BoolP_res_16_alloc_table res) (0)))
   /\ (#"whole_program.jc" 607 12 448# ((=) true true)))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 615 44 56# "expl:Integer cast"
       (Int32.of_int (0))))
      \/
      (Int32.(=) result (#"whole_program.jc" 616 45 62# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22)))))))
     /\
     (#"/home/work/workspace/self/verker/kstrtobool.h" 36 12 47#
     "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 617 45 62# "expl:Integer cast"
      (Int32.of_int (Int.(-_) (22))))) -> ((=) res res))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 632 10 249# "expl:Behavior disjointness check"
    (not
    ((((=) s_0_0 null) \/ (not (kstrtobool_fmt s_0_0 charP_charM_s_0_15))) /\
    (((<>) s_0_0 null) /\ (kstrtobool_fmt s_0_0 charP_charM_s_0_15))))) });
     (check {
     (#"whole_program.jc" 637 10 201# "expl:Behavior completeness check"
     ((((<>) s_0_0 null) /\ (kstrtobool_fmt s_0_0 charP_charM_s_0_15)) \/
     (((=) s_0_0 null) \/ (not (kstrtobool_fmt s_0_0 charP_charM_s_0_15)))))
     });
     (let __retres_0 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      try
       begin
       (if
       (#"/home/work/workspace/self/verker/kstrtobool.c" 5 5 7#
       (Bool.notb  ((<>)  s_0_0 (null  ) ) ))
       then
        begin
        (__retres_0 :=
         (#"whole_program.jc" 644 33 47# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) )));
         (raise (Goto_return_label_0_exc ())) end else ());
        (let _jessie_10 =
        (#"/home/work/workspace/self/verker/kstrtobool.c" 8 9 13#
        "expl:Integer cast"
        (Unsafe_int32_of_Unsafe_int8.cast 
         (acc  charP_charM_s_0_15
          (shift_  s_0_0
           (Unsafe_int32.to_int 
            (#"whole_program.jc" 649 52 64# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ) ) ) )) in
        (if
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 11 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (49))) ))
        ||
        (#"whole_program.jc" 649 14 84#
        ((#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 10 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (89))) ))
        ||
        (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
        (Unsafe_int32.(=)  _jessie_10
         (#"/home/work/workspace/self/verker/kstrtobool.c" 9 6 9#
         "expl:Integer cast" (Unsafe_int32.of_int (121))) ))))))
        then
         begin
         (let _jessie_259 =
         (#"whole_program.jc" 653 46 58# "expl:Integer cast"
         (Unsafe_enum__bool.of_int  (1) )) in
         (let _jessie_260 = res in
         (let _jessie_261 = (0) in
         (let _jessie_262 = _jessie_260 in
         (upd  _BoolP__BoolM_res_16 _jessie_262 _jessie_259 )))));
          begin
          (__retres_0 :=
           (#"whole_program.jc" 654 35 47# "expl:Integer cast"
           (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
          end end
        else
         (if
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 16 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (48))) ))
         ||
         (#"whole_program.jc" 649 14 84#
         ((#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 15 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
         ||
         (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
         (Unsafe_int32.(=)  _jessie_10
          (#"/home/work/workspace/self/verker/kstrtobool.c" 14 6 9#
          "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))))
         then
          begin
          (let _jessie_253 =
          (#"whole_program.jc" 661 46 58# "expl:Integer cast"
          (Unsafe_enum__bool.of_int  (0) )) in
          (let _jessie_254 = res in
          (let _jessie_255 = (0) in
          (let _jessie_256 = _jessie_254 in
          (upd  _BoolP__BoolM_res_16 _jessie_256 _jessie_253 )))));
           begin
           (__retres_0 :=
            (#"whole_program.jc" 662 35 47# "expl:Integer cast"
            (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ()))
           end end
         else
          begin
          (if
          (#"whole_program.jc" 649 14 84#
          ((#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
           (Unsafe_int32.(=)  _jessie_10
            (#"/home/work/workspace/self/verker/kstrtobool.c" 20 6 9#
            "expl:Integer cast" (Unsafe_int32.of_int (79))) ))
          ||
          (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
          (Unsafe_int32.(=)  _jessie_10
           (#"/home/work/workspace/self/verker/kstrtobool.c" 19 6 9#
           "expl:Integer cast" (Unsafe_int32.of_int (111))) ))))
          then
           try
            begin
            ();
             (let _jessie_8 =
             (#"/home/work/workspace/self/verker/kstrtobool.c" 21 10 14#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_0_15
               (shift_  s_0_0
                (Unsafe_int32.to_int 
                 (#"whole_program.jc" 670 57 69# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ) ) )) in
             (if
             (#"whole_program.jc" 670 19 89#
             ((#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 23 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (78))) ))
             ||
             (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
             (Unsafe_int32.(=)  _jessie_8
              (#"/home/work/workspace/self/verker/kstrtobool.c" 22 7 10#
              "expl:Integer cast" (Unsafe_int32.of_int (110))) ))))
             then
              begin
              (let _jessie_247 =
              (#"whole_program.jc" 673 51 63# "expl:Integer cast"
              (Unsafe_enum__bool.of_int  (1) )) in
              (let _jessie_248 = res in
              (let _jessie_249 = (0) in
              (let _jessie_250 = _jessie_248 in
              (upd  _BoolP__BoolM_res_16 _jessie_250 _jessie_247 )))));
               begin
               (__retres_0 :=
                (#"whole_program.jc" 674 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (0))));
                (raise (Goto_return_label_0_exc ())) end end
             else
              (if
              (#"whole_program.jc" 670 19 89#
              ((#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
               (Unsafe_int32.(=)  _jessie_8
                (#"/home/work/workspace/self/verker/kstrtobool.c" 27 7 10#
                "expl:Integer cast" (Unsafe_int32.of_int (70))) ))
              ||
              (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
              (Unsafe_int32.(=)  _jessie_8
               (#"/home/work/workspace/self/verker/kstrtobool.c" 26 7 10#
               "expl:Integer cast" (Unsafe_int32.of_int (102))) ))))
              then
               begin
               (let _jessie_241 =
               (#"whole_program.jc" 680 51 63# "expl:Integer cast"
               (Unsafe_enum__bool.of_int  (0) )) in
               (let _jessie_242 = res in
               (let _jessie_243 = (0) in
               (let _jessie_244 = _jessie_242 in
               (upd  _BoolP__BoolM_res_16 _jessie_244 _jessie_241 )))));
                begin
                (__retres_0 :=
                 (#"whole_program.jc" 681 40 52# "expl:Integer cast"
                 (Unsafe_int32.of_int (0))));
                 (raise (Goto_return_label_0_exc ())) end end
              else
               (if (true) then (raise (Goto_switch_1_break_exc ())) else ()))));
             (raise (Goto_switch_1_break_exc ())) end with
            Goto_switch_1_break_exc _jessie_5 ->
            'Switch_1_break: 'Switch_1_break: () end else ());
           (if (true) then (raise (Goto_switch_0_break_exc ())) else ()) end)));
        (raise (Goto_switch_0_break_exc ())) end with Goto_switch_0_break_exc
       _jessie_6 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        (__retres_0 :=
         (#"whole_program.jc" 698 30 44# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (22) ) ))) end end;
       (raise (Goto_return_label_0_exc ())) end with Goto_return_label_0_exc
      _jessie_7 ->
      'Return_label_0:
      'Return_label_0: begin (return := !__retres_0); (raise Return) end end);
     absurd  end with Return -> !return end)
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memchr_safety
#"/home/work/workspace/self/verker/memchr.c" 3 5 44# "expl:memchr, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_bit_uint8_of_Safe_bit_int32 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int32_of_Safe_bit_uint8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memchr #"/home/work/workspace/self/verker/memchr.c" 3 5 44#
  "expl:Function memchr, safety" =
  fun
   (s_1_0 : (pointer voidP)) (c_11_0 : Int32.t) (n : Uint64.t)
   (voidP_s_1_17_alloc_table : (alloc_table voidP)) (voidP_s_1_17_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP
   Uint8.t)) 
   requires {
   (((allocated voidP_s_1_17_alloc_table s_1_0) ->
     ((instanceof voidP_s_1_17_tag_table s_1_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_17_alloc_table s_1_0) i) /\
       ((<) i (offset_max voidP_s_1_17_alloc_table s_1_0))) ->
       (instanceof voidP_s_1_17_tag_table (shift s_1_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 705 12 763#
   ((#"/home/work/workspace/self/verker/memchr.h" 16 13 38#
    (instanceof voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n) (1))) then
    (((<=)
     (offset_min voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n) (1)))
    /\
    (forall __framac_tmp8 : int.
     ((((<=) (0) __framac_tmp8) /\
      ((<=) __framac_tmp8 (Int.(-) (Bit_uint64.to_int n) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_n = ref n in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_1 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (let _jessie_376 =
        (#"/home/work/workspace/self/verker/memchr.c" 5 26 27#
        (downcast_  voidP_s_1_17_tag_table s_1_0 (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memchr.c" 5 21 23#
        "expl:Pointer index bounds" true) }); _jessie_376 end));
        'Loop_8:
        loop
        invariant { (#"whole_program.jc" 831 6 2587# true) }
          variant { (#"/home/work/workspace/self/verker/memchr.c" 10 18 19#
            (Bit_uint64.to_int
            (#"/home/work/workspace/self/verker/memchr.c" 10 18 19#
            !mutable_n))) }
         begin
         any unit
         requires { true } reads { c_11_0, mutable_n, s_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/memchr.c" 9 20 70#
            (forall k : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
               (0))
              /\ ((same_block k !p_4) /\ ((<) (sub_pointer k !p_4) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 k)
              (#"whole_program.jc" 857 53 69# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n 'Init))
            (Bit_uint64.to_int !mutable_n))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
             (same_block !p_4
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 833 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n (at !mutable_n 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_1 :=
            (let _jessie_377 = !mutable_n in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/memchr.c" 12 8 16#
            "expl:Pointer index bounds" true) }); _jessie_377 end));
            begin
            (mutable_n :=
             (let _jessie_378 =
             (Safe_bit_uint64.(-%)  !mutable_n
              (#"whole_program.jc" 863 57 70# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 1)) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memchr.c" 12 8 16#
             "expl:Pointer index bounds" true) }); _jessie_378 end)); () end
           end;
            (if
            (#"/home/work/workspace/self/verker/memchr.c" 12 8 23#
            (Safe_bit_uint64.(<>)  !tmp_0_1
             (#"whole_program.jc" 866 38 51# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_0_exc ())));
            begin
            begin
            (tmp_0_0 :=
             (let _jessie_379 = !p_4 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memchr.c" 13 33 36#
             "expl:Pointer index bounds" true) }); _jessie_379 end));
             begin
             (p_4 :=
              (let _jessie_380 =
              (shift_typesafe  !p_4
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 871 48 60# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memchr.c" 13 33 36#
              "expl:Pointer index bounds" true) }); _jessie_380 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker/memchr.c" 13 6 36#
             (Safe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Safe_bit_uint8_of_Safe_bit_int32.cast_modulo  c_11_0 )) ))
              (#"/home/work/workspace/self/verker/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker/memchr.c" 13 32 36#
               "expl:Pointer dereference"
               (acc  voidP_s_1_17_alloc_table
                unsigned_charP_unsigned_charM_s_1_17 !tmp_0_0 )) )) ))
             then
              begin
              (__retres_1 :=
               (let _jessie_381 =
               (shift_typesafe  !p_4
                (Int.(-_) 
                 (Safe_bit_int32.to_int 
                  (#"whole_program.jc" 877 65 77# "expl:Integer cast"
                  (Safe_bit_int32.of_int_const 1)) ) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memchr.c" 14 3 26#
               "expl:Pointer index bounds" true) }); _jessie_381 end));
               (raise (Goto_return_label_1_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
        (raise (Goto_while_0_break_0_exc ())) end with
       Goto_while_0_break_0_exc _jessie_12 ->
       'While_0_break_0:
       'While_0_break_0:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n }
        ensures {
          (#"/home/work/workspace/self/verker/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n (#"whole_program.jc" 887 56 74#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end;
        (__retres_1 :=
         (let _jessie_382 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memchr.c" 18 1 20#
         "expl:Pointer index bounds" true) }); _jessie_382 end)) end end;
       (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
      _jessie_13 ->
      'Return_label_1:
      'Return_label_1:
      begin
      (return :=
       (let _jessie_383 = !__retres_1 in
       begin
       (assert {
       (#"whole_program.jc" 892 7 24# "expl:Pointer index bounds" true) });
        _jessie_383 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end))
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_memchr_behaviors
#"/home/work/workspace/self/verker/memchr.c" 3 5 44# "expl:memchr, behaviors"

  use Unsafe_bit_uint8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int32_of_Unsafe_bit_uint8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memchr_ensures_default
  #"/home/work/workspace/self/verker/memchr.c" 3 5 44#
  "expl:Function memchr, default behavior" =
  fun
   (s_1_0 : (pointer voidP)) (c_11_0 : Int32.t) (n : Uint64.t)
   (voidP_s_1_17_alloc_table : (alloc_table voidP)) (voidP_s_1_17_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP
   Uint8.t)) 
   requires {
   (((allocated voidP_s_1_17_alloc_table s_1_0) ->
     ((instanceof voidP_s_1_17_tag_table s_1_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_17_alloc_table s_1_0) i) /\
       ((<) i (offset_max voidP_s_1_17_alloc_table s_1_0))) ->
       (instanceof voidP_s_1_17_tag_table (shift s_1_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 705 12 763#
   ((#"/home/work/workspace/self/verker/memchr.h" 16 13 38#
    (instanceof voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n) (1))) then
    (((<=)
     (offset_min voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n) (1)))
    /\
    (forall __framac_tmp8 : int.
     ((((<=) (0) __framac_tmp8) /\
      ((<=) __framac_tmp8 (Int.(-) (Bit_uint64.to_int n) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_n = ref n in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 763 10 1961# "expl:Behavior disjointness check"
    (not
    ((exists p_0_0 : (pointer voidP).
      ((same_block (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       p_0_0)
      /\
      (((<=)
       (sub_pointer
       (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0_0) (0))
      /\
      ((same_block p_0_0
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n)))
      /\
      (((<)
       (sub_pointer p_0_0
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n))) (0))
      /\
      (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_17 p_0_0)
      (#"whole_program.jc" 777 42 58# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))))
    /\
    (forall p_2 : (pointer voidP).
     (((same_block (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       p_2)
      /\
      (((<=)
       (sub_pointer
       (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_2) (0))
      /\
      ((same_block p_2
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n)))
      /\
      ((<)
      (sub_pointer p_2
      (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      (Bit_uint64.to_int !mutable_n))) (0))))) ->
      (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p_2)
      (#"whole_program.jc" 791 43 59# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))) });
     (check {
     (#"whole_program.jc" 793 10 1792# "expl:Behavior completeness check"
     ((forall p_3 : (pointer voidP).
       (((same_block
         (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_3)
        /\
        (((<=)
         (sub_pointer
         (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_3) (0))
        /\
        ((same_block p_3
         (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
         (Bit_uint64.to_int !mutable_n)))
        /\
        ((<)
        (sub_pointer p_3
        (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
        (Bit_uint64.to_int !mutable_n))) (0))))) ->
        (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p_3)
        (#"whole_program.jc" 805 58 74# "expl:Integer cast"
        (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))
     \/
     (exists p_0_1 : (pointer voidP).
      ((same_block (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       p_0_1)
      /\
      (((<=)
       (sub_pointer
       (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0_1) (0))
      /\
      ((same_block p_0_1
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n)))
      /\
      (((<)
       (sub_pointer p_0_1
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int !mutable_n))) (0))
      /\
      (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_17 p_0_1)
      (#"whole_program.jc" 819 40 56# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))))) });
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_1 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_17_tag_table s_1_0 (unsigned_charP_tag  ) ));
        'Loop_5:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
             (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
             ((#"/home/work/workspace/self/verker/memchr.c" 6 20 26#
              (Bit_uint64.(<=) (#"whole_program.jc" 833 40 53#
              "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n))
             /\
             (#"/home/work/workspace/self/verker/memchr.c" 6 25 40#
             (Bit_uint64.(<=) !mutable_n (at !mutable_n 'Init))))))
            &&
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
             (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
              (same_block
              (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
              !p_4))
             /\
             (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
              ((<=)
              (sub_pointer
              (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
              !p_4) (0)))
             /\
             (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
             ((#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
              (same_block !p_4
              (shift
              (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
              (Bit_uint64.to_int (at !mutable_n 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
             ((<=)
             (sub_pointer !p_4
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n 'Init)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/memchr.c" 8 20 43#
             ((=)
             (sub_pointer !p_4
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
             (Int.(-) (Bit_uint64.to_int (at !mutable_n 'Init))
             (Bit_uint64.to_int !mutable_n))))
            &&
            (#"/home/work/workspace/self/verker/memchr.c" 9 20 70#
            (forall k : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
               (0))
              /\ ((same_block k !p_4) /\ ((<) (sub_pointer k !p_4) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 k)
              (#"whole_program.jc" 857 53 69# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           (tmp_0_1 := !mutable_n);
            begin
            (mutable_n :=
             (Unsafe_bit_uint64.(-%)  !mutable_n
              (#"whole_program.jc" 863 57 70# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0_1
             (#"whole_program.jc" 866 38 51# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_0_exc ())));
            begin
            begin
            (tmp_0_0 := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 871 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11_0 )) ))
              (#"/home/work/workspace/self/verker/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_17 !tmp_0_0 ) )) ))
             then
              begin
              (__retres_1 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 877 65 77# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Goto_return_label_1_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
        (raise (Goto_while_0_break_0_exc ())) end with
       Goto_while_0_break_0_exc _jessie_12 ->
       'While_0_break_0:
       'While_0_break_0:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memchr.c" 17 12 31#
        "expl:Assertion in line 17"
        (Bit_uint64.(=) !mutable_n (#"whole_program.jc" 887 56 74#
        "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) });
         () end; (__retres_1 := (null  )) end end;
       (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
      _jessie_13 ->
      'Return_label_1:
      'Return_label_1: begin (return := !__retres_1); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
  let memchr_ensures_found
  #"/home/work/workspace/self/verker/memchr.c" 3 5 44#
  "expl:Function memchr, behavior found" =
  fun
   (s_1_0 : (pointer voidP)) (c_11_0 : Int32.t) (n : Uint64.t)
   (voidP_s_1_17_alloc_table : (alloc_table voidP)) (voidP_s_1_17_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP
   Uint8.t)) 
   requires {
   ((exists p_0 : (pointer voidP).
     ((same_block (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      p_0)
     /\
     (((<=)
      (sub_pointer (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      p_0) (0))
     /\
     ((same_block p_0
      (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      (Bit_uint64.to_int n)))
     /\
     (((<)
      (sub_pointer p_0
      (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      (Bit_uint64.to_int n))) (0))
     /\
     (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_17 p_0)
     (#"whole_program.jc" 727 37 53# "expl:Integer cast"
     (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))))
   /\
   (((allocated voidP_s_1_17_alloc_table s_1_0) ->
     ((instanceof voidP_s_1_17_tag_table s_1_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_17_alloc_table s_1_0) i) /\
       ((<) i (offset_max voidP_s_1_17_alloc_table s_1_0))) ->
       (instanceof voidP_s_1_17_tag_table (shift s_1_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 705 12 763#
   ((#"/home/work/workspace/self/verker/memchr.h" 16 13 38#
    (instanceof voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n) (1))) then
    (((<=)
     (offset_min voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n) (1)))
    /\
    (forall __framac_tmp8 : int.
     ((((<=) (0) __framac_tmp8) /\
      ((<=) __framac_tmp8 (Int.(-) (Bit_uint64.to_int n) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
      "expl:Ensures clause" (same_block s_1_0 result))
     /\
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_1_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
      "expl:Ensures clause"
      (same_block result (shift s_1_0 (Bit_uint64.to_int n))))
     /\
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
      "expl:Ensures clause"
      ((<=) (sub_pointer result (shift s_1_0 (Bit_uint64.to_int n))) (0)))
     /\
     (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memchr.h" 22 15 77#
      "expl:Ensures clause"
      (forall p_1 : (pointer voidP).
       (((same_block
         (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_1)
        /\
        (((<=)
         (sub_pointer
         (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_1) (0))
        /\
        ((same_block p_1
         (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
        /\
        ((<)
        (sub_pointer p_1
        (downcast voidP_s_1_17_tag_table result unsigned_charP_tag)) (0)))))
        ->
        (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p_1)
        (#"whole_program.jc" 750 39 64# "expl:Integer cast"
        (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
     /\
     (#"/home/work/workspace/self/verker/memchr.h" 23 15 42#
     "expl:Ensures clause"
     (Bit_uint8.(=)
     (select unsigned_charP_unsigned_charM_s_1_17
     (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
     (#"whole_program.jc" 752 36 61# "expl:Integer cast"
     (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))))))))))) } diverges 
   ->
   (let mutable_n = ref n in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_1 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_17_tag_table s_1_0 (unsigned_charP_tag  ) ));
        'Loop_6:
        loop
        invariant { (#"whole_program.jc" 831 6 2587# true) } 
         begin
         any unit
         requires { true } reads { c_11_0, mutable_n, s_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/memchr.c" 9 20 70#
            (forall k : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
               (0))
              /\ ((same_block k !p_4) /\ ((<) (sub_pointer k !p_4) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 k)
              (#"whole_program.jc" 857 53 69# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n 'Init))
            (Bit_uint64.to_int !mutable_n))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
             (same_block !p_4
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 833 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n (at !mutable_n 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_1 := !mutable_n);
            begin
            (mutable_n :=
             (Unsafe_bit_uint64.(-%)  !mutable_n
              (#"whole_program.jc" 863 57 70# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0_1
             (#"whole_program.jc" 866 38 51# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_0_exc ())));
            begin
            begin
            (tmp_0_0 := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 871 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11_0 )) ))
              (#"/home/work/workspace/self/verker/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_17 !tmp_0_0 ) )) ))
             then
              begin
              (__retres_1 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 877 65 77# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Goto_return_label_1_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
        (raise (Goto_while_0_break_0_exc ())) end with
       Goto_while_0_break_0_exc _jessie_12 ->
       'While_0_break_0:
       'While_0_break_0:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n }
        ensures {
          (#"/home/work/workspace/self/verker/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n (#"whole_program.jc" 887 56 74#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end; (__retres_1 := (null  )) end end;
       (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
      _jessie_13 ->
      'Return_label_1:
      'Return_label_1: begin (return := !__retres_1); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
  let memchr_ensures_not_exists
  #"/home/work/workspace/self/verker/memchr.c" 3 5 44#
  "expl:Function memchr, behavior not_exists" =
  fun
   (s_1_0 : (pointer voidP)) (c_11_0 : Int32.t) (n : Uint64.t)
   (voidP_s_1_17_alloc_table : (alloc_table voidP)) (voidP_s_1_17_tag_table :
   (tag_table voidP)) (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP
   Uint8.t)) 
   requires {
   ((forall p : (pointer voidP).
     (((same_block (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       p)
      /\
      (((<=)
       (sub_pointer
       (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p) (0))
      /\
      ((same_block p
       (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
       (Bit_uint64.to_int n)))
      /\
      ((<)
      (sub_pointer p
      (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
      (Bit_uint64.to_int n))) (0))))) ->
      (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p)
      (#"whole_program.jc" 760 35 51# "expl:Integer cast"
      (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))
   /\
   (((allocated voidP_s_1_17_alloc_table s_1_0) ->
     ((instanceof voidP_s_1_17_tag_table s_1_0 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_1_17_alloc_table s_1_0) i) /\
       ((<) i (offset_max voidP_s_1_17_alloc_table s_1_0))) ->
       (instanceof voidP_s_1_17_tag_table (shift s_1_0 i) voidP_tag)))))
   /\
   (#"whole_program.jc" 705 12 763#
   ((#"/home/work/workspace/self/verker/memchr.h" 16 13 38#
    (instanceof voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memchr.h" 17 13 37#
   (if ((<=) (0) (Int.(-) (Bit_uint64.to_int n) (1))) then
    (((<=)
     (offset_min voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_s_1_17_alloc_table
     (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
     (Int.(-) (Bit_uint64.to_int n) (1)))
    /\
    (forall __framac_tmp8 : int.
     ((((<=) (0) __framac_tmp8) /\
      ((<=) __framac_tmp8 (Int.(-) (Bit_uint64.to_int n) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memchr.h" 26 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_n = ref n in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_1 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_4 :=
        (downcast_  voidP_s_1_17_tag_table s_1_0 (unsigned_charP_tag  ) ));
        'Loop_7:
        loop
        invariant { (#"whole_program.jc" 831 6 2587# true) } 
         begin
         any unit
         requires { true } reads { c_11_0, mutable_n, s_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/memchr.c" 9 20 70#
            (forall k : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) k)
               (0))
              /\ ((same_block k !p_4) /\ ((<) (sub_pointer k !p_4) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 k)
              (#"whole_program.jc" 857 53 69# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 8 20 43#
            ((=)
            (sub_pointer !p_4
            (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
            (Int.(-) (Bit_uint64.to_int (at !mutable_n 'Init))
            (Bit_uint64.to_int !mutable_n))))
           /\
           ((#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             (same_block
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 20 32#
             ((<=)
             (sub_pointer
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) !p_4)
             (0)))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 20 56#
            ((#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
             (same_block !p_4
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Bit_uint64.to_int (at !mutable_n 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memchr.c" 7 31 56#
            ((<=)
            (sub_pointer !p_4
            (shift (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
            (Bit_uint64.to_int (at !mutable_n 'Init)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           (#"/home/work/workspace/self/verker/memchr.c" 6 20 40#
           ((#"/home/work/workspace/self/verker/memchr.c" 6 20 26#
            (Bit_uint64.(<=) (#"whole_program.jc" 833 40 53#
            "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_n))
           /\
           (#"/home/work/workspace/self/verker/memchr.c" 6 25 40#
           (Bit_uint64.(<=) !mutable_n (at !mutable_n 'Init))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_1 := !mutable_n);
            begin
            (mutable_n :=
             (Unsafe_bit_uint64.(-%)  !mutable_n
              (#"whole_program.jc" 863 57 70# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/memchr.c" 12 8 23#
            (Unsafe_bit_uint64.(<>)  !tmp_0_1
             (#"whole_program.jc" 866 38 51# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_0_exc ())));
            begin
            begin
            (tmp_0_0 := !p_4);
             begin
             (p_4 :=
              (shift_  !p_4
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 871 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memchr.c" 13 6 36#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (#"/home/work/workspace/self/verker/memchr.c" 13 6 28#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int32.cast_modulo  c_11_0 )) ))
              (#"/home/work/workspace/self/verker/memchr.c" 13 32 36#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast 
               (acc  unsigned_charP_unsigned_charM_s_1_17 !tmp_0_0 ) )) ))
             then
              begin
              (__retres_1 :=
               (shift_  !p_4
                (Int.(-_) 
                 (Unsafe_bit_int32.to_int 
                  (#"whole_program.jc" 877 65 77# "expl:Integer cast"
                  (Unsafe_bit_int32.of_int_const 1)) ) ) ));
               (raise (Goto_return_label_1_exc ())) end else ()) end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_15 -> () end end end;
        (raise (Goto_while_0_break_0_exc ())) end with
       Goto_while_0_break_0_exc _jessie_12 ->
       'While_0_break_0:
       'While_0_break_0:
       begin
       ();
        begin
        any unit
        requires { true } reads { mutable_n }
        ensures {
          (#"/home/work/workspace/self/verker/memchr.c" 17 12 31#
          (Bit_uint64.(=) !mutable_n (#"whole_program.jc" 887 56 74#
          "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
         () end; (__retres_1 := (null  )) end end;
       (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
      _jessie_13 ->
      'Return_label_1:
      'Return_label_1: begin (return := !__retres_1); (raise Return) end end))));
     absurd  end with Return -> !return end))
  
end

module Function_memscan_safety
#"/home/work/workspace/self/verker/memscan.c" 3 5 45# "expl:memscan, safety"

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_uint8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memscan #"/home/work/workspace/self/verker/memscan.c" 3 5 45#
  "expl:Function memscan, safety" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_1 : Uint64.t)
   (voidP_addr_27_alloc_table : (alloc_table voidP)) (voidP_addr_27_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_27 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_addr_27_alloc_table addr) ->
     ((instanceof voidP_addr_27_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_27_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_27_alloc_table addr))) ->
       (instanceof voidP_addr_27_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1424 12 784#
   ((#"/home/work/workspace/self/verker/memscan.h" 16 13 41#
    (instanceof voidP_addr_27_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_1) (1))) then
    (((<=)
     (offset_min voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_1) (1)))
    /\
    (forall __framac_tmp15 : int.
     ((((<=) (0) __framac_tmp15) /\
      ((<=) __framac_tmp15 (Int.(-) (Uint64.to_int size_1) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_size_1 = ref size_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (let _jessie_580 =
        (#"/home/work/workspace/self/verker/memscan.c" 5 20 24#
        (downcast_  voidP_addr_27_tag_table addr (unsigned_charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memscan.c" 5 15 17#
        "expl:Pointer index bounds" true) }); _jessie_580 end));
        'Loop_26:
        loop
        invariant { (#"whole_program.jc" 1502 6 2564# true) }
          variant { (#"/home/work/workspace/self/verker/memscan.c" 13 18 22#
            (Uint64.to_int
            (#"/home/work/workspace/self/verker/memscan.c" 13 18 22#
            !mutable_size_1))) }
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_1 }
         ensures {
           ((#"/home/work/workspace/self/verker/memscan.c" 11 20 113#
            (forall i_11 : int.
             ((((<=) (0) i_11) /\
              ((<) i_11
              (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
              (Uint64.to_int !mutable_size_1)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_1 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
            (Uint64.to_int !mutable_size_1))))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 1504 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_1))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_1 (at !mutable_size_1 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/memscan.c" 15 8 12#
           (Safe_uint64.(<>)  !mutable_size_1
            (#"whole_program.jc" 1537 49 62# "expl:Integer cast"
            (Safe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_4_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker/memscan.c" 16 6 13#
            (Safe_int32.(=) 
             (#"/home/work/workspace/self/verker/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Safe_int32_of_Safe_uint8.cast 
              (#"/home/work/workspace/self/verker/memscan.c" 16 6 8#
              "expl:Pointer dereference"
              (acc  voidP_addr_27_alloc_table
               unsigned_charP_unsigned_charM_addr_27 !p_0_2 )) )) c_12 ))
            then
             begin
             (__retres_3 :=
              (let _jessie_581 = !p_0_2 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memscan.c" 17 3 20#
              "expl:Pointer index bounds" true) }); _jessie_581 end));
              (raise (Goto_return_label_2_exc ())) end else ());
             begin
             (p_0_2 :=
              (let _jessie_582 =
              (shift_typesafe  !p_0_2
               (Safe_int32.to_int 
                (#"whole_program.jc" 1546 49 61# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memscan.c" 18 2 5#
              "expl:Pointer index bounds" true) }); _jessie_582 end));
              (mutable_size_1 :=
               (let _jessie_583 =
               (Safe_uint64.(-)  !mutable_size_1
                (#"whole_program.jc" 1548 58 71# "expl:Integer cast"
                (Safe_uint64.of_int (1))) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memscan.c" 19 2 8#
               "expl:Pointer index bounds" true) }); _jessie_583 end)) end
            end end; (raise (Loop_continue_exc ())) end with
           Loop_continue_exc _jessie_31 -> () end end end;
        (raise (Goto_while_0_break_4_exc ())) end with
       Goto_while_0_break_4_exc _jessie_28 ->
       'While_0_break_4:
       'While_0_break_4:
       begin
       ();
        (__retres_3 :=
         (let _jessie_584 = !p_0_2 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memscan.c" 21 1 18#
         "expl:Pointer index bounds" true) }); _jessie_584 end)) end end;
       (raise (Goto_return_label_2_exc ())) end with Goto_return_label_2_exc
      _jessie_29 ->
      'Return_label_2:
      'Return_label_2:
      begin
      (return :=
       (let _jessie_585 = !__retres_3 in
       begin
       (assert {
       (#"whole_program.jc" 1555 7 24# "expl:Pointer index bounds" true) });
        _jessie_585 end)); (raise Return) end end)); absurd  end with Return
    -> !return end))
  
end

module Function_memscan_behaviors
#"/home/work/workspace/self/verker/memscan.c" 3 5 45#
"expl:memscan, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_uint8 
  
  use Unsafe_int32 
  
  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use why3.Bool.Bool 
  
  let memscan_ensures_default
  #"/home/work/workspace/self/verker/memscan.c" 3 5 45#
  "expl:Function memscan, default behavior" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_1 : Uint64.t)
   (voidP_addr_27_alloc_table : (alloc_table voidP)) (voidP_addr_27_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_27 : (memory
   voidP Uint8.t)) 
   requires {
   (((allocated voidP_addr_27_alloc_table addr) ->
     ((instanceof voidP_addr_27_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_27_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_27_alloc_table addr))) ->
       (instanceof voidP_addr_27_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1424 12 784#
   ((#"/home/work/workspace/self/verker/memscan.h" 16 13 41#
    (instanceof voidP_addr_27_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_1) (1))) then
    (((<=)
     (offset_min voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_1) (1)))
    /\
    (forall __framac_tmp15 : int.
     ((((<=) (0) __framac_tmp15) /\
      ((<=) __framac_tmp15 (Int.(-) (Uint64.to_int size_1) (1)))) ->
      ((=) true true))))) else ((=) true true)))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
      "expl:Ensures clause" (same_block addr result))
     /\
     (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
      "expl:Ensures clause" (same_block addr result))
     /\
     (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
      "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
     /\
     (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
      "expl:Ensures clause"
      (same_block result (shift addr (Uint64.to_int size_1))))
     /\
     (#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
     "expl:Ensures clause"
     ((<=) (sub_pointer result (shift addr (Uint64.to_int size_1))) (0)))))))))))))
     } diverges  ->
   (let mutable_size_1 = ref size_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 1472 10 814# "expl:Behavior disjointness check"
    (not
    ((exists i_8_1 : int.
      (((<=) (0) i_8_1) /\
      (((<) i_8_1 (Uint64.to_int !mutable_size_1)) /\
      ((=)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_27
      (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
      i_8_1))) (Int32.to_int c_12)))))
    /\
    (forall i_7_1 : int.
     ((((<=) (0) i_7_1) /\ ((<) i_7_1 (Uint64.to_int !mutable_size_1))) ->
      ((<>)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_27
      (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
      i_7_1))) (Int32.to_int c_12))))))) });
     (check {
     (#"whole_program.jc" 1485 10 694# "expl:Behavior completeness check"
     ((forall i_7_2 : int.
       ((((<=) (0) i_7_2) /\ ((<) i_7_2 (Uint64.to_int !mutable_size_1))) ->
        ((<>)
        (Uint8.to_int
        (select unsigned_charP_unsigned_charM_addr_27
        (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
        i_7_2))) (Int32.to_int c_12))))
     \/
     (exists i_8_2 : int.
      (((<=) (0) i_8_2) /\
      (((<) i_8_2 (Uint64.to_int !mutable_size_1)) /\
      ((=)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_27
      (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
      i_8_2))) (Int32.to_int c_12))))))) });
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_27_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_23:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
             (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
             ((#"/home/work/workspace/self/verker/memscan.c" 7 20 29#
              (Uint64.(<=) (#"whole_program.jc" 1504 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !mutable_size_1))
             /\
             (#"/home/work/workspace/self/verker/memscan.c" 7 25 46#
             (Uint64.(<=) !mutable_size_1 (at !mutable_size_1 'Init))))))
            &&
            ((#"/home/work/workspace/self/verker/memscan.c" 8 20 58#
             ((=)
             (sub_pointer !p_0_2
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
             (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
             (Uint64.to_int !mutable_size_1))))
            &&
            ((#"/home/work/workspace/self/verker/memscan.c" 9 20 59#
             (same_block !p_0_2
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)))
            &&
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
             (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
              (same_block
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              !p_0_2))
             /\
             (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
              ((<=)
              (sub_pointer
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              !p_0_2) (0)))
             /\
             (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
             ((#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
              (same_block !p_0_2
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              (Uint64.to_int (at !mutable_size_1 'Init)))))
             /\
             (#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
             ((<=)
             (sub_pointer !p_0_2
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_1 'Init)))) (0))))))))))
            &&
            (#"/home/work/workspace/self/verker/memscan.c" 11 20 113#
            (forall i_11 : int.
             ((((<=) (0) i_11) /\
              ((<) i_11
              (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
              (Uint64.to_int !mutable_size_1)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_1
            (#"whole_program.jc" 1537 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_4_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_27 !p_0_2 ) )) c_12 ))
            then
             begin
             (__retres_3 := !p_0_2); (raise (Goto_return_label_2_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 1546 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_1 :=
               (Unsafe_uint64.(-)  !mutable_size_1
                (#"whole_program.jc" 1548 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end;
        (raise (Goto_while_0_break_4_exc ())) end with
       Goto_while_0_break_4_exc _jessie_28 ->
       'While_0_break_4:
       'While_0_break_4: begin (); (__retres_3 := !p_0_2) end end;
       (raise (Goto_return_label_2_exc ())) end with Goto_return_label_2_exc
      _jessie_29 ->
      'Return_label_2:
      'Return_label_2: begin (return := !__retres_3); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let memscan_ensures_found
  #"/home/work/workspace/self/verker/memscan.c" 3 5 45#
  "expl:Function memscan, behavior found" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_1 : Uint64.t)
   (voidP_addr_27_alloc_table : (alloc_table voidP)) (voidP_addr_27_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_27 : (memory
   voidP Uint8.t)) 
   requires {
   ((exists i_8_0 : int.
     (((<=) (0) i_8_0) /\
     (((<) i_8_0 (Uint64.to_int size_1)) /\
     ((=)
     (Uint8.to_int
     (select unsigned_charP_unsigned_charM_addr_27
     (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag) i_8_0)))
     (Int32.to_int c_12)))))
   /\
   (((allocated voidP_addr_27_alloc_table addr) ->
     ((instanceof voidP_addr_27_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_27_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_27_alloc_table addr))) ->
       (instanceof voidP_addr_27_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1424 12 784#
   ((#"/home/work/workspace/self/verker/memscan.h" 16 13 41#
    (instanceof voidP_addr_27_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_1) (1))) then
    (((<=)
     (offset_min voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_1) (1)))
    /\
    (forall __framac_tmp15 : int.
     ((((<=) (0) __framac_tmp15) /\
      ((<=) __framac_tmp15 (Int.(-) (Uint64.to_int size_1) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memscan.h" 23 15 199#
     "expl:Ensures clause"
     (exists i_9_0 : int.
      (((<=) (0) i_9_0) /\
      (((<) i_9_0 (Uint64.to_int size_1)) /\
      ((forall j_1 : int.
        ((((<=) (0) j_1) /\ ((<) j_1 i_9_0)) ->
         ((<>)
         (Uint8.to_int
         (select unsigned_charP_unsigned_charM_addr_27
         (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
         j_1))) (Int32.to_int c_12))))
      /\
      (((=)
       (Uint8.to_int
       (select unsigned_charP_unsigned_charM_addr_27
       (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
       i_9_0))) (Int32.to_int c_12))
      /\ ((=) result (shift addr i_9_0))))))))) } diverges  ->
   (let mutable_size_1 = ref size_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_27_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_24:
        loop
        invariant { (#"whole_program.jc" 1502 6 2564# true) } 
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_1 }
         ensures {
           ((#"/home/work/workspace/self/verker/memscan.c" 11 20 113#
            (forall i_11 : int.
             ((((<=) (0) i_11) /\
              ((<) i_11
              (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
              (Uint64.to_int !mutable_size_1)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_1 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
            (Uint64.to_int !mutable_size_1))))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 1504 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_1))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_1 (at !mutable_size_1 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_1
            (#"whole_program.jc" 1537 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_4_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_27 !p_0_2 ) )) c_12 ))
            then
             begin
             (__retres_3 := !p_0_2); (raise (Goto_return_label_2_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 1546 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_1 :=
               (Unsafe_uint64.(-)  !mutable_size_1
                (#"whole_program.jc" 1548 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end;
        (raise (Goto_while_0_break_4_exc ())) end with
       Goto_while_0_break_4_exc _jessie_28 ->
       'While_0_break_4:
       'While_0_break_4: begin (); (__retres_3 := !p_0_2) end end;
       (raise (Goto_return_label_2_exc ())) end with Goto_return_label_2_exc
      _jessie_29 ->
      'Return_label_2:
      'Return_label_2: begin (return := !__retres_3); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let memscan_ensures_not_exists
  #"/home/work/workspace/self/verker/memscan.c" 3 5 45#
  "expl:Function memscan, behavior not_exists" =
  fun
   (addr : (pointer voidP)) (c_12 : Int32.t) (size_1 : Uint64.t)
   (voidP_addr_27_alloc_table : (alloc_table voidP)) (voidP_addr_27_tag_table
   : (tag_table voidP)) (unsigned_charP_unsigned_charM_addr_27 : (memory
   voidP Uint8.t)) 
   requires {
   ((forall i_7_0 : int.
     ((((<=) (0) i_7_0) /\ ((<) i_7_0 (Uint64.to_int size_1))) ->
      ((<>)
      (Uint8.to_int
      (select unsigned_charP_unsigned_charM_addr_27
      (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
      i_7_0))) (Int32.to_int c_12))))
   /\
   (((allocated voidP_addr_27_alloc_table addr) ->
     ((instanceof voidP_addr_27_tag_table addr voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_addr_27_alloc_table addr) i) /\
       ((<) i (offset_max voidP_addr_27_alloc_table addr))) ->
       (instanceof voidP_addr_27_tag_table (shift addr i) voidP_tag)))))
   /\
   (#"whole_program.jc" 1424 12 784#
   ((#"/home/work/workspace/self/verker/memscan.h" 16 13 41#
    (instanceof voidP_addr_27_tag_table addr unsigned_charP_tag))
   /\
   (#"/home/work/workspace/self/verker/memscan.h" 17 13 43#
   (if ((<=) (0) (Int.(-) (Uint64.to_int size_1) (1))) then
    (((<=)
     (offset_min voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)) (0))
    /\
    (((>=)
     (offset_max voidP_addr_27_alloc_table
     (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
     (Int.(-) (Uint64.to_int size_1) (1)))
    /\
    (forall __framac_tmp15 : int.
     ((((<=) (0) __framac_tmp15) /\
      ((<=) __framac_tmp15 (Int.(-) (Uint64.to_int size_1) (1)))) ->
      ((=) true true))))) else ((=) true true))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memscan.h" 29 15 37#
     "expl:Ensures clause" ((=) result (shift addr (Uint64.to_int size_1)))))
     } diverges  ->
   (let mutable_size_1 = ref size_1 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let p_0_2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_3 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (p_0_2 :=
        (downcast_  voidP_addr_27_tag_table addr (unsigned_charP_tag  ) ));
        'Loop_25:
        loop
        invariant { (#"whole_program.jc" 1502 6 2564# true) } 
         begin
         any unit
         requires { true } reads { addr, c_12, mutable_size_1 }
         ensures {
           ((#"/home/work/workspace/self/verker/memscan.c" 11 20 113#
            (forall i_11 : int.
             ((((<=) (0) i_11) /\
              ((<) i_11
              (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
              (Uint64.to_int !mutable_size_1)))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_11))) (Int32.to_int c_12)))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             (same_block
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 20 35#
             ((<=)
             (sub_pointer
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             !p_0_2) (0)))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 20 65#
            ((#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
             (same_block !p_0_2
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             (Uint64.to_int (at !mutable_size_1 'Init)))))
            /\
            (#"/home/work/workspace/self/verker/memscan.c" 10 34 65#
            ((<=)
            (sub_pointer !p_0_2
            (shift (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
            (Uint64.to_int (at !mutable_size_1 'Init)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 9 20 59#
            (same_block !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)))
           /\
           ((#"/home/work/workspace/self/verker/memscan.c" 8 20 58#
            ((=)
            (sub_pointer !p_0_2
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int (at !mutable_size_1 'Init))
            (Uint64.to_int !mutable_size_1))))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           (#"/home/work/workspace/self/verker/memscan.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/memscan.c" 7 20 29#
            (Uint64.(<=) (#"whole_program.jc" 1504 40 53# "expl:Integer cast"
            (Uint64.of_int (0))) !mutable_size_1))
           /\
           (#"/home/work/workspace/self/verker/memscan.c" 7 25 46#
           (Uint64.(<=) !mutable_size_1 (at !mutable_size_1 'Init)))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/memscan.c" 15 8 12#
           (Unsafe_uint64.(<>)  !mutable_size_1
            (#"whole_program.jc" 1537 49 62# "expl:Integer cast"
            (Unsafe_uint64.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_4_exc ())));
            begin
            (if
            (#"/home/work/workspace/self/verker/memscan.c" 16 6 13#
            (Unsafe_int32.(=) 
             (#"/home/work/workspace/self/verker/memscan.c" 16 6 8#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_uint8.cast 
              (acc  unsigned_charP_unsigned_charM_addr_27 !p_0_2 ) )) c_12 ))
            then
             begin
             (__retres_3 := !p_0_2); (raise (Goto_return_label_2_exc ())) end
            else ());
             begin
             (p_0_2 :=
              (shift_  !p_0_2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 1546 49 61# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (mutable_size_1 :=
               (Unsafe_uint64.(-)  !mutable_size_1
                (#"whole_program.jc" 1548 58 71# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_31 -> () end end end;
        (raise (Goto_while_0_break_4_exc ())) end with
       Goto_while_0_break_4_exc _jessie_28 ->
       'While_0_break_4:
       'While_0_break_4: begin (); (__retres_3 := !p_0_2) end end;
       (raise (Goto_return_label_2_exc ())) end with Goto_return_label_2_exc
      _jessie_29 ->
      'Return_label_2:
      'Return_label_2: begin (return := !__retres_3); (raise Return) end end));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_Strlen

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate valid_str (s_5 : (pointer voidP)) (voidP_s_5_31_alloc_table_at_L
  : (alloc_table voidP)) (charP_charM_s_5_31_at_L : (memory voidP Int8.t))
  =
     (exists n_1 : Uint64.t.
      ((Int8.(=)
       (select charP_charM_s_5_31_at_L (shift s_5 (Uint64.to_int n_1)))
       (#"whole_program.jc" 1660 44 55# "expl:Integer cast" (Int8.of_int
       (0))))
      /\
      (if ((<=) (0) (Uint64.to_int n_1)) then
       (((<=) (offset_min voidP_s_5_31_alloc_table_at_L s_5) (0)) /\
       (((>=) (offset_max voidP_s_5_31_alloc_table_at_L s_5)
        (Uint64.to_int n_1))
       /\
       (forall __framac_tmp17 : int.
        ((((<=) (0) __framac_tmp17) /\
         ((<=) __framac_tmp17 (Uint64.to_int n_1))) -> ((=) true true)))))
       else ((=) true true))))
  
  
  lemma Valid_str_shift1
  #"/home/work/workspace/self/verker/strlen.h" 12 7 102#
  "expl:Lemma valid_str_shift1" :
  (forall voidP_s_6_154_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_6_154_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 12 7 102#
    (forall s_6_0 : (pointer voidP).
     (((Int8.(<>) (select charP_charM_s_6_154_at_L s_6_0)
       (#"whole_program.jc" 1674 30 41# "expl:Integer cast" (Int8.of_int
       (0))))
      /\
      (valid_str s_6_0 voidP_s_6_154_alloc_table_at_L
      charP_charM_s_6_154_at_L)) ->
      (valid_str (shift s_6_0 (1)) voidP_s_6_154_alloc_table_at_L
      charP_charM_s_6_154_at_L))))))
  
  lemma Valid_str_strend
  #"/home/work/workspace/self/verker/strlen.h" 18 7 87#
  "expl:Lemma valid_str_strend" :
  (forall voidP_s_7_155_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_7_155_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 18 7 87#
    (forall s_7_0 : (pointer voidP).
     (((((<=) (offset_min voidP_s_7_155_alloc_table_at_L s_7_0) (0)) /\
       (((>=) (offset_max voidP_s_7_155_alloc_table_at_L s_7_0) (0)) /\
       ((=) true true)))
      /\
      (Int8.(=) (select charP_charM_s_7_155_at_L s_7_0)
      (#"whole_program.jc" 1682 31 42# "expl:Integer cast" (Int8.of_int
      (0))))) ->
      (valid_str s_7_0 voidP_s_7_155_alloc_table_at_L
      charP_charM_s_7_155_at_L))))))
  
  function strlen (s_8 : (pointer voidP)) (charP_charM_s_8_32_at_L : (memory
  voidP Int8.t)) : Uint64.t
  =
     (if
      (Int8.(=) (select charP_charM_s_8_32_at_L (shift s_8 (0)))
      (#"whole_program.jc" 1686 30 41# "expl:Integer cast" (Int8.of_int
      (0)))) then (#"whole_program.jc" 1686 48 61# "expl:Integer cast"
      (Uint64.of_int (0))) else (#"whole_program.jc" 1686 67 255#
      "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_8 (1)) charP_charM_s_8_32_at_L))))))
  
  
  lemma Strlen_before_null
  #"/home/work/workspace/self/verker/strlen.h" 26 7 106#
  "expl:Lemma strlen_before_null" :
  (forall voidP_s_9_156_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_9_156_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 26 7 106#
    (forall s_9_0 : (pointer voidP).
     (forall i_10_0 : int.
      (((valid_str s_9_0 voidP_s_9_156_alloc_table_at_L
        charP_charM_s_9_156_at_L)
       /\
       (((<=) (0) i_10_0) /\
       ((<) i_10_0 (Uint64.to_int (strlen s_9_0 charP_charM_s_9_156_at_L)))))
       ->
       (Int8.(<>) (select charP_charM_s_9_156_at_L (shift s_9_0 i_10_0))
       (#"whole_program.jc" 1695 41 52# "expl:Integer cast" (Int8.of_int
       (0))))))))))
  
  lemma Strlen_at_null #"/home/work/workspace/self/verker/strlen.h" 31 7 71#
  "expl:Lemma strlen_at_null" :
  (forall voidP_s_10_157_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_10_157_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 31 7 71#
    (forall s_10_0 : (pointer voidP).
     ((valid_str s_10_0 voidP_s_10_157_alloc_table_at_L
      charP_charM_s_10_157_at_L) ->
      (Int8.(=)
      (select charP_charM_s_10_157_at_L
      (shift s_10_0
      (Uint64.to_int (strlen s_10_0 charP_charM_s_10_157_at_L))))
      (#"whole_program.jc" 1700 64 75# "expl:Integer cast" (Int8.of_int
      (0)))))))))
  
  lemma Strlen_shift #"/home/work/workspace/self/verker/strlen.h" 35 7 125#
  "expl:Lemma strlen_shift" :
  (forall voidP_s_11_158_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_11_158_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 35 7 125#
    (forall s_11_0 : (pointer voidP).
     (forall i_11_0 : Uint64.t.
      (((valid_str s_11_0 voidP_s_11_158_alloc_table_at_L
        charP_charM_s_11_158_at_L)
       /\ (Uint64.(<=) i_11_0 (strlen s_11_0 charP_charM_s_11_158_at_L))) ->
       ((=)
       (Uint64.to_int
       (strlen (shift s_11_0 (Uint64.to_int i_11_0))
       charP_charM_s_11_158_at_L))
       (Int.(-) (Uint64.to_int (strlen s_11_0 charP_charM_s_11_158_at_L))
       (Uint64.to_int i_11_0)))))))))
  
  lemma Strlen_shift_ex
  #"/home/work/workspace/self/verker/strlen.h" 41 7 126#
  "expl:Lemma strlen_shift_ex" :
  (forall voidP_s_12_159_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_12_159_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 41 7 126#
    (forall s_12_0 : (pointer voidP).
     (forall i_12 : Uint64.t.
      (((valid_str s_12_0 voidP_s_12_159_alloc_table_at_L
        charP_charM_s_12_159_at_L)
       /\
       ((Uint64.(<) (#"whole_program.jc" 1712 42 55# "expl:Integer cast"
        (Uint64.of_int (0))) i_12)
       /\ (Uint64.(<=) i_12 (strlen s_12_0 charP_charM_s_12_159_at_L)))) ->
       (Uint64.(<)
       (strlen (shift s_12_0 (Uint64.to_int i_12)) charP_charM_s_12_159_at_L)
       (strlen s_12_0 charP_charM_s_12_159_at_L))))))))
  
  lemma Strlen_shift1 #"/home/work/workspace/self/verker/strlen.h" 47 7 103#
  "expl:Lemma strlen_shift1" :
  (forall voidP_s_13_160_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_13_160_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 47 7 103#
    (forall s_13_0 : (pointer voidP).
     (((valid_str s_13_0 voidP_s_13_160_alloc_table_at_L
       charP_charM_s_13_160_at_L)
      /\
      (Int8.(<>) (select charP_charM_s_13_160_at_L s_13_0)
      (#"whole_program.jc" 1718 53 64# "expl:Integer cast" (Int8.of_int
      (0))))) ->
      ((=) (Uint64.to_int (strlen s_13_0 charP_charM_s_13_160_at_L))
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_13_0 (1)) charP_charM_s_13_160_at_L)))))))))
  
  lemma Strlen_pointers
  #"/home/work/workspace/self/verker/strlen.h" 52 7 254#
  "expl:Lemma strlen_pointers" :
  (forall voidP_s_14_161_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_14_161_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 52 7 254#
    (forall s_14 : (pointer voidP).
     (forall sc : (pointer voidP).
      (((valid_str s_14 voidP_s_14_161_alloc_table_at_L
        charP_charM_s_14_161_at_L)
       /\
       ((valid_str sc voidP_s_14_161_alloc_table_at_L
        charP_charM_s_14_161_at_L)
       /\
       ((same_block s_14 sc) /\
       ((same_block s_14 sc) /\
       (((<=) (sub_pointer s_14 sc) (0)) /\
       (forall i_13 : int.
        ((((<=) (0) i_13) /\ ((<=) i_13 (sub_pointer sc s_14))) ->
         (Int8.(<>) (select charP_charM_s_14_161_at_L (shift s_14 i_13))
         (#"whole_program.jc" 1731 47 58# "expl:Integer cast" (Int8.of_int
         (0))))))))))) ->
       (Uint64.(<=) (strlen sc charP_charM_s_14_161_at_L)
       (strlen s_14 charP_charM_s_14_161_at_L))))))))
  
  lemma Strlen_main #"/home/work/workspace/self/verker/strlen.h" 61 7 165#
  "expl:Lemma strlen_main" :
  (forall voidP_s_15_163_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_15_163_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 61 7 165#
    (forall s_15 : (pointer voidP).
     (forall n_2_0 : Uint64.t.
      (((valid_str s_15 voidP_s_15_163_alloc_table_at_L
        charP_charM_s_15_163_at_L)
       /\
       ((Int8.(=)
        (select charP_charM_s_15_163_at_L (shift s_15 (Uint64.to_int n_2_0)))
        (#"whole_program.jc" 1738 56 67# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       (forall i_14 : int.
        ((((<=) (0) i_14) /\ ((<) i_14 (Uint64.to_int n_2_0))) ->
         (Int8.(<>) (select charP_charM_s_15_163_at_L (shift s_15 i_14))
         (#"whole_program.jc" 1741 47 58# "expl:Integer cast" (Int8.of_int
         (0)))))))) ->
       (Uint64.(=) (strlen s_15 charP_charM_s_15_163_at_L) n_2_0)))))))
  
  lemma Valid_str_shiftn
  #"/home/work/workspace/self/verker/strlen.h" 68 7 123#
  "expl:Lemma valid_str_shiftn" :
  (forall voidP_s_16_164_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_16_164_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 68 7 123#
    (forall s_16 : (pointer voidP).
     (forall i_15 : int.
      (((valid_str s_16 voidP_s_16_164_alloc_table_at_L
        charP_charM_s_16_164_at_L)
       /\
       (((<=) (0) i_15) /\
       ((<) i_15 (Uint64.to_int (strlen s_16 charP_charM_s_16_164_at_L)))))
       ->
       (valid_str (shift s_16 i_15) voidP_s_16_164_alloc_table_at_L
       charP_charM_s_16_164_at_L)))))))
  
end

module Function_isspace_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isspace_0
  (c_8_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 87 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isspace (Int8.to_int c_8_0)))) }
  
end

module Function_skip_spaces_0_safety
#"/home/work/workspace/self/verker/skip_spaces.c" 3 5 34#
"expl:skip_spaces, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_enum__bool 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isspace_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let skip_spaces_0 #"/home/work/workspace/self/verker/skip_spaces.c" 3 5 34#
  "expl:Function skip_spaces, safety" =
  fun
   (str_0 : (pointer voidP)) (voidP_str_35_alloc_table : (alloc_table voidP))
   (voidP_str_35_tag_table : (tag_table voidP)) (charP_charM_str_35 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_str_35_alloc_table str_0) ->
     (((=) (typeof voidP_str_35_tag_table str_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_str_35_alloc_table str_0) i) /\
       ((<) i (offset_max voidP_str_35_alloc_table str_0))) ->
       ((=) (typeof voidP_str_35_tag_table (shift str_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/skip_spaces.h" 52 13 27#
   (valid_str str_0 voidP_str_35_alloc_table charP_charM_str_35))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_str_0 = ref str_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let ostr = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_8 = ref (Safe_enum__bool.any_  () ) in
    (let __retres_4 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (ostr :=
      (let _jessie_616 = !mutable_str_0 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/skip_spaces.c" 5 17 21#
      "expl:Pointer index bounds" true) }); _jessie_616 end));
      'Loop_30:
      loop
      invariant { (#"whole_program.jc" 1846 6 1599# true) }
        variant { (#"/home/work/workspace/self/verker/skip_spaces.c" 9 18 45#
          (Int.(-) (Uint64.to_int (strlen !ostr charP_charM_str_35))
          (sub_pointer !mutable_str_0 !ostr))) }
       begin
       any unit
       requires { true } reads { mutable_str_0 }
       ensures {
         ((#"/home/work/workspace/self/verker/skip_spaces.c" 8 20 68#
          (forall p_6 : (pointer voidP).
           (((same_block !ostr p_6) /\
            (((<=) (sub_pointer !ostr p_6) (0)) /\
            ((same_block p_6 !mutable_str_0) /\
            ((<) (sub_pointer p_6 !mutable_str_0) (0))))) ->
            (isspace (Int8.to_int (select charP_charM_str_35 p_6))))))
         /\
         ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
          (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 31#
           (same_block !ostr !mutable_str_0))
          /\
          (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 31#
           ((<=) (sub_pointer !ostr !mutable_str_0) (0)))
          /\
          (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
          ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 28 54#
           (same_block !mutable_str_0
           (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_35)))))
          /\
          (#"/home/work/workspace/self/verker/skip_spaces.c" 7 28 54#
          ((<=)
          (sub_pointer !mutable_str_0
          (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_35))))
          (0))))))))))
         /\
         (#"/home/work/workspace/self/verker/skip_spaces.c" 6 20 34#
         (valid_str !mutable_str_0 voidP_str_35_alloc_table
         charP_charM_str_35)))) } ;
        try
         begin
         begin
         (tmp_0_8 :=
          (let _jessie_617 =
          (let _jessie_618 =
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 16 20#
          "expl:Pointer dereference"
          (acc  voidP_str_35_alloc_table charP_charM_str_35 !mutable_str_0 ))
          in
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 8 21#
          "expl:Precondition for isspace"
          (Function_isspace_0_safe.isspace_0  _jessie_618 ))) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 8 21#
          "expl:Pointer index bounds" true) }); _jessie_617 end));
          (if
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 8 21#
          (Safe_enum__bool.(<>)  !tmp_0_8
           (#"whole_program.jc" 1872 49 61# "expl:Integer cast"
           (Safe_enum__bool.of_int  (0) )) )) then ()
          else (raise (Goto_while_0_break_6_exc ())));
          (mutable_str_0 :=
           (let _jessie_619 =
           (shift_typesafe  !mutable_str_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 1874 46 58# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/skip_spaces.c" 12 2 7#
           "expl:Pointer index bounds" true) }); _jessie_619 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_37 -> () end end end; (raise (Goto_while_0_break_6_exc ()))
     end with Goto_while_0_break_6_exc _jessie_35 ->
     'While_0_break_6:
     'While_0_break_6:
     begin
     ();
      begin
      (__retres_4 :=
       (let _jessie_620 = !mutable_str_0 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/skip_spaces.c" 13 1 20#
       "expl:Pointer index bounds" true) }); _jessie_620 end));
       begin
       (return :=
        (let _jessie_621 = !__retres_4 in
        begin
        (assert {
        (#"whole_program.jc" 1880 7 24# "expl:Pointer index bounds" true) });
         _jessie_621 end)); (raise Return) end end end end))); absurd  end
    with Return -> !return end))
  
end

module Function_isspace_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isspace_0
  (c_8_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 87 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isspace (Int8.to_int c_8_0)))) }
  
end

theory Axiomatic_SkipSpaces

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  function skip_spaces (pointer voidP) : (pointer
  voidP)
  
  
  lemma Skip_spaces_defn
  #"/home/work/workspace/self/verker/skip_spaces.h" 13 7 202#
  "expl:Lemma skip_spaces_defn" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 13 7 202#
    (forall str_0_0 : (pointer voidP).
     (forall i_16 : Uint64.t.
      (((valid_str str_0_0 voidP_str_33_alloc_table_at_L
        charP_charM_str_33_at_L)
       /\
       ((Uint64.(<=) i_16 (strlen str_0_0 charP_charM_str_33_at_L)) /\
       ((forall j_2 : Uint64.t.
         ((Uint64.(<) j_2 i_16) ->
          (isspace
          (Int8.to_int
          (select charP_charM_str_33_at_L
          (shift str_0_0 (Uint64.to_int j_2)))))))
       /\
       (not
       (isspace
       (Int8.to_int
       (select charP_charM_str_33_at_L (shift str_0_0 (Uint64.to_int i_16)))))))))
       -> ((=) (shift str_0_0 (Uint64.to_int i_16)) (skip_spaces str_0_0))))))))
  
  lemma Skip_spaces_deref
  #"/home/work/workspace/self/verker/skip_spaces.h" 19 7 82#
  "expl:Lemma skip_spaces_deref" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 19 7 82#
    (forall str_1 : (pointer voidP).
     ((valid_str str_1 voidP_str_33_alloc_table_at_L charP_charM_str_33_at_L)
      ->
      (not
      (isspace
      (Int8.to_int (select charP_charM_str_33_at_L (skip_spaces str_1))))))))))
  
  lemma Skip_spaces_range
  #"/home/work/workspace/self/verker/skip_spaces.h" 22 7 106#
  "expl:Lemma skip_spaces_range" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 22 7 106#
    (forall str_2 : (pointer voidP).
     ((valid_str str_2 voidP_str_33_alloc_table_at_L charP_charM_str_33_at_L)
      ->
      ((same_block str_2 (skip_spaces str_2)) /\
      (((<=) (sub_pointer str_2 (skip_spaces str_2)) (0)) /\
      ((same_block (skip_spaces str_2)
       (shift str_2 (Uint64.to_int (strlen str_2 charP_charM_str_33_at_L))))
      /\
      ((<=)
      (sub_pointer (skip_spaces str_2)
      (shift str_2 (Uint64.to_int (strlen str_2 charP_charM_str_33_at_L))))
      (0))))))))))
  
  lemma Skip_spaces_iter_one
  #"/home/work/workspace/self/verker/skip_spaces.h" 26 7 115#
  "expl:Lemma skip_spaces_iter_one" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 26 7 115#
    (forall str_3 : (pointer voidP).
     (((valid_str str_3 voidP_str_33_alloc_table_at_L
       charP_charM_str_33_at_L)
      /\
      (not (isspace (Int8.to_int (select charP_charM_str_33_at_L str_3)))))
      -> ((=) (skip_spaces str_3) (skip_spaces (shift str_3 (1)))))))))
  
  lemma Skip_spaces_base_addr
  #"/home/work/workspace/self/verker/skip_spaces.h" 30 7 109#
  "expl:Lemma skip_spaces_base_addr" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 30 7 109#
    (forall str_4 : (pointer voidP).
     ((valid_str str_4 voidP_str_33_alloc_table_at_L charP_charM_str_33_at_L)
      -> (same_block str_4 (skip_spaces str_4)))))))
  
  lemma Skip_spaces_same
  #"/home/work/workspace/self/verker/skip_spaces.h" 34 7 100#
  "expl:Lemma skip_spaces_same" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 34 7 100#
    (forall str_5 : (pointer voidP).
     (((((<=) (offset_min voidP_str_33_alloc_table_at_L str_5) (0)) /\
       (((>=) (offset_max voidP_str_33_alloc_table_at_L str_5) (0)) /\
       ((=) true true)))
      /\
      (not (isspace (Int8.to_int (select charP_charM_str_33_at_L str_5)))))
      -> ((=) str_5 (skip_spaces str_5)))))))
  
  lemma Skipped_are_spaces
  #"/home/work/workspace/self/verker/skip_spaces.h" 38 7 124#
  "expl:Lemma skipped_are_spaces" :
  (forall voidP_str_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/skip_spaces.h" 38 7 124#
    (forall str_6 : (pointer voidP).
     (forall i_17 : Uint64.t.
      (((valid_str str_6 voidP_str_33_alloc_table_at_L
        charP_charM_str_33_at_L)
       /\ ((<) (Uint64.to_int i_17) (sub_pointer (skip_spaces str_6) str_6)))
       ->
       (isspace
       (Int8.to_int
       (select charP_charM_str_33_at_L (shift str_6 (Uint64.to_int i_17)))))))))))
  
end

module Function_skip_spaces_0_behaviors
#"/home/work/workspace/self/verker/skip_spaces.c" 3 5 34#
"expl:skip_spaces, behaviors"

  use Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_isspace_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let skip_spaces_ensures_default
  #"/home/work/workspace/self/verker/skip_spaces.c" 3 5 34#
  "expl:Function skip_spaces, default behavior" =
  fun
   (str_0 : (pointer voidP)) (voidP_str_35_alloc_table : (alloc_table voidP))
   (voidP_str_35_tag_table : (tag_table voidP)) (charP_charM_str_35 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_str_35_alloc_table str_0) ->
     (((=) (typeof voidP_str_35_tag_table str_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_str_35_alloc_table str_0) i) /\
       ((<) i (offset_max voidP_str_35_alloc_table str_0))) ->
       ((=) (typeof voidP_str_35_tag_table (shift str_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/skip_spaces.h" 52 13 27#
   (valid_str str_0 voidP_str_35_alloc_table charP_charM_str_35))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
      "expl:Ensures clause" ((=) result (skip_spaces str_0)))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 55 12 50#
      "expl:Ensures clause" (same_block result str_0))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
      "expl:Ensures clause" (same_block str_0 result))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
      "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
      "expl:Ensures clause"
      (same_block result
      (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35)))))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35)))) (0)))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 57 12 30#
      "expl:Ensures clause"
      (not (isspace (Int8.to_int (select charP_charM_str_35 result)))))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/skip_spaces.h" 58 12 63#
      "expl:Ensures clause"
      (forall p_3_0 : (pointer voidP).
       (((same_block str_0 p_3_0) /\
        (((<=) (sub_pointer str_0 p_3_0) (0)) /\
        ((same_block p_3_0 result) /\ ((<) (sub_pointer p_3_0 result) (0)))))
        -> (isspace (Int8.to_int (select charP_charM_str_35 p_3_0))))))
     /\
     (#"/home/work/workspace/self/verker/skip_spaces.h" 59 12 30#
     "expl:Ensures clause"
     (valid_str result voidP_str_35_alloc_table charP_charM_str_35))))))))))))))))))))
     } diverges  ->
   (let mutable_str_0 = ref str_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let ostr = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_8 = ref (Unsafe_enum__bool.any_  () ) in
    (let __retres_4 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (ostr := !mutable_str_0);
      'Loop_29:
      loop
      invariant
        { ((#"/home/work/workspace/self/verker/skip_spaces.c" 6 20 34#
           (valid_str !mutable_str_0 voidP_str_35_alloc_table
           charP_charM_str_35))
          &&
          ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
           (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 31#
            (same_block !ostr !mutable_str_0))
           /\
           (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 31#
            ((<=) (sub_pointer !ostr !mutable_str_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/skip_spaces.c" 7 20 54#
           ((#"/home/work/workspace/self/verker/skip_spaces.c" 7 28 54#
            (same_block !mutable_str_0
            (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_35)))))
           /\
           (#"/home/work/workspace/self/verker/skip_spaces.c" 7 28 54#
           ((<=)
           (sub_pointer !mutable_str_0
           (shift !ostr (Uint64.to_int (strlen !ostr charP_charM_str_35))))
           (0))))))))))
          &&
          (#"/home/work/workspace/self/verker/skip_spaces.c" 8 20 68#
          (forall p_6 : (pointer voidP).
           (((same_block !ostr p_6) /\
            (((<=) (sub_pointer !ostr p_6) (0)) /\
            ((same_block p_6 !mutable_str_0) /\
            ((<) (sub_pointer p_6 !mutable_str_0) (0))))) ->
            (isspace (Int8.to_int (select charP_charM_str_35 p_6)))))))) } 
        
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         begin
         (tmp_0_8 :=
          (let _jessie_612 = (acc  charP_charM_str_35 !mutable_str_0 ) in
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 8 21#
          "expl:Precondition for isspace"
          (Function_isspace_0.isspace_0  _jessie_612 ))));
          (if
          (#"/home/work/workspace/self/verker/skip_spaces.c" 11 8 21#
          (Unsafe_enum__bool.(<>)  !tmp_0_8
           (#"whole_program.jc" 1872 49 61# "expl:Integer cast"
           (Unsafe_enum__bool.of_int  (0) )) )) then ()
          else (raise (Goto_while_0_break_6_exc ())));
          (mutable_str_0 :=
           (shift_  !mutable_str_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 1874 46 58# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) )) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_37 -> () end end end; (raise (Goto_while_0_break_6_exc ()))
     end with Goto_while_0_break_6_exc _jessie_35 ->
     'While_0_break_6:
     'While_0_break_6:
     begin
     ();
      begin
      (__retres_4 := !mutable_str_0);
       begin (return := !__retres_4); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
end

module Function_tolower_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val tolower_0
  (c_18 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 112 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_18)))) }
  
end

module Function_strcasecmp_safety
#"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
"expl:strcasecmp, safety"

  use enum.Uint64 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_tolower_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let strcasecmp #"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, safety" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_37_alloc_table :
   (alloc_table voidP)) (voidP_s2_38_alloc_table : (alloc_table voidP))
   (voidP_s2_38_tag_table : (tag_table voidP)) (voidP_s1_37_tag_table :
   (tag_table voidP)) (charP_charM_s1_37 : (memory voidP Int8.t))
   (charP_charM_s2_38 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s2_38_alloc_table s2) ->
     (((=) (typeof voidP_s2_38_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_38_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_38_alloc_table s2))) ->
       ((=) (typeof voidP_s2_38_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_37_alloc_table s1) ->
     (((=) (typeof voidP_s1_37_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_37_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_37_alloc_table s1))) ->
       ((=) (typeof voidP_s1_37_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1885 12 76#
   ((#"/home/work/workspace/self/verker/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_37_alloc_table charP_charM_s1_37))
   /\
   (#"/home/work/workspace/self/verker/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_38_alloc_table charP_charM_s2_38)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Safe_int32.any_  () ) in
     (let c2 = ref (Safe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (Safe_int8.any_  () ) in
     (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_2_1 = ref (Safe_int8.any_  () ) in
     (let res_1 = ref (Safe_int32.any_  () ) in
     (let __retres_5 = ref (Safe_int32.any_  () ) in
     try
      begin
      (os1 :=
       (let _jessie_678 = !mutable_s1 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcasecmp.c" 6 17 20#
       "expl:Pointer index bounds" true) }); _jessie_678 end));
       begin
       (os2 :=
        (let _jessie_667 = !mutable_s2 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcasecmp.c" 7 17 20#
        "expl:Pointer index bounds" true) }); _jessie_667 end));
        'Loop_34:
        loop
        invariant { (#"whole_program.jc" 1963 6 3101# true) }
          variant {
            (#"/home/work/workspace/self/verker/strcasecmp.c" 15 18 42#
            (Int.(-) (Uint64.to_int (strlen !os1 charP_charM_s1_37))
            (sub_pointer !mutable_s1 !os1))) }
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 13 20 115#
            (forall i_21 : int.
             ((((<=) (0) i_21) /\ ((<) i_21 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_21))))
              (tolower
              (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_21))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_37_alloc_table charP_charM_s1_37))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_38_alloc_table charP_charM_s2_38)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           begin
           begin
           (tmp_0_9 :=
            (let _jessie_668 = !mutable_s1 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strcasecmp.c" 18 16 20#
            "expl:Pointer index bounds" true) }); _jessie_668 end));
            begin
            (mutable_s1 :=
             (let _jessie_669 =
             (shift_typesafe  !mutable_s1
              (Safe_int32.to_int 
               (#"whole_program.jc" 2004 56 68# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 16 20#
             "expl:Pointer index bounds" true) }); _jessie_669 end)); () end
           end;
            (tmp_0_10 :=
             (let _jessie_670 =
             (let _jessie_671 =
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 15 20#
             "expl:Pointer dereference"
             (acc  voidP_s1_37_alloc_table charP_charM_s1_37 !tmp_0_9 )) in
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0_safe.tolower_0  _jessie_671 ))) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Pointer index bounds" true) }); _jessie_670 end)) end;
            (c1 :=
             (let _jessie_672 =
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_0_10 ))
             in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 2 21#
             "expl:Pointer index bounds" true) }); _jessie_672 end)) end;
            begin
            begin
            begin
            (tmp_1_2 :=
             (let _jessie_673 = !mutable_s2 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcasecmp.c" 19 16 20#
             "expl:Pointer index bounds" true) }); _jessie_673 end));
             begin
             (mutable_s2 :=
              (let _jessie_674 =
              (shift_typesafe  !mutable_s2
               (Safe_int32.to_int 
                (#"whole_program.jc" 2015 56 68# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 16 20#
              "expl:Pointer index bounds" true) }); _jessie_674 end)); () end
            end;
             (tmp_2_1 :=
              (let _jessie_675 =
              (let _jessie_676 =
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 15 20#
              "expl:Pointer dereference"
              (acc  voidP_s2_38_alloc_table charP_charM_s2_38 !tmp_1_2 )) in
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Precondition for tolower"
              (Function_tolower_0_safe.tolower_0  _jessie_676 ))) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Pointer index bounds" true) }); _jessie_675 end)) end;
             (c2 :=
              (let _jessie_677 =
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_2_1 ))
              in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 2 21#
              "expl:Pointer index bounds" true) }); _jessie_677 end)) end end;
            (if
            (#"/home/work/workspace/self/verker/strcasecmp.c" 20 10 18#
            (Safe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker/strcasecmp.c" 20 22 29#
             (Safe_int32.(<>)  !c1
              (#"whole_program.jc" 2023 64 76# "expl:Integer cast"
              (Safe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_7_exc ())))
            else (raise (Goto_while_0_break_7_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_40 -> () end end end;
        (raise (Goto_while_0_break_7_exc ())) end end with
      Goto_while_0_break_7_exc _jessie_38 ->
      'While_0_break_7:
      'While_0_break_7:
      begin
      ();
       begin
       (res_1 :=
        (let _jessie_679 = (Safe_int32.(-)  !c1 !c2 ) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcasecmp.c" 21 15 18#
        "expl:Pointer index bounds" true) }); _jessie_679 end));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 2033 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 2034 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_22 : int.
            (((<=) (0) i_22) /\
            (((<=) i_22 (Uint64.to_int (strlen !os1 charP_charM_s1_37))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_22)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22))))))
            /\ ((=) i_22 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_5 :=
         (let _jessie_680 = (Safe_int32.(-)  !c1 !c2 ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcasecmp.c" 30 1 16#
         "expl:Pointer index bounds" true) }); _jessie_680 end));
         begin
         (return :=
          (let _jessie_681 = !__retres_5 in
          begin
          (assert {
          (#"whole_program.jc" 2068 7 24# "expl:Pointer index bounds" true)
          }); _jessie_681 end)); (raise Return) end end end end end))))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_tolower_0

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val tolower_0
  (c_18 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 112 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (tolower (Int8.to_int c_18)))) }
  
end

module Function_strcasecmp_behaviors
#"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
"expl:strcasecmp, behaviors"

  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_tolower_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  let strcasecmp_ensures_default
  #"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, default behavior" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_37_alloc_table :
   (alloc_table voidP)) (voidP_s2_38_alloc_table : (alloc_table voidP))
   (voidP_s2_38_tag_table : (tag_table voidP)) (voidP_s1_37_tag_table :
   (tag_table voidP)) (charP_charM_s1_37 : (memory voidP Int8.t))
   (charP_charM_s2_38 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s2_38_alloc_table s2) ->
     (((=) (typeof voidP_s2_38_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_38_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_38_alloc_table s2))) ->
       ((=) (typeof voidP_s2_38_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_37_alloc_table s1) ->
     (((=) (typeof voidP_s1_37_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_37_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_37_alloc_table s1))) ->
       ((=) (typeof voidP_s1_37_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1885 12 76#
   ((#"/home/work/workspace/self/verker/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_37_alloc_table charP_charM_s1_37))
   /\
   (#"/home/work/workspace/self/verker/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_38_alloc_table charP_charM_s2_38)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 1915 10 834# "expl:Behavior disjointness check"
    (not
    ((forall i_20_0 : int.
      ((((<=) (0) i_20_0) /\
       ((<=) i_20_0 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_37))))
       ->
       ((=)
       (tolower
       (Int8.to_int (select charP_charM_s1_37 (shift !mutable_s1 i_20_0))))
       (tolower
       (Int8.to_int (select charP_charM_s2_38 (shift !mutable_s2 i_20_0)))))))
    /\
    (exists i_18_0 : int.
     (((<=) (0) i_18_0) /\
     (((<=) i_18_0 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_37))) /\
     ((<>)
     (tolower
     (Int8.to_int (select charP_charM_s1_37 (shift !mutable_s1 i_18_0))))
     (tolower
     (Int8.to_int (select charP_charM_s2_38 (shift !mutable_s2 i_18_0)))))))))))
    });
     (check {
     (#"whole_program.jc" 1928 10 757# "expl:Behavior completeness check"
     ((exists i_18_1 : int.
       (((<=) (0) i_18_1) /\
       (((<=) i_18_1 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_37)))
       /\
       ((<>)
       (tolower
       (Int8.to_int (select charP_charM_s1_37 (shift !mutable_s1 i_18_1))))
       (tolower
       (Int8.to_int (select charP_charM_s2_38 (shift !mutable_s2 i_18_1))))))))
     \/
     (forall i_20_1 : int.
      ((((<=) (0) i_20_1) /\
       ((<=) i_20_1 (Uint64.to_int (strlen !mutable_s1 charP_charM_s1_37))))
       ->
       ((=)
       (tolower
       (Int8.to_int (select charP_charM_s1_37 (shift !mutable_s1 i_20_1))))
       (tolower
       (Int8.to_int (select charP_charM_s2_38 (shift !mutable_s2 i_20_1)))))))))
     });
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (Unsafe_int8.any_  () ) in
     (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_2_1 = ref (Unsafe_int8.any_  () ) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_5 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_31:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
             (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 33#
              (valid_str !mutable_s1 voidP_s1_37_alloc_table
              charP_charM_s1_37))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 9 37 50#
             (valid_str !mutable_s2 voidP_s2_38_alloc_table
             charP_charM_s2_38)))))
            &&
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
             (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
              (same_block !os1 !mutable_s1))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
              ((<=) (sub_pointer !os1 !mutable_s1) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
              (same_block !mutable_s1
              (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37)))))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
             ((<=)
             (sub_pointer !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
             (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
              (same_block !os2 !mutable_s2))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
              ((<=) (sub_pointer !os2 !mutable_s2) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
              (same_block !mutable_s2
              (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38)))))
             /\
             (#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
             ((<=)
             (sub_pointer !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 12 20 40#
             ((=) (sub_pointer !mutable_s1 !os1)
             (sub_pointer !mutable_s2 !os2)))
            &&
            (#"/home/work/workspace/self/verker/strcasecmp.c" 13 20 115#
            (forall i_21 : int.
             ((((<=) (0) i_21) /\ ((<) i_21 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_21))))
              (tolower
              (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_21)))))))))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           begin
           begin
           begin
           (tmp_0_9 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 2004 56 68# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            (tmp_0_10 :=
             (let _jessie_626 = (acc  charP_charM_s1_37 !tmp_0_9 ) in
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_626 )))) end;
            (c1 :=
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_10 ))) end;
            begin
            begin
            begin
            (tmp_1_2 := !mutable_s2);
             begin
             (mutable_s2 :=
              (shift_  !mutable_s2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2015 56 68# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )); () end end;
             (tmp_2_1 :=
              (let _jessie_631 = (acc  charP_charM_s2_38 !tmp_1_2 ) in
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Precondition for tolower"
              (Function_tolower_0.tolower_0  _jessie_631 )))) end;
             (c2 :=
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  !tmp_2_1 ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 2023 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_7_exc ())))
            else (raise (Goto_while_0_break_7_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_40 -> () end end end;
        (raise (Goto_while_0_break_7_exc ())) end end with
      Goto_while_0_break_7_exc _jessie_38 ->
      'While_0_break_7:
      'While_0_break_7:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcasecmp.c" 22 12 44#
        "expl:Assertion in line 22"
        ((Int32.(=) !c1 !c2) ->
         ((Int32.(=) !c1 (#"whole_program.jc" 2033 60 72# "expl:Integer cast"
          (Int32.of_int (0))))
         /\
         (Int32.(=) !res_1 (#"whole_program.jc" 2034 64 76#
         "expl:Integer cast" (Int32.of_int (0))))))) }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcasecmp.c" 23 12 289#
        "expl:Assertion in line 23"
        ((Int32.(<>) !c1 !c2) ->
         (exists i_22 : int.
          (((<=) (0) i_22) /\
          (((<=) i_22 (Uint64.to_int (strlen !os1 charP_charM_s1_37))) /\
          ((forall j_4 : int.
            ((((<=) (0) j_4) /\ ((<) j_4 i_22)) ->
             ((=)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 j_4))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 j_4)))))))
          /\
          (((<>)
           (tolower
           (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
           (tolower
           (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22)))))
          /\
          (((=) (Int32.to_int !res_1)
           (Int.(-)
           (tolower
           (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
           (tolower
           (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22))))))
          /\ ((=) i_22 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
        }); () end;
        begin
        (__retres_5 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_5); (raise Return) end end end end end))))))))));
     absurd  end with Return -> !return end)))
  
  let strcasecmp_ensures_equal
  #"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, behavior equal" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_37_alloc_table :
   (alloc_table voidP)) (voidP_s2_38_alloc_table : (alloc_table voidP))
   (voidP_s2_38_tag_table : (tag_table voidP)) (voidP_s1_37_tag_table :
   (tag_table voidP)) (charP_charM_s1_37 : (memory voidP Int8.t))
   (charP_charM_s2_38 : (memory voidP Int8.t)) 
   requires {
   ((forall i_20 : int.
     ((((<=) (0) i_20) /\
      ((<=) i_20 (Uint64.to_int (strlen s1 charP_charM_s1_37)))) ->
      ((=) (tolower (Int8.to_int (select charP_charM_s1_37 (shift s1 i_20))))
      (tolower (Int8.to_int (select charP_charM_s2_38 (shift s2 i_20)))))))
   /\
   (((allocated voidP_s2_38_alloc_table s2) ->
     (((=) (typeof voidP_s2_38_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_38_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_38_alloc_table s2))) ->
       ((=) (typeof voidP_s2_38_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_37_alloc_table s1) ->
     (((=) (typeof voidP_s1_37_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_37_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_37_alloc_table s1))) ->
       ((=) (typeof voidP_s1_37_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1885 12 76#
   ((#"/home/work/workspace/self/verker/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_37_alloc_table charP_charM_s1_37))
   /\
   (#"/home/work/workspace/self/verker/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_38_alloc_table charP_charM_s2_38))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcasecmp.h" 13 15 27#
     "expl:Ensures clause"
     (Int32.(=) result (#"whole_program.jc" 1894 32 44# "expl:Integer cast"
     (Int32.of_int (0)))))) } diverges  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (Unsafe_int8.any_  () ) in
     (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_2_1 = ref (Unsafe_int8.any_  () ) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_5 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_32:
        loop
        invariant { (#"whole_program.jc" 1963 6 3101# true) } 
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 13 20 115#
            (forall i_21 : int.
             ((((<=) (0) i_21) /\ ((<) i_21 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_21))))
              (tolower
              (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_21))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_37_alloc_table charP_charM_s1_37))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_38_alloc_table charP_charM_s2_38)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           begin
           begin
           (tmp_0_9 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 2004 56 68# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            (tmp_0_10 :=
             (let _jessie_641 = (acc  charP_charM_s1_37 !tmp_0_9 ) in
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_641 )))) end;
            (c1 :=
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_10 ))) end;
            begin
            begin
            begin
            (tmp_1_2 := !mutable_s2);
             begin
             (mutable_s2 :=
              (shift_  !mutable_s2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2015 56 68# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )); () end end;
             (tmp_2_1 :=
              (let _jessie_646 = (acc  charP_charM_s2_38 !tmp_1_2 ) in
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Precondition for tolower"
              (Function_tolower_0.tolower_0  _jessie_646 )))) end;
             (c2 :=
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  !tmp_2_1 ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 2023 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_7_exc ())))
            else (raise (Goto_while_0_break_7_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_40 -> () end end end;
        (raise (Goto_while_0_break_7_exc ())) end end with
      Goto_while_0_break_7_exc _jessie_38 ->
      'While_0_break_7:
      'While_0_break_7:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 2033 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 2034 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_22 : int.
            (((<=) (0) i_22) /\
            (((<=) i_22 (Uint64.to_int (strlen !os1 charP_charM_s1_37))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_22)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22))))))
            /\ ((=) i_22 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_5 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_5); (raise Return) end end end end end))))))))));
     absurd  end with Return -> !return end)))
  
  let strcasecmp_ensures_not_equal
  #"/home/work/workspace/self/verker/strcasecmp.c" 3 4 46#
  "expl:Function strcasecmp, behavior not_equal" =
  fun
   (s1 : (pointer voidP)) (s2 : (pointer voidP)) (voidP_s1_37_alloc_table :
   (alloc_table voidP)) (voidP_s2_38_alloc_table : (alloc_table voidP))
   (voidP_s2_38_tag_table : (tag_table voidP)) (voidP_s1_37_tag_table :
   (tag_table voidP)) (charP_charM_s1_37 : (memory voidP Int8.t))
   (charP_charM_s2_38 : (memory voidP Int8.t)) 
   requires {
   ((exists i_18 : int.
     (((<=) (0) i_18) /\
     (((<=) i_18 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
     ((<>) (tolower (Int8.to_int (select charP_charM_s1_37 (shift s1 i_18))))
     (tolower (Int8.to_int (select charP_charM_s2_38 (shift s2 i_18))))))))
   /\
   (((allocated voidP_s2_38_alloc_table s2) ->
     (((=) (typeof voidP_s2_38_tag_table s2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s2_38_alloc_table s2) i) /\
       ((<) i (offset_max voidP_s2_38_alloc_table s2))) ->
       ((=) (typeof voidP_s2_38_tag_table (shift s2 i)) charP_tag)))))
   /\
   (((allocated voidP_s1_37_alloc_table s1) ->
     (((=) (typeof voidP_s1_37_tag_table s1) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s1_37_alloc_table s1) i) /\
       ((<) i (offset_max voidP_s1_37_alloc_table s1))) ->
       ((=) (typeof voidP_s1_37_tag_table (shift s1 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 1885 12 76#
   ((#"/home/work/workspace/self/verker/strcasecmp.h" 8 13 26#
    (valid_str s1 voidP_s1_37_alloc_table charP_charM_s1_37))
   /\
   (#"/home/work/workspace/self/verker/strcasecmp.h" 9 13 26#
   (valid_str s2 voidP_s2_38_alloc_table charP_charM_s2_38))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
      "expl:Ensures clause"
      (Int32.(<>) result (#"whole_program.jc" 1900 43 55# "expl:Integer cast"
      (Int32.of_int (0)))))
     /\
     (#"/home/work/workspace/self/verker/strcasecmp.h" 17 15 253#
     "expl:Ensures clause"
     (exists i_19 : int.
      (((<=) (0) i_19) /\
      (((<=) i_19 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
      ((forall j_3 : int.
        ((((<=) (0) j_3) /\ ((<) j_3 i_19)) ->
         ((=)
         (tolower (Int8.to_int (select charP_charM_s1_37 (shift s1 j_3))))
         (tolower (Int8.to_int (select charP_charM_s2_38 (shift s2 j_3)))))))
      /\
      (((<>)
       (tolower (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
       (tolower (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19)))))
      /\
      ((=) (Int32.to_int result)
      (Int.(-)
      (tolower (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
      (tolower (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19))))))))))))))))
     } diverges  ->
   (let mutable_s1 = ref s1 in
   (let mutable_s2 = ref s2 in
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1 = ref (Unsafe_int32.any_  () ) in
     (let c2 = ref (Unsafe_int32.any_  () ) in
     (let os1 = ref (any_pointer  () : (pointer voidP)) in
     (let os2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_9 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_10 = ref (Unsafe_int8.any_  () ) in
     (let tmp_1_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_2_1 = ref (Unsafe_int8.any_  () ) in
     (let res_1 = ref (Unsafe_int32.any_  () ) in
     (let __retres_5 = ref (Unsafe_int32.any_  () ) in
     try
      begin
      (os1 := !mutable_s1);
       begin
       (os2 := !mutable_s2);
        'Loop_33:
        loop
        invariant { (#"whole_program.jc" 1963 6 3101# true) } 
         begin
         any unit
         requires { true } reads { mutable_s1, mutable_s2 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 13 20 115#
            (forall i_21 : int.
             ((((<=) (0) i_21) /\ ((<) i_21 (sub_pointer !mutable_s1 !os1)))
              ->
              ((=)
              (tolower
              (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_21))))
              (tolower
              (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_21))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 12 20 40#
            ((=) (sub_pointer !mutable_s1 !os1)
            (sub_pointer !mutable_s2 !os2)))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             (same_block !os2 !mutable_s2))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 29#
             ((<=) (sub_pointer !os2 !mutable_s2) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
             (same_block !mutable_s2
             (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 11 27 50#
            ((<=)
            (sub_pointer !mutable_s2
            (shift !os2 (Uint64.to_int (strlen !os2 charP_charM_s2_38))))
            (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             (same_block !os1 !mutable_s1))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 29#
             ((<=) (sub_pointer !os1 !mutable_s1) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 20 50#
            ((#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
             (same_block !mutable_s1
             (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37)))))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.c" 10 27 50#
            ((<=)
            (sub_pointer !mutable_s1
            (shift !os1 (Uint64.to_int (strlen !os1 charP_charM_s1_37))))
            (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 50#
           ((#"/home/work/workspace/self/verker/strcasecmp.c" 9 20 33#
            (valid_str !mutable_s1 voidP_s1_37_alloc_table charP_charM_s1_37))
           /\
           (#"/home/work/workspace/self/verker/strcasecmp.c" 9 37 50#
           (valid_str !mutable_s2 voidP_s2_38_alloc_table charP_charM_s2_38)))))))))
           } ;
          try
           begin
           begin
           begin
           begin
           begin
           begin
           (tmp_0_9 := !mutable_s1);
            begin
            (mutable_s1 :=
             (shift_  !mutable_s1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 2004 56 68# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )); () end end;
            (tmp_0_10 :=
             (let _jessie_656 = (acc  charP_charM_s1_37 !tmp_0_9 ) in
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Precondition for tolower"
             (Function_tolower_0.tolower_0  _jessie_656 )))) end;
            (c1 :=
             (#"/home/work/workspace/self/verker/strcasecmp.c" 18 7 21#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  !tmp_0_10 ))) end;
            begin
            begin
            begin
            (tmp_1_2 := !mutable_s2);
             begin
             (mutable_s2 :=
              (shift_  !mutable_s2
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2015 56 68# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )); () end end;
             (tmp_2_1 :=
              (let _jessie_661 = (acc  charP_charM_s2_38 !tmp_1_2 ) in
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Precondition for tolower"
              (Function_tolower_0.tolower_0  _jessie_661 )))) end;
             (c2 :=
              (#"/home/work/workspace/self/verker/strcasecmp.c" 19 7 21#
              "expl:Integer cast"
              (Unsafe_int32_of_Unsafe_int8.cast  !tmp_2_1 ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcasecmp.c" 20 10 18#
            (Unsafe_int32.(=)  !c1 !c2 ))
            then
             (if
             (#"/home/work/workspace/self/verker/strcasecmp.c" 20 22 29#
             (Unsafe_int32.(<>)  !c1
              (#"whole_program.jc" 2023 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) )) then ()
             else (raise (Goto_while_0_break_7_exc ())))
            else (raise (Goto_while_0_break_7_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_40 -> () end end end;
        (raise (Goto_while_0_break_7_exc ())) end end with
      Goto_while_0_break_7_exc _jessie_38 ->
      'While_0_break_7:
      'While_0_break_7:
      begin
      ();
       begin
       (res_1 := (Unsafe_int32.(-)  !c1 !c2 ));
        begin
        any unit
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 22 12 44#
          ((Int32.(=) !c1 !c2) ->
           ((Int32.(=) !c1 (#"whole_program.jc" 2033 60 72#
            "expl:Integer cast" (Int32.of_int (0))))
           /\
           (Int32.(=) !res_1 (#"whole_program.jc" 2034 64 76#
           "expl:Integer cast" (Int32.of_int (0))))))) } ; () end;
        begin
        any unit
        requires { true } reads { mutable_s1 }
        ensures {
          (#"/home/work/workspace/self/verker/strcasecmp.c" 23 12 289#
          ((Int32.(<>) !c1 !c2) ->
           (exists i_22 : int.
            (((<=) (0) i_22) /\
            (((<=) i_22 (Uint64.to_int (strlen !os1 charP_charM_s1_37))) /\
            ((forall j_4 : int.
              ((((<=) (0) j_4) /\ ((<) j_4 i_22)) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift !os1 j_4))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift !os2 j_4)))))))
            /\
            (((<>)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22)))))
            /\
            (((=) (Int32.to_int !res_1)
             (Int.(-)
             (tolower
             (Int8.to_int (select charP_charM_s1_37 (shift !os1 i_22))))
             (tolower
             (Int8.to_int (select charP_charM_s2_38 (shift !os2 i_22))))))
            /\ ((=) i_22 (Int.(-) (sub_pointer !mutable_s1 !os1) (1)))))))))))
          } ; () end;
        begin
        (__retres_5 := (Unsafe_int32.(-)  !c1 !c2 ));
         begin (return := !__retres_5); (raise Return) end end end end end))))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_strlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_6 : (pointer voidP)) 
   (voidP_s_6_71_alloc_table : (alloc_table voidP)) 
    (voidP_s_6_71_tag_table : (tag_table voidP)) 
     (charP_charM_s_6_71 : (memory voidP Int8.t)) : Uint64.t
      requires {
        ("expl:Internal"
        (#"/home/work/workspace/self/verker/strlen.h" 80 13 25#
        "expl:Requires clause"
        (valid_str s_6 voidP_s_6_71_alloc_table charP_charM_s_6_71))) }
      ensures {
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
         "expl:Ensures clause"
         (Uint64.(=) result (strlen s_6 charP_charM_s_6_71)))
        /\
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
         "expl:Ensures clause"
         (Int8.(=)
         (select charP_charM_s_6_71 (shift s_6 (Uint64.to_int result)))
         (#"whole_program.jc" 3777 37 48# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
        "expl:Ensures clause"
        (forall i_35_0 : int.
         ((((<=) (0) i_35_0) /\ ((<) i_35_0 (Uint64.to_int result))) ->
          (Int8.(<>) (select charP_charM_s_6_71 (shift s_6 i_35_0))
          (#"whole_program.jc" 3782 42 53# "expl:Integer cast" (Int8.of_int
          (0)))))))))))) }
  
end

module Function_strcat_safety
#"/home/work/workspace/self/verker/strcat.c" 3 5 41# "expl:strcat, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcat #"/home/work/workspace/self/verker/strcat.c" 3 5 41#
  "expl:Function strcat, safety" =
  fun
   (dest_6 : (pointer voidP)) (src_5 : (pointer voidP))
   (charP_charM_dest_6_39 : ref (memory voidP Int8.t))
   (voidP_dest_6_39_alloc_table : (alloc_table voidP))
   (voidP_src_5_40_alloc_table : (alloc_table voidP))
   (voidP_src_5_40_tag_table : (tag_table voidP)) (voidP_dest_6_39_tag_table
   : (tag_table voidP)) (charP_charM_src_5_40 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_5_40_alloc_table src_5) ->
     (((=) (typeof voidP_src_5_40_tag_table src_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_5_40_alloc_table src_5) i) /\
       ((<) i (offset_max voidP_src_5_40_alloc_table src_5))) ->
       ((=) (typeof voidP_src_5_40_tag_table (shift src_5 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_6_39_alloc_table dest_6) ->
     (((=) (typeof voidP_dest_6_39_tag_table dest_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_6_39_alloc_table dest_6) i) /\
       ((<) i (offset_max voidP_dest_6_39_alloc_table dest_6))) ->
       ((=) (typeof voidP_dest_6_39_tag_table (shift dest_6 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 12 13 27#
    (valid_str src_5 voidP_src_5_40_alloc_table charP_charM_src_5_40))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 13 13 28#
    (valid_str dest_6 voidP_dest_6_39_alloc_table !charP_charM_dest_6_39))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 14 13 63#
    ((<=)
    (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))
    (18446744073709551615)))
   /\
   (#"/home/work/workspace/self/verker/strcat.h" 16 13 55#
   (if
    ((<=) (0)
    (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))) then
    (((<=) (offset_min voidP_dest_6_39_alloc_table dest_6) (0)) /\
    (((>=) (offset_max voidP_dest_6_39_alloc_table dest_6)
     (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
     (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))
    /\
    (forall __framac_tmp21 : int.
     ((((<=) (0) __framac_tmp21) /\
      ((<=) __framac_tmp21
      (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_dest_6 = ref dest_6 in
   (let mutable_src_5 = ref src_5 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
    (let dest_len = ref (Safe_uint64.any_  () ) in
    (let osrc = ref (any_pointer  () : (pointer voidP)) in
    (let mdest = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Safe_int8.any_  () ) in
    (let tmp_3_0 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     try
      begin
      (tmp_0_11 :=
       (let _jessie_702 = !mutable_dest_6 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcat.c" 5 6 10#
       "expl:Pointer index bounds" true) }); _jessie_702 end));
       begin
       (dest_len :=
        (let _jessie_699 =
        (let _jessie_700 = !tmp_0_11 in
        (#"/home/work/workspace/self/verker/strcat.c" 6 29 40#
        "expl:Precondition for strlen"
        (Function_strlen_0_safe.strlen_0  _jessie_700
         voidP_dest_6_39_alloc_table voidP_dest_6_39_tag_table
         !charP_charM_dest_6_39 ))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcat.c" 6 29 40#
        "expl:Pointer index bounds" true) }); _jessie_699 end));
        'Loop_37:
        loop
        invariant { (#"whole_program.jc" 2135 6 1312# true) }
          variant { (#"/home/work/workspace/self/verker/strcat.c" 11 18 41#
            (Int.(-) (Uint64.to_int !dest_len)
            (sub_pointer !mutable_dest_6 !tmp_0_11))) }
         begin
         any unit
         requires { true } reads { charP_charM_dest_6_39, mutable_dest_6 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcat.c" 10 20 77#
            (forall i_23 : int.
             ((((<=) (0) i_23) /\
              ((<) i_23 (sub_pointer !mutable_dest_6 !tmp_0_11))) ->
              (Int8.(<>)
              (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_23))
              (#"whole_program.jc" 2152 57 68# "expl:Integer cast"
              (Int8.of_int (0)))))))
           /\
           ((#"/home/work/workspace/self/verker/strcat.c" 9 20 35#
            (valid_str !mutable_dest_6 voidP_dest_6_39_alloc_table
            !charP_charM_dest_6_39))
           /\
           (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
           (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker/strcat.c" 8 20 31#
            (same_block !tmp_0_11 !mutable_dest_6))
           /\
           (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker/strcat.c" 8 20 31#
            ((<=) (sub_pointer !tmp_0_11 !mutable_dest_6) (0)))
           /\
           (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
           ((#"/home/work/workspace/self/verker/strcat.c" 8 27 49#
            (same_block !mutable_dest_6
            (shift !tmp_0_11 (Uint64.to_int !dest_len))))
           /\
           (#"/home/work/workspace/self/verker/strcat.c" 8 27 49#
           ((<=)
           (sub_pointer !mutable_dest_6
           (shift !tmp_0_11 (Uint64.to_int !dest_len))) (0)))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strcat.c" 13 8 13#
           (Safe_int8.(<>) 
            (#"/home/work/workspace/self/verker/strcat.c" 13 8 13#
            "expl:Pointer dereference"
            (acc  voidP_dest_6_39_alloc_table !charP_charM_dest_6_39
             !mutable_dest_6 ))
            (#"whole_program.jc" 2156 64 75# "expl:Integer cast"
            (Safe_int8.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_8_exc ())));
            (mutable_dest_6 :=
             (let _jessie_701 =
             (shift_typesafe  !mutable_dest_6
              (Safe_int32.to_int 
               (#"whole_program.jc" 2158 52 64# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcat.c" 14 2 8#
             "expl:Pointer index bounds" true) }); _jessie_701 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_44 -> () end end end;
        (raise (Goto_while_0_break_8_exc ())) end end with
      Goto_while_0_break_8_exc _jessie_41 ->
      'While_0_break_8:
      'While_0_break_8:
      begin
      ();
       begin
       any unit
       requires { true } reads { charP_charM_dest_6_39, mutable_dest_6 }
       ensures {
         (#"/home/work/workspace/self/verker/strcat.c" 15 12 25#
         (Int8.(=) (select !charP_charM_dest_6_39 !mutable_dest_6)
         (#"whole_program.jc" 2165 52 63# "expl:Integer cast" (Int8.of_int
         (0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_dest_6 }
       ensures {
         (#"/home/work/workspace/self/verker/strcat.c" 16 12 34#
         ((=) !mutable_dest_6 (shift !tmp_0_11 (Uint64.to_int !dest_len)))) } ;
        () end;
       begin
       any unit
       requires { true } reads { charP_charM_dest_6_39 }
       ensures {
         (#"/home/work/workspace/self/verker/strcat.c" 17 12 35#
         (Uint64.(=) (strlen !tmp_0_11 !charP_charM_dest_6_39) !dest_len)) } ;
        () end;
       begin
       (osrc :=
        (let _jessie_703 = !mutable_src_5 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcat.c" 18 17 21#
        "expl:Pointer index bounds" true) }); _jessie_703 end));
        begin
        (mdest :=
         (let _jessie_704 = !mutable_dest_6 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcat.c" 19 17 22#
         "expl:Pointer index bounds" true) }); _jessie_704 end));
         'Loop_38:
         loop
         invariant { (#"whole_program.jc" 2184 6 2848# true) }
           variant { (#"/home/work/workspace/self/verker/strcat.c" 29 18 45#
             (Int.(-) (Uint64.to_int (strlen !osrc charP_charM_src_5_40))
             (sub_pointer !mutable_src_5 !osrc))) }
          begin
          any unit
          requires { true } reads { charP_charM_dest_6_39, mutable_dest_6,
          mutable_src_5 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcat.c" 27 20 77#
             (forall i_25 : int.
              ((((<=) (0) i_25) /\
               ((<) i_25 (sub_pointer !mutable_dest_6 !tmp_0_11))) ->
               (Int8.(<>)
               (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_25))
               (#"whole_program.jc" 2220 57 68# "expl:Integer cast"
               (Int8.of_int (0)))))))
            /\
            ((#"/home/work/workspace/self/verker/strcat.c" 25 20 102#
             (forall i_24 : int.
              ((((<=) (0) i_24) /\
               ((<) i_24 (sub_pointer !mutable_src_5 !osrc))) ->
               (Int8.(=) (select !charP_charM_dest_6_39 (shift !mdest i_24))
               (select charP_charM_src_5_40 (shift !osrc i_24))))))
            /\
            ((#"/home/work/workspace/self/verker/strcat.c" 24 20 34#
             (valid_str !mutable_src_5 voidP_src_5_40_alloc_table
             charP_charM_src_5_40))
            /\
            ((#"/home/work/workspace/self/verker/strcat.c" 23 20 46#
             ((=) (sub_pointer !mutable_src_5 !osrc)
             (sub_pointer !mutable_dest_6 !mdest)))
            /\
            ((#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
             (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
             ((#"/home/work/workspace/self/verker/strcat.c" 22 20 33#
              (same_block !mdest !mutable_dest_6))
             /\
             (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
             ((#"/home/work/workspace/self/verker/strcat.c" 22 20 33#
              ((<=) (sub_pointer !mdest !mutable_dest_6) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
             ((#"/home/work/workspace/self/verker/strcat.c" 22 29 57#
              (same_block !mutable_dest_6
              (shift !mdest
              (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))
             /\
             (#"/home/work/workspace/self/verker/strcat.c" 22 29 57#
             ((<=)
             (sub_pointer !mutable_dest_6
             (shift !mdest
             (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))) (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
            (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
            ((#"/home/work/workspace/self/verker/strcat.c" 21 20 31#
             (same_block !osrc !mutable_src_5))
            /\
            (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
            ((#"/home/work/workspace/self/verker/strcat.c" 21 20 31#
             ((<=) (sub_pointer !osrc !mutable_src_5) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
            ((#"/home/work/workspace/self/verker/strcat.c" 21 28 54#
             (same_block !mutable_src_5
             (shift !osrc
             (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))
            /\
            (#"/home/work/workspace/self/verker/strcat.c" 21 28 54#
            ((<=)
            (sub_pointer !mutable_src_5
            (shift !osrc (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))
            (0))))))))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_1_3 :=
             (let _jessie_705 = !mutable_dest_6 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcat.c" 31 10 16#
             "expl:Pointer index bounds" true) }); _jessie_705 end));
             begin
             (mutable_dest_6 :=
              (let _jessie_706 =
              (shift_typesafe  !mutable_dest_6
               (Safe_int32.to_int 
                (#"whole_program.jc" 2229 55 67# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcat.c" 31 10 16#
              "expl:Pointer index bounds" true) }); _jessie_706 end));
              begin
              (tmp_3_0 :=
               (let _jessie_707 = !mutable_src_5 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcat.c" 31 20 25#
               "expl:Pointer index bounds" true) }); _jessie_707 end));
               begin
               (mutable_src_5 :=
                (let _jessie_708 =
                (shift_typesafe  !mutable_src_5
                 (Safe_int32.to_int 
                  (#"whole_program.jc" 2231 53 65# "expl:Integer cast"
                  (Safe_int32.of_int (1))) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/strcat.c" 31 20 25#
                "expl:Pointer index bounds" true) }); _jessie_708 end));
                (tmp_2_2 :=
                 (let _jessie_709 =
                 (#"/home/work/workspace/self/verker/strcat.c" 31 19 25#
                 "expl:Pointer dereference"
                 (acc  voidP_src_5_40_alloc_table charP_charM_src_5_40
                  !tmp_3_0 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/strcat.c" 31 9 25#
                 "expl:Pointer index bounds" true) }); _jessie_709 end)) end
              end end end;
             begin
             (let _jessie_711 =
             (let _jessie_710 = !tmp_2_2 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcat.c" 31 9 25#
             "expl:Pointer index bounds" true) }); _jessie_710 end) in
             (let _jessie_712 = !tmp_1_3 in
             (let _jessie_713 = (0) in
             (let _jessie_714 = _jessie_712 in
             (#"/home/work/workspace/self/verker/strcat.c" 31 9 25#
             "expl:Pointer dereference"
             (upd  voidP_dest_6_39_alloc_table charP_charM_dest_6_39
              _jessie_712 _jessie_711 ))))));
              (if
              (#"/home/work/workspace/self/verker/strcat.c" 31 8 34#
              (Safe_int32.(<>) 
               (#"/home/work/workspace/self/verker/strcat.c" 31 9 25#
               "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_2_2 ))
               (#"whole_program.jc" 2235 60 72# "expl:Integer cast"
               (Safe_int32.of_int (0))) )) then ()
              else (raise (Goto_while_1_break_exc ()))) end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_46 -> () end end end end end end end;
      (raise (Goto_while_1_break_exc ())) end with Goto_while_1_break_exc
     _jessie_42 ->
     'While_1_break:
     'While_1_break:
     begin
     ();
      begin
      any unit
      requires { true } reads { charP_charM_dest_6_39, mutable_dest_6 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 33 12 79#
        (forall i_26 : int.
         ((((<=) (0) i_26) /\ ((<) i_26 (Uint64.to_int !dest_len))) ->
          (Int8.(=)
          (select (at !charP_charM_dest_6_39 'Init)
          (shift (at !mutable_dest_6 'Init) i_26))
          (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_26)))))) } ; ()
      end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_6_39, mutable_dest_6,
      mutable_src_5 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
        (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
        ((#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
         (Int8.(=)
         (select !charP_charM_dest_6_39
         (shift !mutable_dest_6 (Int.(-_) (1))))
         (#"whole_program.jc" 2253 53 64# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
        (Int8.(=)
        (select charP_charM_src_5_40 (shift !mutable_src_5 (Int.(-_) (1))))
        (#"whole_program.jc" 2255 54 65# "expl:Integer cast" (Int8.of_int
        (0)))))))) } ; () end;
      begin
      any unit
      requires { true } reads { mutable_dest_6 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 35 12 53#
        ((=) (shift !mutable_dest_6 (Int.(-_) (1)))
        (shift (shift !tmp_0_11 (Uint64.to_int !dest_len))
        (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))) } ; () end;
      begin
      any unit
      requires { true } reads { mutable_src_5 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 36 12 42#
        ((=) (Uint64.to_int (strlen !osrc charP_charM_src_5_40))
        (Int.(-) (sub_pointer !mutable_src_5 !osrc) (1)))) } ; () end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_6_39 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 37 12 109#
        (exists n_0 : Uint64.t.
         ((Int8.(=)
          (select !charP_charM_dest_6_39
          (shift !tmp_0_11 (Uint64.to_int n_0)))
          (#"whole_program.jc" 2277 56 67# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         ((if ((<=) (0) (Uint64.to_int n_0)) then
           (((<=) (offset_min voidP_dest_6_39_alloc_table !tmp_0_11) (0)) /\
           (((>=) (offset_max voidP_dest_6_39_alloc_table !tmp_0_11)
            (Uint64.to_int n_0))
           /\
           (forall __framac_tmp20 : int.
            ((((<=) (0) __framac_tmp20) /\
             ((<=) __framac_tmp20 (Uint64.to_int n_0))) -> ((=) true true)))))
           else ((=) true true))
         /\
         (Uint64.(=) n_0 (#"whole_program.jc" 2293 56 244#
         "expl:Integer cast"
         (Uint64.of_int
         (Int.(+) (Uint64.to_int !dest_len)
         (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))))))) } ; ()
      end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_6_39 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
        (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
        ((#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
         (valid_str !tmp_0_11 voidP_dest_6_39_alloc_table
         !charP_charM_dest_6_39))
        /\
        (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
        ((#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
         (Int8.(=)
         (select !charP_charM_dest_6_39
         (shift !tmp_0_11
         (Uint64.to_int (#"whole_program.jc" 2302 57 247# "expl:Integer cast"
         (Uint64.of_int
         (Int.(+) (Uint64.to_int !dest_len)
         (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))))))
         (#"whole_program.jc" 2305 55 66# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
        (forall i_27 : int.
         ((((<=) (0) i_27) /\
          ((<) i_27
          (Uint64.to_int (#"whole_program.jc" 2309 60 256#
          "expl:Integer cast"
          (Uint64.of_int
          (Int.(+) (Uint64.to_int !dest_len)
          (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))))) ->
          (Int8.(<>) (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_27))
          (#"whole_program.jc" 2313 58 69# "expl:Integer cast" (Int8.of_int
          (0)))))))))))) } ; () end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_6_39 }
      ensures {
        (#"/home/work/workspace/self/verker/strcat.c" 42 12 61#
        (Uint64.(=) (strlen !tmp_0_11 !charP_charM_dest_6_39)
        (#"whole_program.jc" 2319 52 232# "expl:Integer cast"
        (Uint64.of_int
        (Int.(+) (Uint64.to_int !dest_len)
        (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))))) } ; () end;
      begin
      (return :=
       (let _jessie_715 = !tmp_0_11 in
       begin
       (assert {
       (#"whole_program.jc" 2325 7 22# "expl:Pointer index bounds" true) });
        _jessie_715 end)); (raise Return) end end end))))))); absurd  end
    with Return -> !return end)))
  
end

module Function_strlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_6 : (pointer voidP)) 
   (voidP_s_6_71_alloc_table : (alloc_table voidP)) 
    (voidP_s_6_71_tag_table : (tag_table voidP)) 
     (charP_charM_s_6_71 : (memory voidP Int8.t)) : Uint64.t
      requires { true }
      ensures {
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
         "expl:Ensures clause"
         (Uint64.(=) result (strlen s_6 charP_charM_s_6_71)))
        /\
        (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
         "expl:Ensures clause"
         (Int8.(=)
         (select charP_charM_s_6_71 (shift s_6 (Uint64.to_int result)))
         (#"whole_program.jc" 3777 37 48# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
        "expl:Ensures clause"
        (forall i_35_0 : int.
         ((((<=) (0) i_35_0) /\ ((<) i_35_0 (Uint64.to_int result))) ->
          (Int8.(<>) (select charP_charM_s_6_71 (shift s_6 i_35_0))
          (#"whole_program.jc" 3782 42 53# "expl:Integer cast" (Int8.of_int
          (0)))))))))))) }
  
end

module Function_strcat_behaviors
#"/home/work/workspace/self/verker/strcat.c" 3 5 41# "expl:strcat, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcat_ensures_default
  #"/home/work/workspace/self/verker/strcat.c" 3 5 41#
  "expl:Function strcat, default behavior" =
  fun
   (dest_6 : (pointer voidP)) (src_5 : (pointer voidP))
   (charP_charM_dest_6_39 : ref (memory voidP Int8.t))
   (voidP_dest_6_39_alloc_table : (alloc_table voidP))
   (voidP_src_5_40_alloc_table : (alloc_table voidP))
   (voidP_src_5_40_tag_table : (tag_table voidP)) (voidP_dest_6_39_tag_table
   : (tag_table voidP)) (charP_charM_src_5_40 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_5_40_alloc_table src_5) ->
     (((=) (typeof voidP_src_5_40_tag_table src_5) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_5_40_alloc_table src_5) i) /\
       ((<) i (offset_max voidP_src_5_40_alloc_table src_5))) ->
       ((=) (typeof voidP_src_5_40_tag_table (shift src_5 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_6_39_alloc_table dest_6) ->
     (((=) (typeof voidP_dest_6_39_tag_table dest_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_6_39_alloc_table dest_6) i) /\
       ((<) i (offset_max voidP_dest_6_39_alloc_table dest_6))) ->
       ((=) (typeof voidP_dest_6_39_tag_table (shift dest_6 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 12 13 27#
    (valid_str src_5 voidP_src_5_40_alloc_table charP_charM_src_5_40))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 13 13 28#
    (valid_str dest_6 voidP_dest_6_39_alloc_table !charP_charM_dest_6_39))
   /\
   (#"whole_program.jc" 2073 12 1288#
   ((#"/home/work/workspace/self/verker/strcat.h" 14 13 63#
    ((<=)
    (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))
    (18446744073709551615)))
   /\
   (#"/home/work/workspace/self/verker/strcat.h" 16 13 55#
   (if
    ((<=) (0)
    (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
    (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))) then
    (((<=) (offset_min voidP_dest_6_39_alloc_table dest_6) (0)) /\
    (((>=) (offset_max voidP_dest_6_39_alloc_table dest_6)
     (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
     (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))
    /\
    (forall __framac_tmp21 : int.
     ((((<=) (0) __framac_tmp21) /\
      ((<=) __framac_tmp21
      (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
      ((=) true true))))) else ((=) true true))))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 2093 10 192# "expl:Assigns clause"
      (not_assigns voidP_dest_6_39_alloc_table voidP_dest_6_39_alloc_table
      (old !charP_charM_dest_6_39) !charP_charM_dest_6_39
      (pset_range (pset_singleton dest_6)
      (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
      (Int.(+) (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
      (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))))
     /\
     (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
      "expl:Ensures clause" ((=) result dest_6))
     /\
     (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcat.h" 19 12 30#
      "expl:Ensures clause"
      (valid_str result voidP_dest_6_39_alloc_table !charP_charM_dest_6_39))
     /\
     (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcat.h" 20 12 101#
      "expl:Ensures clause"
      (forall i_21_0 : int.
       ((((<=) (0) i_21_0) /\
        ((<) i_21_0
        (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39))))) ->
        (Int8.(=) (select (old !charP_charM_dest_6_39) (shift dest_6 i_21_0))
        (select !charP_charM_dest_6_39 (shift result i_21_0))))))
     /\
     (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcat.h" 22 12 156#
      "expl:Ensures clause"
      (forall i_22_0 : int.
       ((((<=) (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
         i_22_0)
        /\
        ((<) i_22_0
        (Int.(+) (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
        (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
        (Int8.(=)
        (select charP_charM_src_5_40
        (shift src_5
        (Int.(-) i_22_0
        (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39))))))
        (select !charP_charM_dest_6_39 (shift result i_22_0))))))
     /\
     (#"/home/work/workspace/self/verker/strcat.h" 25 12 62#
     "expl:Ensures clause"
     ((=) (Uint64.to_int (strlen result !charP_charM_dest_6_39))
     (Int.(+) (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
     (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))))))))))))))) }
   diverges  ->
   (let mutable_dest_6 = ref dest_6 in
   (let mutable_src_5 = ref src_5 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_11 = ref (any_pointer  () : (pointer voidP)) in
    (let dest_len = ref (Unsafe_uint64.any_  () ) in
    (let osrc = ref (any_pointer  () : (pointer voidP)) in
    (let mdest = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_3 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2_2 = ref (Unsafe_int8.any_  () ) in
    (let tmp_3_0 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     try
      begin
      (tmp_0_11 := !mutable_dest_6);
       begin
       (dest_len :=
        (let _jessie_683 = !tmp_0_11 in
        (#"/home/work/workspace/self/verker/strcat.c" 6 29 40#
        "expl:Precondition for strlen"
        (Function_strlen_0.strlen_0  _jessie_683 voidP_dest_6_39_alloc_table
         voidP_dest_6_39_tag_table !charP_charM_dest_6_39 ))));
        'Loop_35:
        loop
        invariant
          { (((#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
              (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker/strcat.c" 8 20 31#
               (same_block !tmp_0_11 !mutable_dest_6))
              /\
              (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker/strcat.c" 8 20 31#
               ((<=) (sub_pointer !tmp_0_11 !mutable_dest_6) (0)))
              /\
              (#"/home/work/workspace/self/verker/strcat.c" 8 20 49#
              ((#"/home/work/workspace/self/verker/strcat.c" 8 27 49#
               (same_block !mutable_dest_6
               (shift !tmp_0_11 (Uint64.to_int !dest_len))))
              /\
              (#"/home/work/workspace/self/verker/strcat.c" 8 27 49#
              ((<=)
              (sub_pointer !mutable_dest_6
              (shift !tmp_0_11 (Uint64.to_int !dest_len))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/strcat.c" 9 20 35#
              (valid_str !mutable_dest_6 voidP_dest_6_39_alloc_table
              !charP_charM_dest_6_39))
             &&
             (#"/home/work/workspace/self/verker/strcat.c" 10 20 77#
             (forall i_23 : int.
              ((((<=) (0) i_23) /\
               ((<) i_23 (sub_pointer !mutable_dest_6 !tmp_0_11))) ->
               (Int8.(<>)
               (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_23))
               (#"whole_program.jc" 2152 57 68# "expl:Integer cast"
               (Int8.of_int (0)))))))))
            /\
            (#"whole_program.jc" 2093 10 192# "expl:Assigns clause"
            (not_assigns voidP_dest_6_39_alloc_table
            voidP_dest_6_39_alloc_table (at !charP_charM_dest_6_39 'Init)
            !charP_charM_dest_6_39
            (pset_range (pset_singleton (at !mutable_dest_6 'Init))
            (Uint64.to_int
            (strlen (at !mutable_dest_6 'Init) (at !charP_charM_dest_6_39
            'Init)))
            (Int.(+)
            (Uint64.to_int
            (strlen (at !mutable_dest_6 'Init) (at !charP_charM_dest_6_39
            'Init)))
            (Uint64.to_int
            (strlen (at !mutable_src_5 'Init) charP_charM_src_5_40))))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strcat.c" 13 8 13#
           (Unsafe_int8.(<>)  (acc  !charP_charM_dest_6_39 !mutable_dest_6 )
            (#"whole_program.jc" 2156 64 75# "expl:Integer cast"
            (Unsafe_int8.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_8_exc ())));
            (mutable_dest_6 :=
             (shift_  !mutable_dest_6
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 2158 52 64# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_44 -> () end end end;
        (raise (Goto_while_0_break_8_exc ())) end end with
      Goto_while_0_break_8_exc _jessie_41 ->
      'While_0_break_8:
      'While_0_break_8:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcat.c" 15 12 25#
       "expl:Assertion in line 15"
       (Int8.(=) (select !charP_charM_dest_6_39 !mutable_dest_6)
       (#"whole_program.jc" 2165 52 63# "expl:Integer cast" (Int8.of_int
       (0))))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcat.c" 16 12 34#
       "expl:Assertion in line 16"
       ((=) !mutable_dest_6 (shift !tmp_0_11 (Uint64.to_int !dest_len)))) });
        () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcat.c" 17 12 35#
       "expl:Assertion in line 17"
       (Uint64.(=) (strlen !tmp_0_11 !charP_charM_dest_6_39) !dest_len)) });
        () end;
       begin
       (osrc := !mutable_src_5);
        begin
        (mdest := !mutable_dest_6);
         'Loop_36:
         loop
         invariant
           { (((#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
               (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
               ((#"/home/work/workspace/self/verker/strcat.c" 21 20 31#
                (same_block !osrc !mutable_src_5))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
               ((#"/home/work/workspace/self/verker/strcat.c" 21 20 31#
                ((<=) (sub_pointer !osrc !mutable_src_5) (0)))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 21 20 54#
               ((#"/home/work/workspace/self/verker/strcat.c" 21 28 54#
                (same_block !mutable_src_5
                (shift !osrc
                (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 21 28 54#
               ((<=)
               (sub_pointer !mutable_src_5
               (shift !osrc
               (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
               (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
               ((#"/home/work/workspace/self/verker/strcat.c" 22 20 33#
                (same_block !mdest !mutable_dest_6))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
               ((#"/home/work/workspace/self/verker/strcat.c" 22 20 33#
                ((<=) (sub_pointer !mdest !mutable_dest_6) (0)))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 22 20 57#
               ((#"/home/work/workspace/self/verker/strcat.c" 22 29 57#
                (same_block !mutable_dest_6
                (shift !mdest
                (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))
               /\
               (#"/home/work/workspace/self/verker/strcat.c" 22 29 57#
               ((<=)
               (sub_pointer !mutable_dest_6
               (shift !mdest
               (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/strcat.c" 23 20 46#
               ((=) (sub_pointer !mutable_src_5 !osrc)
               (sub_pointer !mutable_dest_6 !mdest)))
              &&
              ((#"/home/work/workspace/self/verker/strcat.c" 24 20 34#
               (valid_str !mutable_src_5 voidP_src_5_40_alloc_table
               charP_charM_src_5_40))
              &&
              ((#"/home/work/workspace/self/verker/strcat.c" 25 20 102#
               (forall i_24 : int.
                ((((<=) (0) i_24) /\
                 ((<) i_24 (sub_pointer !mutable_src_5 !osrc))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_6_39 (shift !mdest i_24))
                 (select charP_charM_src_5_40 (shift !osrc i_24))))))
              &&
              (#"/home/work/workspace/self/verker/strcat.c" 27 20 77#
              (forall i_25 : int.
               ((((<=) (0) i_25) /\
                ((<) i_25 (sub_pointer !mutable_dest_6 !tmp_0_11))) ->
                (Int8.(<>)
                (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_25))
                (#"whole_program.jc" 2220 57 68# "expl:Integer cast"
                (Int8.of_int (0))))))))))))
             /\
             ((#"whole_program.jc" 2184 6 2848# "expl:Assigns clause"
              (not_assigns voidP_dest_6_39_alloc_table
              voidP_dest_6_39_alloc_table (at !charP_charM_dest_6_39
              'Loop_36) !charP_charM_dest_6_39
              (pset_range (pset_singleton !mdest) (0)
              (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))
             /\
             (#"whole_program.jc" 2093 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_6_39_alloc_table
             voidP_dest_6_39_alloc_table (at !charP_charM_dest_6_39 'Init)
             !charP_charM_dest_6_39
             (pset_range (pset_singleton (at !mutable_dest_6 'Init))
             (Uint64.to_int
             (strlen (at !mutable_dest_6 'Init) (at !charP_charM_dest_6_39
             'Init)))
             (Int.(+)
             (Uint64.to_int
             (strlen (at !mutable_dest_6 'Init) (at !charP_charM_dest_6_39
             'Init)))
             (Uint64.to_int
             (strlen (at !mutable_src_5 'Init) charP_charM_src_5_40)))))))) } 
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_1_3 := !mutable_dest_6);
             begin
             (mutable_dest_6 :=
              (shift_  !mutable_dest_6
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 2229 55 67# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              begin
              (tmp_3_0 := !mutable_src_5);
               begin
               (mutable_src_5 :=
                (shift_  !mutable_src_5
                 (Unsafe_int32.to_int 
                  (#"whole_program.jc" 2231 53 65# "expl:Integer cast"
                  (Unsafe_int32.of_int (1))) ) ));
                (tmp_2_2 := (acc  charP_charM_src_5_40 !tmp_3_0 )) end end
             end end;
             begin
             (let _jessie_694 = !tmp_2_2 in
             (let _jessie_695 = !tmp_1_3 in
             (let _jessie_696 = (0) in
             (let _jessie_697 = _jessie_695 in
             (upd  charP_charM_dest_6_39 _jessie_697 _jessie_694 )))));
              (if
              (#"/home/work/workspace/self/verker/strcat.c" 31 8 34#
              (Unsafe_int32.(<>) 
               (#"/home/work/workspace/self/verker/strcat.c" 31 9 25#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_int8.cast  !tmp_2_2 ))
               (#"whole_program.jc" 2235 60 72# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) then ()
              else (raise (Goto_while_1_break_exc ()))) end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_46 -> () end end end end end end end;
      (raise (Goto_while_1_break_exc ())) end with Goto_while_1_break_exc
     _jessie_42 ->
     'While_1_break:
     'While_1_break:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 33 12 79#
      "expl:Assertion in line 33"
      (forall i_26 : int.
       ((((<=) (0) i_26) /\ ((<) i_26 (Uint64.to_int !dest_len))) ->
        (Int8.(=)
        (select (at !charP_charM_dest_6_39 'Init)
        (shift (at !mutable_dest_6 'Init) i_26))
        (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_26)))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
      "expl:Assertion in line 34"
      (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
      "expl:Assertion in line 34"
      ((#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
       "expl:Assertion in line 34"
       (Int8.(=)
       (select !charP_charM_dest_6_39 (shift !mutable_dest_6 (Int.(-_) (1))))
       (#"whole_program.jc" 2253 53 64# "expl:Integer cast" (Int8.of_int
       (0)))))
      /\
      (#"/home/work/workspace/self/verker/strcat.c" 34 12 47#
      "expl:Assertion in line 34"
      (Int8.(=)
      (select charP_charM_src_5_40 (shift !mutable_src_5 (Int.(-_) (1))))
      (#"whole_program.jc" 2255 54 65# "expl:Integer cast" (Int8.of_int
      (0)))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 35 12 53#
      "expl:Assertion in line 35"
      ((=) (shift !mutable_dest_6 (Int.(-_) (1)))
      (shift (shift !tmp_0_11 (Uint64.to_int !dest_len))
      (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 36 12 42#
      "expl:Assertion in line 36"
      ((=) (Uint64.to_int (strlen !osrc charP_charM_src_5_40))
      (Int.(-) (sub_pointer !mutable_src_5 !osrc) (1)))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 37 12 109#
      "expl:Assertion in line 37"
      (exists n_0 : Uint64.t.
       ((Int8.(=)
        (select !charP_charM_dest_6_39 (shift !tmp_0_11 (Uint64.to_int n_0)))
        (#"whole_program.jc" 2277 56 67# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       ((if ((<=) (0) (Uint64.to_int n_0)) then
         (((<=) (offset_min voidP_dest_6_39_alloc_table !tmp_0_11) (0)) /\
         (((>=) (offset_max voidP_dest_6_39_alloc_table !tmp_0_11)
          (Uint64.to_int n_0))
         /\
         (forall __framac_tmp20 : int.
          ((((<=) (0) __framac_tmp20) /\
           ((<=) __framac_tmp20 (Uint64.to_int n_0))) -> ((=) true true)))))
         else ((=) true true))
       /\
       (Uint64.(=) n_0 (#"whole_program.jc" 2293 56 244# "expl:Integer cast"
       (Uint64.of_int
       (Int.(+) (Uint64.to_int !dest_len)
       (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
      "expl:Assertion in line 38"
      (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
      "expl:Assertion in line 38"
      ((#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
       "expl:Assertion in line 38"
       (valid_str !tmp_0_11 voidP_dest_6_39_alloc_table
       !charP_charM_dest_6_39))
      /\
      (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
      "expl:Assertion in line 38"
      ((#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
       "expl:Assertion in line 38"
       (Int8.(=)
       (select !charP_charM_dest_6_39
       (shift !tmp_0_11
       (Uint64.to_int (#"whole_program.jc" 2302 57 247# "expl:Integer cast"
       (Uint64.of_int
       (Int.(+) (Uint64.to_int !dest_len)
       (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))))))
       (#"whole_program.jc" 2305 55 66# "expl:Integer cast" (Int8.of_int
       (0)))))
      /\
      (#"/home/work/workspace/self/verker/strcat.c" 38 12 174#
      "expl:Assertion in line 38"
      (forall i_27 : int.
       ((((<=) (0) i_27) /\
        ((<) i_27
        (Uint64.to_int (#"whole_program.jc" 2309 60 256# "expl:Integer cast"
        (Uint64.of_int
        (Int.(+) (Uint64.to_int !dest_len)
        (Uint64.to_int (strlen !osrc charP_charM_src_5_40)))))))) ->
        (Int8.(<>) (select !charP_charM_dest_6_39 (shift !tmp_0_11 i_27))
        (#"whole_program.jc" 2313 58 69# "expl:Integer cast" (Int8.of_int
        (0)))))))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcat.c" 42 12 61#
      "expl:Assertion in line 42"
      (Uint64.(=) (strlen !tmp_0_11 !charP_charM_dest_6_39)
      (#"whole_program.jc" 2319 52 232# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (Uint64.to_int !dest_len)
      (Uint64.to_int (strlen !osrc charP_charM_src_5_40))))))) }); () end;
      begin (return := !tmp_0_11); (raise Return) end end end))))))); 
     absurd  end with Return -> !return end)))
  
end

theory Axiomatic_Strchr

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  function strchr (str_7 : (pointer voidP)) (c_13_0 : Int8.t)
  (charP_charM_str_7_42_at_L : (memory voidP Int8.t)) : (pointer voidP)
  =
     (if (Int8.(=) (select charP_charM_str_7_42_at_L str_7) c_13_0) then
      str_7 else
      (if
       (Int8.(=) (select charP_charM_str_7_42_at_L str_7)
       (#"whole_program.jc" 2333 54 65# "expl:Integer cast" (Int8.of_int
       (0)))) then null else
       (strchr (shift str_7 (1)) c_13_0 charP_charM_str_7_42_at_L)))
  
  
  lemma Strchr_mem #"/home/work/workspace/self/verker/strchr.h" 12 7 146#
  "expl:Lemma strchr_mem" :
  (forall voidP_str_8_199_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_8_199_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 12 7 146#
    (forall str_8 : (pointer voidP).
     (forall c_14_0 : Int8.t.
      ((valid_str str_8 voidP_str_8_199_alloc_table_at_L
       charP_charM_str_8_199_at_L) ->
       (((same_block str_8 (strchr str_8 c_14_0 charP_charM_str_8_199_at_L))
        /\
        (((<=)
         (sub_pointer str_8 (strchr str_8 c_14_0 charP_charM_str_8_199_at_L))
         (0))
        /\
        ((same_block (strchr str_8 c_14_0 charP_charM_str_8_199_at_L)
         (shift str_8
         (Uint64.to_int (strlen str_8 charP_charM_str_8_199_at_L))))
        /\
        (((<=)
         (sub_pointer (strchr str_8 c_14_0 charP_charM_str_8_199_at_L)
         (shift str_8
         (Uint64.to_int (strlen str_8 charP_charM_str_8_199_at_L)))) (0))
        /\ (not ((=) (strchr str_8 c_14_0 charP_charM_str_8_199_at_L) null))))))
       \/
       (((=) (strchr str_8 c_14_0 charP_charM_str_8_199_at_L) null) /\
       (not
       ((same_block str_8 (strchr str_8 c_14_0 charP_charM_str_8_199_at_L))
       /\
       (((<=)
        (sub_pointer str_8 (strchr str_8 c_14_0 charP_charM_str_8_199_at_L))
        (0))
       /\
       ((same_block (strchr str_8 c_14_0 charP_charM_str_8_199_at_L)
        (shift str_8
        (Uint64.to_int (strlen str_8 charP_charM_str_8_199_at_L))))
       /\
       ((<=)
       (sub_pointer (strchr str_8 c_14_0 charP_charM_str_8_199_at_L)
       (shift str_8
       (Uint64.to_int (strlen str_8 charP_charM_str_8_199_at_L)))) (0))))))))))))))
  
  lemma Strchr_iter_one
  #"/home/work/workspace/self/verker/strchr.h" 17 7 128#
  "expl:Lemma strchr_iter_one" :
  (forall voidP_str_9_212_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_9_212_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 17 7 128#
    (forall str_9 : (pointer voidP).
     (forall c_15_0 : Int8.t.
      (((valid_str str_9 voidP_str_9_212_alloc_table_at_L
        charP_charM_str_9_212_at_L)
       /\
       ((Int8.(<>) (select charP_charM_str_9_212_at_L str_9) c_15_0) /\
       (Int8.(<>) (select charP_charM_str_9_212_at_L str_9)
       (#"whole_program.jc" 2364 35 46# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (strchr str_9 c_15_0 charP_charM_str_9_212_at_L)
       (strchr (shift str_9 (1)) c_15_0 charP_charM_str_9_212_at_L))))))))
  
  lemma Strchr_res #"/home/work/workspace/self/verker/strchr.h" 21 7 112#
  "expl:Lemma strchr_res" :
  (forall voidP_str_10_215_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_10_215_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 21 7 112#
    (forall str_10 : (pointer voidP).
     (forall c_16_0 : Int8.t.
      ((valid_str str_10 voidP_str_10_215_alloc_table_at_L
       charP_charM_str_10_215_at_L) ->
       ((((=) (strchr str_10 c_16_0 charP_charM_str_10_215_at_L) null) /\
        (not
        (Int8.(=)
        (select charP_charM_str_10_215_at_L
        (strchr str_10 c_16_0 charP_charM_str_10_215_at_L)) c_16_0)))
       \/
       ((Int8.(=)
        (select charP_charM_str_10_215_at_L
        (strchr str_10 c_16_0 charP_charM_str_10_215_at_L)) c_16_0)
       /\
       (not ((=) (strchr str_10 c_16_0 charP_charM_str_10_215_at_L) null))))))))))
  
  lemma Strchr_at_end_zero
  #"/home/work/workspace/self/verker/strchr.h" 25 7 101#
  "expl:Lemma strchr_at_end_zero" :
  (forall voidP_str_11_222_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_11_222_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 25 7 101#
    (forall str_11 : (pointer voidP).
     (forall c_17_0 : Int8.t.
      (((((<=) (offset_min voidP_str_11_222_alloc_table_at_L str_11) (0)) /\
        (((>=) (offset_max voidP_str_11_222_alloc_table_at_L str_11) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_str_11_222_at_L str_11)
       (#"whole_program.jc" 2382 36 47# "expl:Integer cast" (Int8.of_int
       (0))))) ->
       ((=) (strchr str_11 c_17_0 charP_charM_str_11_222_at_L) null)))))))
  
  lemma Strchr_at_end_char
  #"/home/work/workspace/self/verker/strchr.h" 29 7 96#
  "expl:Lemma strchr_at_end_char" :
  (forall voidP_str_12_225_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_12_225_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 29 7 96#
    (forall str_12 : (pointer voidP).
     (forall c_18_0 : Int8.t.
      (((((<=) (offset_min voidP_str_12_225_alloc_table_at_L str_12) (0)) /\
        (((>=) (offset_max voidP_str_12_225_alloc_table_at_L str_12) (0)) /\
        ((=) true true)))
       /\ (Int8.(=) (select charP_charM_str_12_225_at_L str_12) c_18_0)) ->
       ((=) (strchr str_12 c_18_0 charP_charM_str_12_225_at_L) str_12)))))))
  
  lemma Strchr_defn #"/home/work/workspace/self/verker/strchr.h" 34 7 206#
  "expl:Lemma strchr_defn" :
  (forall voidP_str_13_227_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_13_227_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 34 7 206#
    (forall str_13 : (pointer voidP).
     (forall c_19_0 : Int8.t.
      (forall i_23_0 : int.
       (((valid_str str_13 voidP_str_13_227_alloc_table_at_L
         charP_charM_str_13_227_at_L)
        /\
        (((<=) (0) i_23_0) /\
        (((<=) i_23_0
         (Uint64.to_int (strlen str_13 charP_charM_str_13_227_at_L)))
        /\
        ((forall j_4_0 : int.
          ((((<=) (0) j_4_0) /\ ((<) j_4_0 i_23_0)) ->
           (Int8.(<>)
           (select charP_charM_str_13_227_at_L (shift str_13 j_4_0)) c_19_0)))
        /\
        (Int8.(=) (select charP_charM_str_13_227_at_L (shift str_13 i_23_0))
        c_19_0))))) ->
        ((=) (shift str_13 i_23_0)
        (strchr str_13 c_19_0 charP_charM_str_13_227_at_L)))))))))
  
  lemma Strchr_skipped #"/home/work/workspace/self/verker/strchr.h" 40 7 142#
  "expl:Lemma strchr_skipped" :
  (forall voidP_str_14_229_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_14_229_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchr.h" 40 7 142#
    (forall str_14 : (pointer voidP).
     (forall c_20 : Int8.t.
      (forall i_24_0 : int.
       (((valid_str str_14 voidP_str_14_229_alloc_table_at_L
         charP_charM_str_14_229_at_L)
        /\
        (((<=) (0) i_24_0) /\
        (((<) i_24_0
         (sub_pointer (strchr str_14 c_20 charP_charM_str_14_229_at_L)
         str_14))
        /\
        ((<=)
        (sub_pointer (strchr str_14 c_20 charP_charM_str_14_229_at_L) str_14)
        (Uint64.to_int (strlen str_14 charP_charM_str_14_229_at_L)))))) ->
        (Int8.(<>) (select charP_charM_str_14_229_at_L (shift str_14 i_24_0))
        c_20))))))))
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strchr_0_safety
#"/home/work/workspace/self/verker/strchr.c" 3 5 34# "expl:strchr, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  let strchr_0 #"/home/work/workspace/self/verker/strchr.c" 3 5 34#
  "expl:Function strchr, safety" =
  fun
   (s_3_0 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_44_alloc_table :
   (alloc_table voidP)) (voidP_s_3_44_tag_table : (tag_table voidP))
   (charP_charM_s_3_44 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_3_44_alloc_table s_3_0) ->
     (((=) (typeof voidP_s_3_44_tag_table s_3_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_44_alloc_table s_3_0) i) /\
       ((<) i (offset_max voidP_s_3_44_alloc_table s_3_0))) ->
       ((=) (typeof voidP_s_3_44_tag_table (shift s_3_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchr.h" 53 13 25#
   (valid_str s_3_0 voidP_s_3_44_alloc_table charP_charM_s_3_44))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_3_0 = ref s_3_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os :=
        (let _jessie_731 = !mutable_s_3_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strchr.c" 5 17 19#
        "expl:Pointer index bounds" true) }); _jessie_731 end));
        'Loop_42:
        loop
        invariant { (#"whole_program.jc" 2517 6 1951# true) }
          variant { (#"/home/work/workspace/self/verker/strchr.c" 10 18 39#
            (Int.(-) (Uint64.to_int (strlen !os charP_charM_s_3_44))
            (sub_pointer !mutable_s_3_0 !os))) }
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strchr.c" 9 20 67#
            ((=)
            (strchr !mutable_s_3_0 (#"whole_program.jc" 2539 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_44)
            (strchr !os (#"whole_program.jc" 2540 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 8 20 69#
            (forall p_7 : (pointer voidP).
             (((same_block !os p_7) /\
              (((<=) (sub_pointer !os p_7) (0)) /\
              ((same_block p_7 !mutable_s_3_0) /\
              ((<) (sub_pointer p_7 !mutable_s_3_0) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_44 p_7)
              (#"whole_program.jc" 2537 44 59# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             (same_block !os !mutable_s_3_0))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             ((<=) (sub_pointer !os !mutable_s_3_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
             (same_block !mutable_s_3_0
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
            ((<=)
            (sub_pointer !mutable_s_3_0
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strchr.c" 6 20 32#
           (valid_str !mutable_s_3_0 voidP_s_3_44_alloc_table
           charP_charM_s_3_44))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strchr.c" 12 8 27#
           (Safe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchr.c" 12 8 10#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchr.c" 12 8 10#
             "expl:Pointer dereference"
             (acc  voidP_s_3_44_alloc_table charP_charM_s_3_44 !mutable_s_3_0
              )) ))
            (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_9_exc ())));
            (if
            (#"/home/work/workspace/self/verker/strchr.c" 13 6 16#
            (Safe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker/strchr.c" 13 6 8#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_int8.cast 
              (#"/home/work/workspace/self/verker/strchr.c" 13 6 8#
              "expl:Pointer dereference"
              (acc  voidP_s_3_44_alloc_table charP_charM_s_3_44
               !mutable_s_3_0 )) ))
             (#"whole_program.jc" 2548 28 40# "expl:Integer cast"
             (Safe_bit_int32.of_int_const 0)) ))
            then
             begin
             (__retres_6 :=
              (let _jessie_732 = (null  ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strchr.c" 14 3 22#
              "expl:Pointer index bounds" true) }); _jessie_732 end));
              (raise (Goto_return_label_3_exc ())) end else ());
            (mutable_s_3_0 :=
             (let _jessie_733 =
             (shift_typesafe  !mutable_s_3_0
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 2553 46 58# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strchr.c" 12 29 32#
             "expl:Pointer index bounds" true) }); _jessie_733 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_50 -> () end end end;
        (raise (Goto_while_0_break_9_exc ())) end with
       Goto_while_0_break_9_exc _jessie_47 ->
       'While_0_break_9:
       'While_0_break_9:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 15 12 55#
          ((Bit_int8.(<>) (#"whole_program.jc" 2559 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2560 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3_0
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44))))
          /\
          ((<)
          (sub_pointer !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 16 12 56#
          ((Bit_int8.(=) (#"whole_program.jc" 2574 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2575 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))) } ;
         () end;
        (__retres_6 :=
         (let _jessie_734 = !mutable_s_3_0 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strchr.c" 17 1 18#
         "expl:Pointer index bounds" true) }); _jessie_734 end)) end end;
       (raise (Goto_return_label_3_exc ())) end with Goto_return_label_3_exc
      _jessie_48 ->
      'Return_label_3:
      'Return_label_3:
      begin
      (return :=
       (let _jessie_735 = !__retres_6 in
       begin
       (assert {
       (#"whole_program.jc" 2584 7 24# "expl:Pointer index bounds" true) });
        _jessie_735 end)); (raise Return) end end)); absurd  end with Return
    -> !return end))
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strchr_0_behaviors
#"/home/work/workspace/self/verker/strchr.c" 3 5 34# "expl:strchr, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  let strchr_ensures_default
  #"/home/work/workspace/self/verker/strchr.c" 3 5 34#
  "expl:Function strchr, default behavior" =
  fun
   (s_3_0 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_44_alloc_table :
   (alloc_table voidP)) (voidP_s_3_44_tag_table : (tag_table voidP))
   (charP_charM_s_3_44 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_3_44_alloc_table s_3_0) ->
     (((=) (typeof voidP_s_3_44_tag_table s_3_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_44_alloc_table s_3_0) i) /\
       ((<) i (offset_max voidP_s_3_44_alloc_table s_3_0))) ->
       ((=) (typeof voidP_s_3_44_tag_table (shift s_3_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchr.h" 53 13 25#
   (valid_str s_3_0 voidP_s_3_44_alloc_table charP_charM_s_3_44))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchr.h" 55 12 44#
     "expl:Ensures clause"
     ((=) result
     (strchr s_3_0 (#"whole_program.jc" 2423 49 73# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))) }
   diverges  ->
   (let mutable_s_3_0 = ref s_3_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 2459 10 1709# "expl:Behavior disjointness check"
    (not
    ((forall p_6_1 : (pointer voidP).
      (((same_block !mutable_s_3_0 p_6_1) /\
       (((<=) (sub_pointer !mutable_s_3_0 p_6_1) (0)) /\
       ((same_block p_6_1
        (shift !mutable_s_3_0
        (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44))))
       /\
       ((<=)
       (sub_pointer p_6_1
       (shift !mutable_s_3_0
       (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44)))) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_3_44 p_6_1)
       (#"whole_program.jc" 2471 54 69# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14)))))
    /\
    (exists p_4_1 : (pointer voidP).
     ((same_block !mutable_s_3_0 p_4_1) /\
     (((<=) (sub_pointer !mutable_s_3_0 p_4_1) (0)) /\
     ((same_block p_4_1
      (shift !mutable_s_3_0
      (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44))))
     /\
     (((<=)
      (sub_pointer p_4_1
      (shift !mutable_s_3_0
      (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_3_44 p_4_1)
     (#"whole_program.jc" 2484 55 70# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))) });
     (check {
     (#"whole_program.jc" 2486 10 1549# "expl:Behavior completeness check"
     ((exists p_4_2 : (pointer voidP).
       ((same_block !mutable_s_3_0 p_4_2) /\
       (((<=) (sub_pointer !mutable_s_3_0 p_4_2) (0)) /\
       ((same_block p_4_2
        (shift !mutable_s_3_0
        (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44))))
       /\
       (((<=)
        (sub_pointer p_4_2
        (shift !mutable_s_3_0
        (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44)))) (0))
       /\
       (Bit_int8.(=) (select charP_charM_s_3_44 p_4_2)
       (#"whole_program.jc" 2497 51 66# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))
     \/
     (forall p_6_2 : (pointer voidP).
      (((same_block !mutable_s_3_0 p_6_2) /\
       (((<=) (sub_pointer !mutable_s_3_0 p_6_2) (0)) /\
       ((same_block p_6_2
        (shift !mutable_s_3_0
        (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44))))
       /\
       ((<=)
       (sub_pointer p_6_2
       (shift !mutable_s_3_0
       (Uint64.to_int (strlen !mutable_s_3_0 charP_charM_s_3_44)))) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_3_44 p_6_2)
       (#"whole_program.jc" 2509 52 67# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14))))))) });
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3_0);
        'Loop_39:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strchr.c" 6 20 32#
             (valid_str !mutable_s_3_0 voidP_s_3_44_alloc_table
             charP_charM_s_3_44))
            &&
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
             (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
             ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
              (same_block !os !mutable_s_3_0))
             /\
             (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
             ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
              ((<=) (sub_pointer !os !mutable_s_3_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
             ((#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
              (same_block !mutable_s_3_0
              (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))
             /\
             (#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
             ((<=)
             (sub_pointer !mutable_s_3_0
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strchr.c" 8 20 69#
             (forall p_7 : (pointer voidP).
              (((same_block !os p_7) /\
               (((<=) (sub_pointer !os p_7) (0)) /\
               ((same_block p_7 !mutable_s_3_0) /\
               ((<) (sub_pointer p_7 !mutable_s_3_0) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_3_44 p_7)
               (#"whole_program.jc" 2537 44 59# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
            &&
            (#"/home/work/workspace/self/verker/strchr.c" 9 20 67#
            ((=)
            (strchr !mutable_s_3_0 (#"whole_program.jc" 2539 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_44)
            (strchr !os (#"whole_program.jc" 2540 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strchr.c" 12 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchr.c" 12 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
            (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_9_exc ())));
            (if
            (#"/home/work/workspace/self/verker/strchr.c" 13 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker/strchr.c" 13 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
             (#"whole_program.jc" 2548 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin
             (__retres_6 := (null  )); (raise (Goto_return_label_3_exc ()))
             end else ());
            (mutable_s_3_0 :=
             (shift_  !mutable_s_3_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2553 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_50 -> () end end end;
        (raise (Goto_while_0_break_9_exc ())) end with
       Goto_while_0_break_9_exc _jessie_47 ->
       'While_0_break_9:
       'While_0_break_9:
       begin
       ();
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strchr.c" 15 12 55#
        "expl:Assertion in line 15"
        ((Bit_int8.(<>) (#"whole_program.jc" 2559 52 67# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14))
         (#"whole_program.jc" 2560 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))
        <->
        ((same_block !mutable_s_3_0
         (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44))))
        /\
        ((<)
        (sub_pointer !mutable_s_3_0
        (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0)))))
        }); () end;
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strchr.c" 16 12 56#
        "expl:Assertion in line 16"
        ((Bit_int8.(=) (#"whole_program.jc" 2574 52 67# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14))
         (#"whole_program.jc" 2575 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))
        <->
        ((=) !mutable_s_3_0
        (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))) }); ()
        end; (__retres_6 := !mutable_s_3_0) end end;
       (raise (Goto_return_label_3_exc ())) end with Goto_return_label_3_exc
      _jessie_48 ->
      'Return_label_3:
      'Return_label_3: begin (return := !__retres_6); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let strchr_ensures_exists
  #"/home/work/workspace/self/verker/strchr.c" 3 5 34#
  "expl:Function strchr, behavior exists" =
  fun
   (s_3_0 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_44_alloc_table :
   (alloc_table voidP)) (voidP_s_3_44_tag_table : (tag_table voidP))
   (charP_charM_s_3_44 : (memory voidP Int8.t)) 
   requires {
   ((exists p_4_0 : (pointer voidP).
     ((same_block s_3_0 p_4_0) /\
     (((<=) (sub_pointer s_3_0 p_4_0) (0)) /\
     ((same_block p_4_0
      (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
     /\
     (((<=)
      (sub_pointer p_4_0
      (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_3_44 p_4_0)
     (#"whole_program.jc" 2438 28 43# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))
   /\
   (((allocated voidP_s_3_44_alloc_table s_3_0) ->
     (((=) (typeof voidP_s_3_44_tag_table s_3_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_44_alloc_table s_3_0) i) /\
       ((<) i (offset_max voidP_s_3_44_alloc_table s_3_0))) ->
       ((=) (typeof voidP_s_3_44_tag_table (shift s_3_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchr.h" 53 13 25#
   (valid_str s_3_0 voidP_s_3_44_alloc_table charP_charM_s_3_44)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
      "expl:Ensures clause" (same_block s_3_0 result))
     /\
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_3_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
      "expl:Ensures clause"
      (same_block result
      (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))))
     /\
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))) (0)))
     /\
     (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchr.h" 62 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_3_44 result)
      (#"whole_program.jc" 2449 51 75# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_14))))
     /\
     (#"/home/work/workspace/self/verker/strchr.h" 63 15 69#
     "expl:Ensures clause"
     (forall p_5_0 : (pointer voidP).
      (((same_block s_3_0 p_5_0) /\
       (((<=) (sub_pointer s_3_0 p_5_0) (0)) /\
       ((same_block p_5_0 result) /\ ((<) (sub_pointer p_5_0 result) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_3_44 p_5_0)
       (#"whole_program.jc" 2457 52 76# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))))))))))))) } diverges 
   ->
   (let mutable_s_3_0 = ref s_3_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3_0);
        'Loop_41:
        loop
        invariant { (#"whole_program.jc" 2517 6 1951# true) } 
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strchr.c" 9 20 67#
            ((=)
            (strchr !mutable_s_3_0 (#"whole_program.jc" 2539 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_44)
            (strchr !os (#"whole_program.jc" 2540 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 8 20 69#
            (forall p_7 : (pointer voidP).
             (((same_block !os p_7) /\
              (((<=) (sub_pointer !os p_7) (0)) /\
              ((same_block p_7 !mutable_s_3_0) /\
              ((<) (sub_pointer p_7 !mutable_s_3_0) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_44 p_7)
              (#"whole_program.jc" 2537 44 59# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             (same_block !os !mutable_s_3_0))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             ((<=) (sub_pointer !os !mutable_s_3_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
             (same_block !mutable_s_3_0
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
            ((<=)
            (sub_pointer !mutable_s_3_0
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strchr.c" 6 20 32#
           (valid_str !mutable_s_3_0 voidP_s_3_44_alloc_table
           charP_charM_s_3_44))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strchr.c" 12 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchr.c" 12 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
            (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_9_exc ())));
            (if
            (#"/home/work/workspace/self/verker/strchr.c" 13 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker/strchr.c" 13 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
             (#"whole_program.jc" 2548 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin
             (__retres_6 := (null  )); (raise (Goto_return_label_3_exc ()))
             end else ());
            (mutable_s_3_0 :=
             (shift_  !mutable_s_3_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2553 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_50 -> () end end end;
        (raise (Goto_while_0_break_9_exc ())) end with
       Goto_while_0_break_9_exc _jessie_47 ->
       'While_0_break_9:
       'While_0_break_9:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 15 12 55#
          ((Bit_int8.(<>) (#"whole_program.jc" 2559 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2560 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3_0
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44))))
          /\
          ((<)
          (sub_pointer !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 16 12 56#
          ((Bit_int8.(=) (#"whole_program.jc" 2574 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2575 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))) } ;
         () end; (__retres_6 := !mutable_s_3_0) end end;
       (raise (Goto_return_label_3_exc ())) end with Goto_return_label_3_exc
      _jessie_48 ->
      'Return_label_3:
      'Return_label_3: begin (return := !__retres_6); (raise Return) end end));
     absurd  end with Return -> !return end))
  
  let strchr_ensures_not_exists
  #"/home/work/workspace/self/verker/strchr.c" 3 5 34#
  "expl:Function strchr, behavior not_exists" =
  fun
   (s_3_0 : (pointer voidP)) (c_14 : Int32.t) (voidP_s_3_44_alloc_table :
   (alloc_table voidP)) (voidP_s_3_44_tag_table : (tag_table voidP))
   (charP_charM_s_3_44 : (memory voidP Int8.t)) 
   requires {
   ((forall p_6_0 : (pointer voidP).
     (((same_block s_3_0 p_6_0) /\
      (((<=) (sub_pointer s_3_0 p_6_0) (0)) /\
      ((same_block p_6_0
       (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
      /\
      ((<=)
      (sub_pointer p_6_0
      (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_3_44 p_6_0)
      (#"whole_program.jc" 2430 28 43# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_14)))))
   /\
   (((allocated voidP_s_3_44_alloc_table s_3_0) ->
     (((=) (typeof voidP_s_3_44_tag_table s_3_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_3_44_alloc_table s_3_0) i) /\
       ((<) i (offset_max voidP_s_3_44_alloc_table s_3_0))) ->
       ((=) (typeof voidP_s_3_44_tag_table (shift s_3_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchr.h" 53 13 25#
   (valid_str s_3_0 voidP_s_3_44_alloc_table charP_charM_s_3_44)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchr.h" 58 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_3_0 = ref s_3_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_6 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_3_0);
        'Loop_40:
        loop
        invariant { (#"whole_program.jc" 2517 6 1951# true) } 
         begin
         any unit
         requires { true } reads { c_14, mutable_s_3_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strchr.c" 9 20 67#
            ((=)
            (strchr !mutable_s_3_0 (#"whole_program.jc" 2539 47 62#
            "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
            charP_charM_s_3_44)
            (strchr !os (#"whole_program.jc" 2540 47 62# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 8 20 69#
            (forall p_7 : (pointer voidP).
             (((same_block !os p_7) /\
              (((<=) (sub_pointer !os p_7) (0)) /\
              ((same_block p_7 !mutable_s_3_0) /\
              ((<) (sub_pointer p_7 !mutable_s_3_0) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_3_44 p_7)
              (#"whole_program.jc" 2537 44 59# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_14))))))
           /\
           ((#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             (same_block !os !mutable_s_3_0))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 20 27#
             ((<=) (sub_pointer !os !mutable_s_3_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
             (same_block !mutable_s_3_0
             (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))
            /\
            (#"/home/work/workspace/self/verker/strchr.c" 7 26 46#
            ((<=)
            (sub_pointer !mutable_s_3_0
            (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strchr.c" 6 20 32#
           (valid_str !mutable_s_3_0 voidP_s_3_44_alloc_table
           charP_charM_s_3_44))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strchr.c" 12 8 27#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchr.c" 12 8 10#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
            (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchr.c" 12 14 27#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_14 )) )) ))
           then () else (raise (Goto_while_0_break_9_exc ())));
            (if
            (#"/home/work/workspace/self/verker/strchr.c" 13 6 16#
            (Unsafe_bit_int32.(=) 
             (#"/home/work/workspace/self/verker/strchr.c" 13 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
              (acc  charP_charM_s_3_44 !mutable_s_3_0 ) ))
             (#"whole_program.jc" 2548 28 40# "expl:Integer cast"
             (Unsafe_bit_int32.of_int_const 0)) ))
            then
             begin
             (__retres_6 := (null  )); (raise (Goto_return_label_3_exc ()))
             end else ());
            (mutable_s_3_0 :=
             (shift_  !mutable_s_3_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2553 46 58# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_50 -> () end end end;
        (raise (Goto_while_0_break_9_exc ())) end with
       Goto_while_0_break_9_exc _jessie_47 ->
       'While_0_break_9:
       'While_0_break_9:
       begin
       ();
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 15 12 55#
          ((Bit_int8.(<>) (#"whole_program.jc" 2559 52 67#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2560 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((same_block !mutable_s_3_0
           (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44))))
          /\
          ((<)
          (sub_pointer !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))) (0)))))
          } ; () end;
        begin
        any unit
        requires { true } reads { c_14, mutable_s_3_0 }
        ensures {
          (#"/home/work/workspace/self/verker/strchr.c" 16 12 56#
          ((Bit_int8.(=) (#"whole_program.jc" 2574 52 67# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_14))
           (#"whole_program.jc" 2575 53 64# "expl:Integer cast"
           (Bit_int8.of_int_const 0)))
          <->
          ((=) !mutable_s_3_0
          (shift !os (Uint64.to_int (strlen !os charP_charM_s_3_44)))))) } ;
         () end; (__retres_6 := !mutable_s_3_0) end end;
       (raise (Goto_return_label_3_exc ())) end with Goto_return_label_3_exc
      _jessie_48 ->
      'Return_label_3:
      'Return_label_3: begin (return := !__retres_6); (raise Return) end end));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_Strchrnul

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  function strchrnul (str_15 : (pointer voidP)) (c_21 : Int8.t)
  (charP_charM_str_15_46_at_L : (memory voidP Int8.t)) : (pointer voidP)
  =
     (if (Int8.(=) (select charP_charM_str_15_46_at_L str_15) c_21) then
      str_15 else
      (if
       (Int8.(=) (select charP_charM_str_15_46_at_L str_15)
       (#"whole_program.jc" 2592 56 67# "expl:Integer cast" (Int8.of_int
       (0)))) then str_15 else
       (strchrnul (shift str_15 (1)) c_21 charP_charM_str_15_46_at_L)))
  
  
  lemma Strchrnul_mem
  #"/home/work/workspace/self/verker/strchrnul.h" 11 7 112#
  "expl:Lemma strchrnul_mem" :
  (forall voidP_str_16_248_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_16_248_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 11 7 112#
    (forall str_16 : (pointer voidP).
     (forall c_22 : Int8.t.
      ((valid_str str_16 voidP_str_16_248_alloc_table_at_L
       charP_charM_str_16_248_at_L) ->
       ((same_block str_16
        (strchrnul str_16 c_22 charP_charM_str_16_248_at_L))
       /\
       (((<=)
        (sub_pointer str_16
        (strchrnul str_16 c_22 charP_charM_str_16_248_at_L)) (0))
       /\
       ((same_block (strchrnul str_16 c_22 charP_charM_str_16_248_at_L)
        (shift str_16
        (Uint64.to_int (strlen str_16 charP_charM_str_16_248_at_L))))
       /\
       ((<=)
       (sub_pointer (strchrnul str_16 c_22 charP_charM_str_16_248_at_L)
       (shift str_16
       (Uint64.to_int (strlen str_16 charP_charM_str_16_248_at_L)))) (0)))))))))))
  
  lemma Strchrnul_iter_one
  #"/home/work/workspace/self/verker/strchrnul.h" 15 7 134#
  "expl:Lemma strchrnul_iter_one" :
  (forall voidP_str_17_253_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_17_253_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 15 7 134#
    (forall str_17 : (pointer voidP).
     (forall c_23 : Int8.t.
      (((valid_str str_17 voidP_str_17_253_alloc_table_at_L
        charP_charM_str_17_253_at_L)
       /\
       ((Int8.(<>) (select charP_charM_str_17_253_at_L str_17) c_23) /\
       (Int8.(<>) (select charP_charM_str_17_253_at_L str_17)
       (#"whole_program.jc" 2612 36 47# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (strchrnul str_17 c_23 charP_charM_str_17_253_at_L)
       (strchrnul (shift str_17 (1)) c_23 charP_charM_str_17_253_at_L))))))))
  
  lemma Strchrnul_res
  #"/home/work/workspace/self/verker/strchrnul.h" 19 7 118#
  "expl:Lemma strchrnul_res" :
  (forall voidP_str_18_256_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_18_256_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 19 7 118#
    (forall str_18 : (pointer voidP).
     (forall c_24 : Int8.t.
      ((valid_str str_18 voidP_str_18_256_alloc_table_at_L
       charP_charM_str_18_256_at_L) ->
       (((Int8.(=)
         (select charP_charM_str_18_256_at_L
         (strchrnul str_18 c_24 charP_charM_str_18_256_at_L))
         (#"whole_program.jc" 2620 57 68# "expl:Integer cast" (Int8.of_int
         (0))))
        /\
        (not
        (Int8.(=)
        (select charP_charM_str_18_256_at_L
        (strchrnul str_18 c_24 charP_charM_str_18_256_at_L)) c_24)))
       \/
       ((Int8.(=)
        (select charP_charM_str_18_256_at_L
        (strchrnul str_18 c_24 charP_charM_str_18_256_at_L)) c_24)
       /\
       (not
       (Int8.(=)
       (select charP_charM_str_18_256_at_L
       (strchrnul str_18 c_24 charP_charM_str_18_256_at_L))
       (#"whole_program.jc" 2623 62 73# "expl:Integer cast" (Int8.of_int
       (0)))))))))))))
  
  lemma Strchrnul_strlen
  #"/home/work/workspace/self/verker/strchrnul.h" 23 7 109#
  "expl:Lemma strchrnul_strlen" :
  (forall voidP_str_19_261_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_19_261_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 23 7 109#
    (forall str_19 : (pointer voidP).
     ((valid_str str_19 voidP_str_19_261_alloc_table_at_L
      charP_charM_str_19_261_at_L) ->
      ((=) (Uint64.to_int (strlen str_19 charP_charM_str_19_261_at_L))
      (sub_pointer
      (strchrnul str_19 (#"whole_program.jc" 2629 41 52# "expl:Integer cast"
      (Int8.of_int (0))) charP_charM_str_19_261_at_L) str_19)))))))
  
  lemma Strchrnul_at_end
  #"/home/work/workspace/self/verker/strchrnul.h" 27 7 117#
  "expl:Lemma strchrnul_at_end" :
  (forall voidP_str_20_263_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_20_263_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 27 7 117#
    (forall str_20 : (pointer voidP).
     (forall c_25 : Int8.t.
      (((((<=) (offset_min voidP_str_20_263_alloc_table_at_L str_20) (0)) /\
        (((>=) (offset_max voidP_str_20_263_alloc_table_at_L str_20) (0)) /\
        ((=) true true)))
       /\
       ((Int8.(=) (select charP_charM_str_20_263_at_L str_20)
        (#"whole_program.jc" 2637 37 48# "expl:Integer cast" (Int8.of_int
        (0))))
       \/ (Int8.(=) (select charP_charM_str_20_263_at_L str_20) c_25))) ->
       ((=) (strchrnul str_20 c_25 charP_charM_str_20_263_at_L) str_20)))))))
  
  lemma Strchrnul_defn
  #"/home/work/workspace/self/verker/strchrnul.h" 32 7 209#
  "expl:Lemma strchrnul_defn" :
  (forall voidP_str_21_265_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_21_265_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 32 7 209#
    (forall str_21 : (pointer voidP).
     (forall c_26 : Int8.t.
      (forall i_25_0 : int.
       (((valid_str str_21 voidP_str_21_265_alloc_table_at_L
         charP_charM_str_21_265_at_L)
        /\
        (((<=) (0) i_25_0) /\
        (((<=) i_25_0
         (Uint64.to_int (strlen str_21 charP_charM_str_21_265_at_L)))
        /\
        ((forall j_5 : int.
          ((((<=) (0) j_5) /\ ((<) j_5 i_25_0)) ->
           (Int8.(<>) (select charP_charM_str_21_265_at_L (shift str_21 j_5))
           c_26)))
        /\
        (Int8.(=) (select charP_charM_str_21_265_at_L (shift str_21 i_25_0))
        c_26))))) ->
        ((=) (shift str_21 i_25_0)
        (strchrnul str_21 c_26 charP_charM_str_21_265_at_L)))))))))
  
  lemma Strchrnul_skipped
  #"/home/work/workspace/self/verker/strchrnul.h" 38 7 145#
  "expl:Lemma strchrnul_skipped" :
  (forall voidP_str_22_267_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_str_22_267_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strchrnul.h" 38 7 145#
    (forall str_22 : (pointer voidP).
     (forall c_27 : Int8.t.
      (forall i_26_0 : int.
       (((valid_str str_22 voidP_str_22_267_alloc_table_at_L
         charP_charM_str_22_267_at_L)
        /\
        (((<=) (0) i_26_0) /\
        (((<) i_26_0
         (sub_pointer (strchrnul str_22 c_27 charP_charM_str_22_267_at_L)
         str_22))
        /\
        ((<=)
        (sub_pointer (strchrnul str_22 c_27 charP_charM_str_22_267_at_L)
        str_22) (Uint64.to_int (strlen str_22 charP_charM_str_22_267_at_L))))))
        ->
        (Int8.(<>) (select charP_charM_str_22_267_at_L (shift str_22 i_26_0))
        c_27))))))))
  
end

module Function_strchrnul_0_safety
#"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
"expl:strchrnul, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int8 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnul 
  
  use why3.Bool.Bool 
  
  let strchrnul_0 #"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, safety" =
  fun
   (s_4_0 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_48_alloc_table :
   (alloc_table voidP)) (voidP_s_4_48_tag_table : (tag_table voidP))
   (charP_charM_s_4_48 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_4_48_alloc_table s_4_0) ->
     (((=) (typeof voidP_s_4_48_tag_table s_4_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_48_alloc_table s_4_0) i) /\
       ((<) i (offset_max voidP_s_4_48_alloc_table s_4_0))) ->
       ((=) (typeof voidP_s_4_48_tag_table (shift s_4_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchrnul.h" 54 13 25#
   (valid_str s_4_0 voidP_s_4_48_alloc_table charP_charM_s_4_48))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_4_0 = ref s_4_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_7 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 :=
       (let _jessie_748 = !mutable_s_4_0 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strchrnul.c" 5 17 19#
       "expl:Pointer index bounds" true) }); _jessie_748 end));
       'Loop_46:
       loop
       invariant { (#"whole_program.jc" 2734 6 1900# true) }
         variant { (#"/home/work/workspace/self/verker/strchrnul.c" 10 18 39#
           (Int.(-) (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))
           (sub_pointer !mutable_s_4_0 !os_0))) }
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strchrnul.c" 9 20 71#
           ((=)
           (strchrnul !os_0 (#"whole_program.jc" 2757 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)
           (strchrnul !mutable_s_4_0 (#"whole_program.jc" 2758 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4_0) /\
             ((<) (sub_pointer p_8 !mutable_s_4_0) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 p_8)
             (#"whole_program.jc" 2755 44 59# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4_0))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4_0
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48)))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4_0
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4_0 voidP_s_4_48_alloc_table
          charP_charM_s_4_48))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker/strchrnul.c" 12 8 10#
          (Safe_bit_int8.(<>) 
           (#"/home/work/workspace/self/verker/strchrnul.c" 12 8 10#
           "expl:Pointer dereference"
           (acc  voidP_s_4_48_alloc_table charP_charM_s_4_48 !mutable_s_4_0 ))
           (#"whole_program.jc" 2762 61 72# "expl:Integer cast"
           (Safe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 35#
           (Safe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 16#
             "expl:Pointer dereference"
             (acc  voidP_s_4_48_alloc_table charP_charM_s_4_48 !mutable_s_4_0
              )) ))
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_10_exc ())))
          else (raise (Goto_while_0_break_10_exc ())));
           (mutable_s_4_0 :=
            (let _jessie_749 =
            (shift_typesafe  !mutable_s_4_0
             (Safe_bit_int32.to_int 
              (#"whole_program.jc" 2767 46 58# "expl:Integer cast"
              (Safe_bit_int32.of_int_const 1)) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strchrnul.c" 13 2 5#
            "expl:Pointer index bounds" true) }); _jessie_749 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_53 -> () end end end;
       (raise (Goto_while_0_break_10_exc ())) end with
      Goto_while_0_break_10_exc _jessie_51 ->
      'While_0_break_10:
      'While_0_break_10:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2773 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2774 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2776 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2781 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4_0 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))) } ; () end;
       begin
       (__retres_7 :=
        (let _jessie_750 = !mutable_s_4_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strchrnul.c" 16 1 18#
        "expl:Pointer index bounds" true) }); _jessie_750 end));
        begin
        (return :=
         (let _jessie_751 = !__retres_7 in
         begin
         (assert {
         (#"whole_program.jc" 2788 7 24# "expl:Pointer index bounds" true) });
          _jessie_751 end)); (raise Return) end end end end)); absurd  end
    with Return -> !return end))
  
end

module Function_strchrnul_0_behaviors
#"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
"expl:strchrnul, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnul 
  
  use why3.Bool.Bool 
  
  let strchrnul_ensures_default
  #"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, default behavior" =
  fun
   (s_4_0 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_48_alloc_table :
   (alloc_table voidP)) (voidP_s_4_48_tag_table : (tag_table voidP))
   (charP_charM_s_4_48 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_4_48_alloc_table s_4_0) ->
     (((=) (typeof voidP_s_4_48_tag_table s_4_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_48_alloc_table s_4_0) i) /\
       ((<) i (offset_max voidP_s_4_48_alloc_table s_4_0))) ->
       ((=) (typeof voidP_s_4_48_tag_table (shift s_4_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchrnul.h" 54 13 25#
   (valid_str s_4_0 voidP_s_4_48_alloc_table charP_charM_s_4_48))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
      "expl:Ensures clause" (same_block result s_4_0))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 57 12 47#
      "expl:Ensures clause"
      ((=) result
      (strchrnul s_4_0 (#"whole_program.jc" 2672 51 75# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15)) charP_charM_s_4_48)))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
      "expl:Ensures clause" (same_block s_4_0 result))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
      "expl:Ensures clause" ((<=) (sub_pointer s_4_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
      "expl:Ensures clause"
      (same_block result
      (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
     "expl:Ensures clause"
     ((<=)
     (sub_pointer result
     (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))) (0)))))))))))))))
     } diverges  ->
   (let mutable_s_4_0 = ref s_4_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 2705 10 744# "expl:Behavior disjointness check"
    (not
    ((forall i_28_0 : int.
      ((((<=) (0) i_28_0) /\
       ((<) i_28_0
       (Uint64.to_int (strlen !mutable_s_4_0 charP_charM_s_4_48)))) ->
       (Bit_int8.(<>)
       (select charP_charM_s_4_48 (shift !mutable_s_4_0 i_28_0))
       (#"whole_program.jc" 2710 42 57# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15)))))
    /\
    (exists i_27_1 : int.
     (((<=) (0) i_27_1) /\
     (((<) i_27_1 (Uint64.to_int (strlen !mutable_s_4_0 charP_charM_s_4_48)))
     /\
     (Bit_int8.(=) (select charP_charM_s_4_48 (shift !mutable_s_4_0 i_27_1))
     (#"whole_program.jc" 2716 43 58# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))) });
     (check {
     (#"whole_program.jc" 2718 10 588# "expl:Behavior completeness check"
     ((exists i_27_2 : int.
       (((<=) (0) i_27_2) /\
       (((<) i_27_2
        (Uint64.to_int (strlen !mutable_s_4_0 charP_charM_s_4_48)))
       /\
       (Bit_int8.(=)
       (select charP_charM_s_4_48 (shift !mutable_s_4_0 i_27_2))
       (#"whole_program.jc" 2721 60 75# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
     \/
     (forall i_28_1 : int.
      ((((<=) (0) i_28_1) /\
       ((<) i_28_1
       (Uint64.to_int (strlen !mutable_s_4_0 charP_charM_s_4_48)))) ->
       (Bit_int8.(<>)
       (select charP_charM_s_4_48 (shift !mutable_s_4_0 i_28_1))
       (#"whole_program.jc" 2726 61 76# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15))))))) });
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_7 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4_0);
       'Loop_43:
       loop
       invariant
         { ((#"/home/work/workspace/self/verker/strchrnul.c" 6 20 32#
            (valid_str !mutable_s_4_0 voidP_s_4_48_alloc_table
            charP_charM_s_4_48))
           &&
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
            (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
             (same_block !os_0 !mutable_s_4_0))
            /\
            (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
             ((<=) (sub_pointer !os_0 !mutable_s_4_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
            ((#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
             (same_block !mutable_s_4_0
             (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48)))))
            /\
            (#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
            ((<=)
            (sub_pointer !mutable_s_4_0
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))
            (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker/strchrnul.c" 8 20 69#
            (forall p_8 : (pointer voidP).
             (((same_block !os_0 p_8) /\
              (((<=) (sub_pointer !os_0 p_8) (0)) /\
              ((same_block p_8 !mutable_s_4_0) /\
              ((<) (sub_pointer p_8 !mutable_s_4_0) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_4_48 p_8)
              (#"whole_program.jc" 2755 44 59# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
           &&
           (#"/home/work/workspace/self/verker/strchrnul.c" 9 20 71#
           ((=)
           (strchrnul !os_0 (#"whole_program.jc" 2757 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)
           (strchrnul !mutable_s_4_0 (#"whole_program.jc" 2758 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_48 !mutable_s_4_0 )
           (#"whole_program.jc" 2762 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_48 !mutable_s_4_0 ) ))
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_10_exc ())))
          else (raise (Goto_while_0_break_10_exc ())));
           (mutable_s_4_0 :=
            (shift_  !mutable_s_4_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2767 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_53 -> () end end end;
       (raise (Goto_while_0_break_10_exc ())) end with
      Goto_while_0_break_10_exc _jessie_51 ->
      'While_0_break_10:
      'While_0_break_10:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strchrnul.c" 14 12 45#
       "expl:Assertion in line 14"
       ((Bit_int8.(=) (#"whole_program.jc" 2773 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_15))
        (#"whole_program.jc" 2774 53 64# "expl:Integer cast"
        (Bit_int8.of_int_const 0))) ->
        (Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
        (#"whole_program.jc" 2776 54 65# "expl:Integer cast"
        (Bit_int8.of_int_const 0))))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strchrnul.c" 15 12 47#
       "expl:Assertion in line 15"
       ((Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
        (#"whole_program.jc" 2781 65 76# "expl:Integer cast"
        (Bit_int8.of_int_const 0))) ->
        ((=) (sub_pointer !mutable_s_4_0 !os_0)
        (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))) }); () end;
       begin
       (__retres_7 := !mutable_s_4_0);
        begin (return := !__retres_7); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
  let strchrnul_ensures_exists
  #"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, behavior exists" =
  fun
   (s_4_0 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_48_alloc_table :
   (alloc_table voidP)) (voidP_s_4_48_tag_table : (tag_table voidP))
   (charP_charM_s_4_48 : (memory voidP Int8.t)) 
   requires {
   ((exists i_27_0 : int.
     (((<=) (0) i_27_0) /\
     (((<) i_27_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48))) /\
     (Bit_int8.(=) (select charP_charM_s_4_48 (shift s_4_0 i_27_0))
     (#"whole_program.jc" 2694 37 52# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
   /\
   (((allocated voidP_s_4_48_alloc_table s_4_0) ->
     (((=) (typeof voidP_s_4_48_tag_table s_4_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_48_alloc_table s_4_0) i) /\
       ((<) i (offset_max voidP_s_4_48_alloc_table s_4_0))) ->
       ((=) (typeof voidP_s_4_48_tag_table (shift s_4_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchrnul.h" 54 13 25#
   (valid_str s_4_0 voidP_s_4_48_alloc_table charP_charM_s_4_48)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_4_48 result)
      (#"whole_program.jc" 2695 49 73# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15))))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 66 15 69#
     "expl:Ensures clause"
     (forall p_7_0 : (pointer voidP).
      (((same_block s_4_0 p_7_0) /\
       (((<=) (sub_pointer s_4_0 p_7_0) (0)) /\
       ((same_block p_7_0 result) /\ ((<) (sub_pointer p_7_0 result) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_4_48 p_7_0)
       (#"whole_program.jc" 2703 50 74# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_15)))))))))) } diverges  ->
   (let mutable_s_4_0 = ref s_4_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_7 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4_0);
       'Loop_45:
       loop
       invariant { (#"whole_program.jc" 2734 6 1900# true) } 
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strchrnul.c" 9 20 71#
           ((=)
           (strchrnul !os_0 (#"whole_program.jc" 2757 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)
           (strchrnul !mutable_s_4_0 (#"whole_program.jc" 2758 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4_0) /\
             ((<) (sub_pointer p_8 !mutable_s_4_0) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 p_8)
             (#"whole_program.jc" 2755 44 59# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4_0))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4_0
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48)))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4_0
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4_0 voidP_s_4_48_alloc_table
          charP_charM_s_4_48))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_48 !mutable_s_4_0 )
           (#"whole_program.jc" 2762 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_48 !mutable_s_4_0 ) ))
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_10_exc ())))
          else (raise (Goto_while_0_break_10_exc ())));
           (mutable_s_4_0 :=
            (shift_  !mutable_s_4_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2767 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_53 -> () end end end;
       (raise (Goto_while_0_break_10_exc ())) end with
      Goto_while_0_break_10_exc _jessie_51 ->
      'While_0_break_10:
      'While_0_break_10:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2773 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2774 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2776 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2781 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4_0 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))) } ; () end;
       begin
       (__retres_7 := !mutable_s_4_0);
        begin (return := !__retres_7); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
  let strchrnul_ensures_not_exists
  #"/home/work/workspace/self/verker/strchrnul.c" 3 5 37#
  "expl:Function strchrnul, behavior not_exists" =
  fun
   (s_4_0 : (pointer voidP)) (c_15 : Int32.t) (voidP_s_4_48_alloc_table :
   (alloc_table voidP)) (voidP_s_4_48_tag_table : (tag_table voidP))
   (charP_charM_s_4_48 : (memory voidP Int8.t)) 
   requires {
   ((forall i_28 : int.
     ((((<=) (0) i_28) /\
      ((<) i_28 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))) ->
      (Bit_int8.(<>) (select charP_charM_s_4_48 (shift s_4_0 i_28))
      (#"whole_program.jc" 2686 37 52# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_15)))))
   /\
   (((allocated voidP_s_4_48_alloc_table s_4_0) ->
     (((=) (typeof voidP_s_4_48_tag_table s_4_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_4_48_alloc_table s_4_0) i) /\
       ((<) i (offset_max voidP_s_4_48_alloc_table s_4_0))) ->
       ((=) (typeof voidP_s_4_48_tag_table (shift s_4_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strchrnul.h" 54 13 25#
   (valid_str s_4_0 voidP_s_4_48_alloc_table charP_charM_s_4_48)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
      "expl:Ensures clause"
      ((=) result
      (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
     /\
     (#"/home/work/workspace/self/verker/strchrnul.h" 62 15 31#
     "expl:Ensures clause"
     (Bit_int8.(=) (select charP_charM_s_4_48 result)
     (#"whole_program.jc" 2690 50 61# "expl:Integer cast"
     (Bit_int8.of_int_const 0)))))))) } diverges  ->
   (let mutable_s_4_0 = ref s_4_0 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_7 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (os_0 := !mutable_s_4_0);
       'Loop_44:
       loop
       invariant { (#"whole_program.jc" 2734 6 1900# true) } 
        begin
        any unit
        requires { true } reads { c_15, mutable_s_4_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strchrnul.c" 9 20 71#
           ((=)
           (strchrnul !os_0 (#"whole_program.jc" 2757 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)
           (strchrnul !mutable_s_4_0 (#"whole_program.jc" 2758 51 66#
           "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
           charP_charM_s_4_48)))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 8 20 69#
           (forall p_8 : (pointer voidP).
            (((same_block !os_0 p_8) /\
             (((<=) (sub_pointer !os_0 p_8) (0)) /\
             ((same_block p_8 !mutable_s_4_0) /\
             ((<) (sub_pointer p_8 !mutable_s_4_0) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 p_8)
             (#"whole_program.jc" 2755 44 59# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))
          /\
          ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            (same_block !os_0 !mutable_s_4_0))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 20 27#
            ((<=) (sub_pointer !os_0 !mutable_s_4_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 20 46#
           ((#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
            (same_block !mutable_s_4_0
            (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48)))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.c" 7 26 46#
           ((<=)
           (sub_pointer !mutable_s_4_0
           (shift !os_0 (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strchrnul.c" 6 20 32#
          (valid_str !mutable_s_4_0 voidP_s_4_48_alloc_table
          charP_charM_s_4_48))))) } ;
         try
          begin
          begin
          (if
          (#"/home/work/workspace/self/verker/strchrnul.c" 12 8 10#
          (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_4_48 !mutable_s_4_0 )
           (#"whole_program.jc" 2762 61 72# "expl:Integer cast"
           (Unsafe_bit_int8.of_int_const 0)) ))
          then
           (if
           (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 35#
           (Unsafe_bit_int32.(<>) 
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 14 16#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_4_48 !mutable_s_4_0 ) ))
            (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strchrnul.c" 12 20 35#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_15 )) )) ))
           then () else (raise (Goto_while_0_break_10_exc ())))
          else (raise (Goto_while_0_break_10_exc ())));
           (mutable_s_4_0 :=
            (shift_  !mutable_s_4_0
             (Unsafe_bit_int32.to_int 
              (#"whole_program.jc" 2767 46 58# "expl:Integer cast"
              (Unsafe_bit_int32.of_int_const 1)) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_53 -> () end end end;
       (raise (Goto_while_0_break_10_exc ())) end with
      Goto_while_0_break_10_exc _jessie_51 ->
      'While_0_break_10:
      'While_0_break_10:
      begin
      ();
       begin
       any unit
       requires { true } reads { c_15, mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 14 12 45#
         ((Bit_int8.(=) (#"whole_program.jc" 2773 52 67# "expl:Integer cast"
          (Bit_int8_of_Bit_int32.cast_modulo c_15))
          (#"whole_program.jc" 2774 53 64# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          (Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2776 54 65# "expl:Integer cast"
          (Bit_int8.of_int_const 0))))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_4_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strchrnul.c" 15 12 47#
         ((Bit_int8.(=) (select charP_charM_s_4_48 !mutable_s_4_0)
          (#"whole_program.jc" 2781 65 76# "expl:Integer cast"
          (Bit_int8.of_int_const 0))) ->
          ((=) (sub_pointer !mutable_s_4_0 !os_0)
          (Uint64.to_int (strlen !os_0 charP_charM_s_4_48))))) } ; () end;
       begin
       (__retres_7 := !mutable_s_4_0);
        begin (return := !__retres_7); (raise Return) end end end end));
     absurd  end with Return -> !return end))
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strcmp_safety
#"/home/work/workspace/self/verker/strcmp.c" 3 4 42# "expl:strcmp, safety"

  use enum.Uint64 
  
  use Safe_bit_uint8_of_Safe_bit_int8 
  
  use Safe_bit_uint8 
  
  use Safe_bit_int32_of_Safe_bit_uint8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use enum.Bit_int32 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcmp #"/home/work/workspace/self/verker/strcmp.c" 3 4 42#
  "expl:Function strcmp, safety" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_50_alloc_table : (alloc_table voidP))
   (voidP_ct_0_51_alloc_table : (alloc_table voidP)) (voidP_ct_0_51_tag_table
   : (tag_table voidP)) (voidP_cs_0_50_tag_table : (tag_table voidP))
   (charP_charM_cs_0_50 : (memory voidP Int8.t)) (charP_charM_ct_0_51 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_0_51_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_51_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_51_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_51_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_51_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_50_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_50_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_50_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_50_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_50_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2793 12 93#
   ((#"/home/work/workspace/self/verker/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_50_alloc_table charP_charM_cs_0_50))
   /\
   (#"/home/work/workspace/self/verker/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_51_alloc_table charP_charM_ct_0_51)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Safe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Safe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Safe_bit_uint8.any_  () ) in
     (let tmp_0_12 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Safe_bit_int32.any_  () ) in
     (let tmp_1_4 = ref (Safe_bit_int32.any_  () ) in
     (let tmp_2_3 = ref (Safe_bit_int32.any_  () ) in
     (let __retres_8 = ref (Safe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       begin
       any unit
       requires { true } reads { mutable_cs_0, mutable_ct_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strcmp.c" 7 14 166#
         ((forall i_32 : int.
           ((((<=) (0) i_32) /\
            ((<=) i_32
            (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
            (Bit_int8.(=)
            (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_32))
            (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_32)))))
         <->
         (forall i_33 : int.
          ((((<=) (0) i_33) /\
           ((<=) i_33
           (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
           (Bit_uint8.(=) (#"whole_program.jc" 2881 57 85#
           "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_33))))
           (#"whole_program.jc" 2882 58 86# "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_33))))))))) } ;
        () end;
        'Loop_50:
        loop
        invariant { (#"whole_program.jc" 2886 6 7005# true) }
          variant { (#"/home/work/workspace/self/verker/strcmp.c" 19 18 58#
            (Int.(-)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50))
            (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))) }
         begin
         any unit
         requires { true } reads { mutable_cs_0, mutable_ct_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcmp.c" 17 20 74#
            ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50))
            (Int.(-)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50))
            (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 15 20 121#
            (forall i_34 : int.
             ((((<=) (0) i_34) /\
              ((<) i_34 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
              ->
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init) i_34))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init) i_34))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 14 20 56#
            ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
             (same_block !mutable_ct_0
             (shift (at !mutable_ct_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
            ((<=)
            (sub_pointer !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
             (same_block !mutable_cs_0
             (shift (at !mutable_cs_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
            ((<=)
            (sub_pointer !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           ((#"/home/work/workspace/self/verker/strcmp.c" 11 20 33#
            (valid_str !mutable_cs_0 voidP_cs_0_50_alloc_table
            charP_charM_cs_0_50))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 37 50#
           (valid_str !mutable_ct_0 voidP_ct_0_51_alloc_table
           charP_charM_ct_0_51)))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_12 :=
            (let _jessie_794 = !mutable_cs_0 in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strcmp.c" 22 46 50#
            "expl:Pointer index bounds" true) }); _jessie_794 end));
            begin
            (mutable_cs_0 :=
             (let _jessie_795 =
             (shift_typesafe  !mutable_cs_0
              (Safe_bit_int32.to_int 
               (#"whole_program.jc" 2932 51 63# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcmp.c" 22 46 50#
             "expl:Pointer index bounds" true) }); _jessie_795 end));
             (c1_0 :=
              (let _jessie_796 =
              (#"/home/work/workspace/self/verker/strcmp.c" 22 23 50#
              "expl:Integer cast"
              (Safe_bit_uint8_of_Safe_bit_int8.cast_modulo 
               (#"/home/work/workspace/self/verker/strcmp.c" 22 45 50#
               "expl:Pointer dereference"
               (acc  voidP_cs_0_50_alloc_table charP_charM_cs_0_50 !tmp_0_12
                )) )) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcmp.c" 22 2 50#
              "expl:Pointer index bounds" true) }); _jessie_796 end)) end end;
            begin
            (tmp_0_13 :=
             (let _jessie_797 = !mutable_ct_0 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcmp.c" 23 46 50#
             "expl:Pointer index bounds" true) }); _jessie_797 end));
             begin
             (mutable_ct_0 :=
              (let _jessie_798 =
              (shift_typesafe  !mutable_ct_0
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 2937 51 63# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcmp.c" 23 46 50#
              "expl:Pointer index bounds" true) }); _jessie_798 end));
              (c2_0 :=
               (let _jessie_799 =
               (#"/home/work/workspace/self/verker/strcmp.c" 23 23 50#
               "expl:Integer cast"
               (Safe_bit_uint8_of_Safe_bit_int8.cast_modulo 
                (#"/home/work/workspace/self/verker/strcmp.c" 23 45 50#
                "expl:Pointer dereference"
                (acc  voidP_ct_0_51_alloc_table charP_charM_ct_0_51 !tmp_0_13
                 )) )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcmp.c" 23 2 50#
               "expl:Pointer index bounds" true) }); _jessie_799 end)) end
            end;
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 24 6 14#
            (Safe_bit_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcmp.c" 24 6 8#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker/strcmp.c" 24 12 14#
             "expl:Integer cast"
             (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
            then
             begin
             (if
             (#"/home/work/workspace/self/verker/strcmp.c" 25 23 30#
             (Safe_bit_int32.(<) 
              (#"/home/work/workspace/self/verker/strcmp.c" 25 23 25#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
              (#"/home/work/workspace/self/verker/strcmp.c" 25 28 30#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
             then
              (tmp_1_4 :=
               (let _jessie_801 =
               (#"whole_program.jc" 2943 86 99# "expl:Integer cast"
               (Safe_bit_int32.of_int  (Int.(-_)  (1) ) )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcmp.c" 25 23 39#
               "expl:Pointer index bounds" true) }); _jessie_801 end))
             else
              (tmp_1_4 :=
               (let _jessie_800 =
               (#"whole_program.jc" 2944 36 48# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 1)) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcmp.c" 25 23 39#
               "expl:Pointer index bounds" true) }); _jessie_800 end)));
              begin
              (res_2 :=
               (let _jessie_803 = !tmp_1_4 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcmp.c" 25 17 20#
               "expl:Pointer index bounds" true) }); _jessie_803 end));
               begin
               any unit
               requires { true } reads { mutable_cs_0, mutable_ct_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcmp.c" 26 14 307#
                 (exists i_35 : int.
                  (((<=) (0) i_35) /\
                  (((<=) i_35
                   (Uint64.to_int
                   (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))
                  /\
                  ((forall j_7 : int.
                    ((((<=) (0) j_7) /\ ((<) j_7 i_35)) ->
                     (Bit_int8.(=)
                     (select charP_charM_cs_0_50
                     (shift (at !mutable_cs_0 'Init) j_7))
                     (select charP_charM_ct_0_51
                     (shift (at !mutable_ct_0 'Init) j_7)))))
                  /\
                  ((Bit_int8.(<>)
                   (select charP_charM_cs_0_50
                   (shift (at !mutable_cs_0 'Init) i_35))
                   (select charP_charM_ct_0_51
                   (shift (at !mutable_ct_0 'Init) i_35)))
                  /\
                  ((if
                    (Bit_uint8.(<) (#"whole_program.jc" 2965 69 174#
                    "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_cs_0_50
                    (shift (at !mutable_cs_0 'Init) i_35))))
                    (#"whole_program.jc" 2967 68 173# "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_ct_0_51
                    (shift (at !mutable_ct_0 'Init) i_35))))) then
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2970 66 82#
                    "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                    else
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2972 66 78#
                    "expl:Integer cast" (Bit_int32.of_int_const 1))))
                  /\
                  ((=) i_35
                  (Int.(-)
                  (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                 } ; () end;
               (if
               (#"/home/work/workspace/self/verker/strcmp.c" 32 10 17#
               (Safe_bit_int32.(<) 
                (#"/home/work/workspace/self/verker/strcmp.c" 32 10 12#
                "expl:Integer cast"
                (Safe_bit_int32_of_Safe_bit_uint8.cast  !c1_0 ))
                (#"/home/work/workspace/self/verker/strcmp.c" 32 15 17#
                "expl:Integer cast"
                (Safe_bit_int32_of_Safe_bit_uint8.cast  !c2_0 )) ))
               then
                (tmp_2_3 :=
                 (let _jessie_805 =
                 (#"whole_program.jc" 2980 86 99# "expl:Integer cast"
                 (Safe_bit_int32.of_int  (Int.(-_)  (1) ) )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/strcmp.c" 32 10 26#
                 "expl:Pointer index bounds" true) }); _jessie_805 end))
               else
                (tmp_2_3 :=
                 (let _jessie_804 =
                 (#"whole_program.jc" 2981 36 48# "expl:Integer cast"
                 (Safe_bit_int32.of_int_const 1)) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/strcmp.c" 32 10 26#
                 "expl:Pointer index bounds" true) }); _jessie_804 end)));
               begin
               (__retres_8 :=
                (let _jessie_802 = !tmp_2_3 in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/strcmp.c" 32 3 27#
                "expl:Pointer index bounds" true) }); _jessie_802 end));
                (raise (Goto_return_label_4_exc ())) end end end else ());
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 34 6 9#
            (Bool.notb 
             (Safe_bit_uint8.(<>)  !c1_0
              (#"whole_program.jc" 2988 49 61# "expl:Integer cast"
              (Safe_bit_uint8.of_int_const 0)) ) ))
            then (raise (Goto_while_0_break_11_exc ())) else ());
            begin
            any unit
            requires { true } reads { mutable_cs_0, mutable_ct_0 }
            ensures {
              (#"/home/work/workspace/self/verker/strcmp.c" 36 13 79#
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1))))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end
           with Loop_continue_exc _jessie_57 -> () end end end;
        (raise (Goto_while_0_break_11_exc ())) end with
       Goto_while_0_break_11_exc _jessie_54 ->
       'While_0_break_11:
       'While_0_break_11:
       begin
       ();
        (__retres_8 :=
         (let _jessie_806 =
         (#"whole_program.jc" 3005 30 42# "expl:Integer cast"
         (Safe_bit_int32.of_int_const 0)) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcmp.c" 39 1 10#
         "expl:Pointer index bounds" true) }); _jessie_806 end)) end end;
       (raise (Goto_return_label_4_exc ())) end with Goto_return_label_4_exc
      _jessie_55 ->
      'Return_label_4:
      'Return_label_4:
      begin
      (return :=
       (let _jessie_807 = !__retres_8 in
       begin
       (assert {
       (#"whole_program.jc" 3007 7 24# "expl:Pointer index bounds" true) });
        _jessie_807 end)); (raise Return) end end)))))))); absurd  end with
    Return -> !return end)))
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Function_strcmp_behaviors
#"/home/work/workspace/self/verker/strcmp.c" 3 4 42# "expl:strcmp, behaviors"

  use Unsafe_bit_uint8_of_Unsafe_bit_int8 
  
  use Unsafe_bit_uint8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_uint8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use enum.Bit_int32 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcmp_ensures_default
  #"/home/work/workspace/self/verker/strcmp.c" 3 4 42#
  "expl:Function strcmp, default behavior" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_50_alloc_table : (alloc_table voidP))
   (voidP_ct_0_51_alloc_table : (alloc_table voidP)) (voidP_ct_0_51_tag_table
   : (tag_table voidP)) (voidP_cs_0_50_tag_table : (tag_table voidP))
   (charP_charM_cs_0_50 : (memory voidP Int8.t)) (charP_charM_ct_0_51 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_0_51_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_51_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_51_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_51_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_51_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_50_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_50_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_50_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_50_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_50_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2793 12 93#
   ((#"/home/work/workspace/self/verker/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_50_alloc_table charP_charM_cs_0_50))
   /\
   (#"/home/work/workspace/self/verker/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_51_alloc_table charP_charM_ct_0_51)))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 2825 10 758# "expl:Behavior disjointness check"
    (not
    ((forall i_31_0 : int.
      ((((<=) (0) i_31_0) /\
       ((<=) i_31_0
       (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
       (Bit_int8.(=)
       (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_31_0))
       (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_31_0)))))
    /\
    (exists i_29_0 : int.
     (((<=) (0) i_29_0) /\
     (((<=) i_29_0
      (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))
     /\
     (Bit_int8.(<>) (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_29_0))
     (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_29_0))))))))) });
     (check {
     (#"whole_program.jc" 2838 10 721# "expl:Behavior completeness check"
     ((exists i_29_1 : int.
       (((<=) (0) i_29_1) /\
       (((<=) i_29_1
        (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))
       /\
       (Bit_int8.(<>)
       (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_29_1))
       (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_29_1))))))
     \/
     (forall i_31_1 : int.
      ((((<=) (0) i_31_1) /\
       ((<=) i_31_1
       (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
       (Bit_int8.(=)
       (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_31_1))
       (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_31_1))))))) });
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_12 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_4 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_3 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_8 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcmp.c" 7 14 166#
       "expl:Assertion in line 7"
       ((forall i_32 : int.
         ((((<=) (0) i_32) /\
          ((<=) i_32
          (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
          (Bit_int8.(=)
          (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_32))
          (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_32)))))
       <->
       (forall i_33 : int.
        ((((<=) (0) i_33) /\
         ((<=) i_33
         (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
         (Bit_uint8.(=) (#"whole_program.jc" 2881 57 85# "expl:Integer cast"
         (Bit_uint8_of_Bit_int8.cast_modulo
         (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_33))))
         (#"whole_program.jc" 2882 58 86# "expl:Integer cast"
         (Bit_uint8_of_Bit_int8.cast_modulo
         (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_33))))))))) });
        () end;
        'Loop_47:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
             (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
             ((#"/home/work/workspace/self/verker/strcmp.c" 11 20 33#
              (valid_str !mutable_cs_0 voidP_cs_0_50_alloc_table
              charP_charM_cs_0_50))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 11 37 50#
             (valid_str !mutable_ct_0 voidP_ct_0_51_alloc_table
             charP_charM_ct_0_51)))))
            &&
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
             (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
              (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
              ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
              (same_block !mutable_cs_0
              (shift (at !mutable_cs_0 'Init)
              (Uint64.to_int
              (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
             ((<=)
             (sub_pointer !mutable_cs_0
             (shift (at !mutable_cs_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
             (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
              (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
              ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
             ((#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
              (same_block !mutable_ct_0
              (shift (at !mutable_ct_0 'Init)
              (Uint64.to_int
              (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))))
             /\
             (#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
             ((<=)
             (sub_pointer !mutable_ct_0
             (shift (at !mutable_ct_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcmp.c" 14 20 56#
             ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
             (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
            &&
            ((#"/home/work/workspace/self/verker/strcmp.c" 15 20 121#
             (forall i_34 : int.
              ((((<=) (0) i_34) /\
               ((<) i_34
               (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))) ->
               (Bit_int8.(=)
               (select charP_charM_cs_0_50
               (shift (at !mutable_cs_0 'Init) i_34))
               (select charP_charM_ct_0_51
               (shift (at !mutable_ct_0 'Init) i_34))))))
            &&
            (#"/home/work/workspace/self/verker/strcmp.c" 17 20 74#
            ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50))
            (Int.(-)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50))
            (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           begin
           (tmp_0_12 := !mutable_cs_0);
            begin
            (mutable_cs_0 :=
             (shift_  !mutable_cs_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2932 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c1_0 :=
              (#"/home/work/workspace/self/verker/strcmp.c" 22 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_cs_0_50 !tmp_0_12 ) ))) end end;
            begin
            (tmp_0_13 := !mutable_ct_0);
             begin
             (mutable_ct_0 :=
              (shift_  !mutable_ct_0
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 2937 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) ));
              (c2_0 :=
               (#"/home/work/workspace/self/verker/strcmp.c" 23 23 50#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
                (acc  charP_charM_ct_0_51 !tmp_0_13 ) ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 24 6 14#
            (Unsafe_bit_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcmp.c" 24 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker/strcmp.c" 24 12 14#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             begin
             (if
             (#"/home/work/workspace/self/verker/strcmp.c" 25 23 30#
             (Unsafe_bit_int32.(<) 
              (#"/home/work/workspace/self/verker/strcmp.c" 25 23 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
              (#"/home/work/workspace/self/verker/strcmp.c" 25 28 30#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
             then
              (tmp_1_4 :=
               (#"whole_program.jc" 2943 86 99# "expl:Integer cast"
               (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
             else
              (tmp_1_4 :=
               (#"whole_program.jc" 2944 36 48# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1))));
              begin
              (res_2 := !tmp_1_4);
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcmp.c" 26 14 307#
               "expl:Assertion in line 26"
               (exists i_35 : int.
                (((<=) (0) i_35) /\
                (((<=) i_35
                 (Uint64.to_int
                 (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))
                /\
                ((forall j_7 : int.
                  ((((<=) (0) j_7) /\ ((<) j_7 i_35)) ->
                   (Bit_int8.(=)
                   (select charP_charM_cs_0_50
                   (shift (at !mutable_cs_0 'Init) j_7))
                   (select charP_charM_ct_0_51
                   (shift (at !mutable_ct_0 'Init) j_7)))))
                /\
                ((Bit_int8.(<>)
                 (select charP_charM_cs_0_50
                 (shift (at !mutable_cs_0 'Init) i_35))
                 (select charP_charM_ct_0_51
                 (shift (at !mutable_ct_0 'Init) i_35)))
                /\
                ((if
                  (Bit_uint8.(<) (#"whole_program.jc" 2965 69 174#
                  "expl:Integer cast"
                  (Bit_uint8_of_Bit_int8.cast_modulo
                  (select charP_charM_cs_0_50
                  (shift (at !mutable_cs_0 'Init) i_35))))
                  (#"whole_program.jc" 2967 68 173# "expl:Integer cast"
                  (Bit_uint8_of_Bit_int8.cast_modulo
                  (select charP_charM_ct_0_51
                  (shift (at !mutable_ct_0 'Init) i_35))))) then
                  (Bit_int32.(=) !res_2 (#"whole_program.jc" 2970 66 82#
                  "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                  else
                  (Bit_int32.(=) !res_2 (#"whole_program.jc" 2972 66 78#
                  "expl:Integer cast" (Bit_int32.of_int_const 1))))
                /\
                ((=) i_35
                (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
                (1)))))))))) }); () end;
               (if
               (#"/home/work/workspace/self/verker/strcmp.c" 32 10 17#
               (Unsafe_bit_int32.(<) 
                (#"/home/work/workspace/self/verker/strcmp.c" 32 10 12#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
                (#"/home/work/workspace/self/verker/strcmp.c" 32 15 17#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
               then
                (tmp_2_3 :=
                 (#"whole_program.jc" 2980 86 99# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
               else
                (tmp_2_3 :=
                 (#"whole_program.jc" 2981 36 48# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int_const 1))));
               begin
               (__retres_8 := !tmp_2_3); (raise (Goto_return_label_4_exc ()))
               end end end else ());
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 34 6 9#
            (Bool.notb 
             (Unsafe_bit_uint8.(<>)  !c1_0
              (#"whole_program.jc" 2988 49 61# "expl:Integer cast"
              (Unsafe_bit_uint8.of_int_const 0)) ) ))
            then (raise (Goto_while_0_break_11_exc ())) else ());
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strcmp.c" 36 13 79#
            "expl:Assertion in line 36"
            (Bit_int8.(=)
            (select charP_charM_cs_0_50
            (shift (at !mutable_cs_0 'Init)
            (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (1))))
            (select charP_charM_ct_0_51
            (shift (at !mutable_ct_0 'Init)
            (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (1)))))) }); () end end; (raise (Loop_continue_exc ())) end with
           Loop_continue_exc _jessie_57 -> () end end end;
        (raise (Goto_while_0_break_11_exc ())) end with
       Goto_while_0_break_11_exc _jessie_54 ->
       'While_0_break_11:
       'While_0_break_11:
       begin
       ();
        (__retres_8 :=
         (#"whole_program.jc" 3005 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Goto_return_label_4_exc ())) end with Goto_return_label_4_exc
      _jessie_55 ->
      'Return_label_4:
      'Return_label_4: begin (return := !__retres_8); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcmp_ensures_equal
  #"/home/work/workspace/self/verker/strcmp.c" 3 4 42#
  "expl:Function strcmp, behavior equal" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_50_alloc_table : (alloc_table voidP))
   (voidP_ct_0_51_alloc_table : (alloc_table voidP)) (voidP_ct_0_51_tag_table
   : (tag_table voidP)) (voidP_cs_0_50_tag_table : (tag_table voidP))
   (charP_charM_cs_0_50 : (memory voidP Int8.t)) (charP_charM_ct_0_51 :
   (memory voidP Int8.t)) 
   requires {
   ((forall i_31 : int.
     ((((<=) (0) i_31) /\
      ((<=) i_31 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50)))) ->
      (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 i_31))
      (select charP_charM_ct_0_51 (shift ct_0 i_31)))))
   /\
   (((allocated voidP_ct_0_51_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_51_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_51_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_51_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_51_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_50_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_50_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_50_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_50_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_50_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2793 12 93#
   ((#"/home/work/workspace/self/verker/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_50_alloc_table charP_charM_cs_0_50))
   /\
   (#"/home/work/workspace/self/verker/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_51_alloc_table charP_charM_ct_0_51))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcmp.h" 63 15 27#
     "expl:Ensures clause"
     (Bit_int32.(=) result (#"whole_program.jc" 2802 32 44#
     "expl:Integer cast" (Bit_int32.of_int_const 0))))) } diverges  ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_12 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_4 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_3 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_8 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       begin
       any unit
       requires { true } reads { mutable_cs_0, mutable_ct_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strcmp.c" 7 14 166#
         ((forall i_32 : int.
           ((((<=) (0) i_32) /\
            ((<=) i_32
            (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
            (Bit_int8.(=)
            (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_32))
            (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_32)))))
         <->
         (forall i_33 : int.
          ((((<=) (0) i_33) /\
           ((<=) i_33
           (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
           (Bit_uint8.(=) (#"whole_program.jc" 2881 57 85#
           "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_33))))
           (#"whole_program.jc" 2882 58 86# "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_33))))))))) } ;
        () end;
        'Loop_48:
        loop
        invariant { (#"whole_program.jc" 2886 6 7005# true) } 
         begin
         any unit
         requires { true } reads { mutable_cs_0, mutable_ct_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcmp.c" 17 20 74#
            ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50))
            (Int.(-)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50))
            (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 15 20 121#
            (forall i_34 : int.
             ((((<=) (0) i_34) /\
              ((<) i_34 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
              ->
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init) i_34))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init) i_34))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 14 20 56#
            ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
             (same_block !mutable_ct_0
             (shift (at !mutable_ct_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
            ((<=)
            (sub_pointer !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
             (same_block !mutable_cs_0
             (shift (at !mutable_cs_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
            ((<=)
            (sub_pointer !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           ((#"/home/work/workspace/self/verker/strcmp.c" 11 20 33#
            (valid_str !mutable_cs_0 voidP_cs_0_50_alloc_table
            charP_charM_cs_0_50))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 37 50#
           (valid_str !mutable_ct_0 voidP_ct_0_51_alloc_table
           charP_charM_ct_0_51)))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_12 := !mutable_cs_0);
            begin
            (mutable_cs_0 :=
             (shift_  !mutable_cs_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2932 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c1_0 :=
              (#"/home/work/workspace/self/verker/strcmp.c" 22 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_cs_0_50 !tmp_0_12 ) ))) end end;
            begin
            (tmp_0_13 := !mutable_ct_0);
             begin
             (mutable_ct_0 :=
              (shift_  !mutable_ct_0
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 2937 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) ));
              (c2_0 :=
               (#"/home/work/workspace/self/verker/strcmp.c" 23 23 50#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
                (acc  charP_charM_ct_0_51 !tmp_0_13 ) ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 24 6 14#
            (Unsafe_bit_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcmp.c" 24 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker/strcmp.c" 24 12 14#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             begin
             (if
             (#"/home/work/workspace/self/verker/strcmp.c" 25 23 30#
             (Unsafe_bit_int32.(<) 
              (#"/home/work/workspace/self/verker/strcmp.c" 25 23 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
              (#"/home/work/workspace/self/verker/strcmp.c" 25 28 30#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
             then
              (tmp_1_4 :=
               (#"whole_program.jc" 2943 86 99# "expl:Integer cast"
               (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
             else
              (tmp_1_4 :=
               (#"whole_program.jc" 2944 36 48# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1))));
              begin
              (res_2 := !tmp_1_4);
               begin
               any unit
               requires { true } reads { mutable_cs_0, mutable_ct_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcmp.c" 26 14 307#
                 (exists i_35 : int.
                  (((<=) (0) i_35) /\
                  (((<=) i_35
                   (Uint64.to_int
                   (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))
                  /\
                  ((forall j_7 : int.
                    ((((<=) (0) j_7) /\ ((<) j_7 i_35)) ->
                     (Bit_int8.(=)
                     (select charP_charM_cs_0_50
                     (shift (at !mutable_cs_0 'Init) j_7))
                     (select charP_charM_ct_0_51
                     (shift (at !mutable_ct_0 'Init) j_7)))))
                  /\
                  ((Bit_int8.(<>)
                   (select charP_charM_cs_0_50
                   (shift (at !mutable_cs_0 'Init) i_35))
                   (select charP_charM_ct_0_51
                   (shift (at !mutable_ct_0 'Init) i_35)))
                  /\
                  ((if
                    (Bit_uint8.(<) (#"whole_program.jc" 2965 69 174#
                    "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_cs_0_50
                    (shift (at !mutable_cs_0 'Init) i_35))))
                    (#"whole_program.jc" 2967 68 173# "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_ct_0_51
                    (shift (at !mutable_ct_0 'Init) i_35))))) then
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2970 66 82#
                    "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                    else
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2972 66 78#
                    "expl:Integer cast" (Bit_int32.of_int_const 1))))
                  /\
                  ((=) i_35
                  (Int.(-)
                  (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                 } ; () end;
               (if
               (#"/home/work/workspace/self/verker/strcmp.c" 32 10 17#
               (Unsafe_bit_int32.(<) 
                (#"/home/work/workspace/self/verker/strcmp.c" 32 10 12#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
                (#"/home/work/workspace/self/verker/strcmp.c" 32 15 17#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
               then
                (tmp_2_3 :=
                 (#"whole_program.jc" 2980 86 99# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
               else
                (tmp_2_3 :=
                 (#"whole_program.jc" 2981 36 48# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int_const 1))));
               begin
               (__retres_8 := !tmp_2_3); (raise (Goto_return_label_4_exc ()))
               end end end else ());
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 34 6 9#
            (Bool.notb 
             (Unsafe_bit_uint8.(<>)  !c1_0
              (#"whole_program.jc" 2988 49 61# "expl:Integer cast"
              (Unsafe_bit_uint8.of_int_const 0)) ) ))
            then (raise (Goto_while_0_break_11_exc ())) else ());
            begin
            any unit
            requires { true } reads { mutable_cs_0, mutable_ct_0 }
            ensures {
              (#"/home/work/workspace/self/verker/strcmp.c" 36 13 79#
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1))))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end
           with Loop_continue_exc _jessie_57 -> () end end end;
        (raise (Goto_while_0_break_11_exc ())) end with
       Goto_while_0_break_11_exc _jessie_54 ->
       'While_0_break_11:
       'While_0_break_11:
       begin
       ();
        (__retres_8 :=
         (#"whole_program.jc" 3005 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Goto_return_label_4_exc ())) end with Goto_return_label_4_exc
      _jessie_55 ->
      'Return_label_4:
      'Return_label_4: begin (return := !__retres_8); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
  let strcmp_ensures_not_equal
  #"/home/work/workspace/self/verker/strcmp.c" 3 4 42#
  "expl:Function strcmp, behavior not_equal" =
  fun
   (cs_0 : (pointer voidP)) (ct_0 : (pointer voidP))
   (voidP_cs_0_50_alloc_table : (alloc_table voidP))
   (voidP_ct_0_51_alloc_table : (alloc_table voidP)) (voidP_ct_0_51_tag_table
   : (tag_table voidP)) (voidP_cs_0_50_tag_table : (tag_table voidP))
   (charP_charM_cs_0_50 : (memory voidP Int8.t)) (charP_charM_ct_0_51 :
   (memory voidP Int8.t)) 
   requires {
   ((exists i_29 : int.
     (((<=) (0) i_29) /\
     (((<=) i_29 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50))) /\
     (Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_29))
     (select charP_charM_ct_0_51 (shift ct_0 i_29))))))
   /\
   (((allocated voidP_ct_0_51_alloc_table ct_0) ->
     (((=) (typeof voidP_ct_0_51_tag_table ct_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_0_51_alloc_table ct_0) i) /\
       ((<) i (offset_max voidP_ct_0_51_alloc_table ct_0))) ->
       ((=) (typeof voidP_ct_0_51_tag_table (shift ct_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_0_50_alloc_table cs_0) ->
     (((=) (typeof voidP_cs_0_50_tag_table cs_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_0_50_alloc_table cs_0) i) /\
       ((<) i (offset_max voidP_cs_0_50_alloc_table cs_0))) ->
       ((=) (typeof voidP_cs_0_50_tag_table (shift cs_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 2793 12 93#
   ((#"/home/work/workspace/self/verker/strcmp.h" 57 13 26#
    (valid_str cs_0 voidP_cs_0_50_alloc_table charP_charM_cs_0_50))
   /\
   (#"/home/work/workspace/self/verker/strcmp.h" 58 13 26#
   (valid_str ct_0 voidP_ct_0_51_alloc_table charP_charM_ct_0_51))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
      "expl:Ensures clause"
      ((Bit_int32.(=) result (#"whole_program.jc" 2807 44 60#
       "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
      \/
      (Bit_int32.(=) result (#"whole_program.jc" 2808 45 57#
      "expl:Integer cast" (Bit_int32.of_int_const 1)))))
     /\
     (#"/home/work/workspace/self/verker/strcmp.h" 67 15 235#
     "expl:Ensures clause"
     (exists i_30 : int.
      (((<=) (0) i_30) /\
      (((<=) i_30 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50))) /\
      ((forall j_6 : int.
        ((((<=) (0) j_6) /\ ((<) j_6 i_30)) ->
         (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 j_6))
         (select charP_charM_ct_0_51 (shift ct_0 j_6)))))
      /\
      ((Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_30))
       (select charP_charM_ct_0_51 (shift ct_0 i_30)))
      /\
      (if
       (Bit_uint8.(<) (#"whole_program.jc" 2819 41 81# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_cs_0_50 (shift cs_0 i_30))))
       (#"whole_program.jc" 2820 42 82# "expl:Integer cast"
       (Bit_uint8_of_Bit_int8.cast_modulo
       (select charP_charM_ct_0_51 (shift ct_0 i_30))))) then
       (Bit_int32.(=) result (#"whole_program.jc" 2822 38 54#
       "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1))))) else
       (Bit_int32.(=) result (#"whole_program.jc" 2823 63 75#
       "expl:Integer cast" (Bit_int32.of_int_const 1)))))))))))))) } diverges
    ->
   (let mutable_cs_0 = ref cs_0 in
   (let mutable_ct_0 = ref ct_0 in
   'Init:
   (let return = ref (Unsafe_bit_int32.any_  () ) in
   try
    begin
    (); ();
     (let c1_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let c2_0 = ref (Unsafe_bit_uint8.any_  () ) in
     (let tmp_0_12 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_13 = ref (any_pointer  () : (pointer voidP)) in
     (let res_2 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_1_4 = ref (Unsafe_bit_int32.any_  () ) in
     (let tmp_2_3 = ref (Unsafe_bit_int32.any_  () ) in
     (let __retres_8 = ref (Unsafe_bit_int32.any_  () ) in
     try
      begin
      try
       begin
       begin
       any unit
       requires { true } reads { mutable_cs_0, mutable_ct_0 }
       ensures {
         (#"/home/work/workspace/self/verker/strcmp.c" 7 14 166#
         ((forall i_32 : int.
           ((((<=) (0) i_32) /\
            ((<=) i_32
            (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
            (Bit_int8.(=)
            (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_32))
            (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_32)))))
         <->
         (forall i_33 : int.
          ((((<=) (0) i_33) /\
           ((<=) i_33
           (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50)))) ->
           (Bit_uint8.(=) (#"whole_program.jc" 2881 57 85#
           "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_cs_0_50 (shift !mutable_cs_0 i_33))))
           (#"whole_program.jc" 2882 58 86# "expl:Integer cast"
           (Bit_uint8_of_Bit_int8.cast_modulo
           (select charP_charM_ct_0_51 (shift !mutable_ct_0 i_33))))))))) } ;
        () end;
        'Loop_49:
        loop
        invariant { (#"whole_program.jc" 2886 6 7005# true) } 
         begin
         any unit
         requires { true } reads { mutable_cs_0, mutable_ct_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strcmp.c" 17 20 74#
            ((=) (Uint64.to_int (strlen !mutable_cs_0 charP_charM_cs_0_50))
            (Int.(-)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50))
            (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 15 20 121#
            (forall i_34 : int.
             ((((<=) (0) i_34) /\
              ((<) i_34 (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))))
              ->
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init) i_34))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init) i_34))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 14 20 56#
            ((=) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
            (sub_pointer !mutable_ct_0 (at !mutable_ct_0 'Init))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             (same_block (at !mutable_ct_0 'Init) !mutable_ct_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 20 37#
             ((<=) (sub_pointer (at !mutable_ct_0 'Init) !mutable_ct_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
             (same_block !mutable_ct_0
             (shift (at !mutable_ct_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 13 35 74#
            ((<=)
            (sub_pointer !mutable_ct_0
            (shift (at !mutable_ct_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_ct_0 'Init) charP_charM_ct_0_51)))) (0))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             (same_block (at !mutable_cs_0 'Init) !mutable_cs_0))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 20 37#
             ((<=) (sub_pointer (at !mutable_cs_0 'Init) !mutable_cs_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 20 74#
            ((#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
             (same_block !mutable_cs_0
             (shift (at !mutable_cs_0 'Init)
             (Uint64.to_int
             (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))))
            /\
            (#"/home/work/workspace/self/verker/strcmp.c" 12 35 74#
            ((<=)
            (sub_pointer !mutable_cs_0
            (shift (at !mutable_cs_0 'Init)
            (Uint64.to_int
            (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))) (0))))))))))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           (#"/home/work/workspace/self/verker/strcmp.c" 11 20 50#
           ((#"/home/work/workspace/self/verker/strcmp.c" 11 20 33#
            (valid_str !mutable_cs_0 voidP_cs_0_50_alloc_table
            charP_charM_cs_0_50))
           /\
           (#"/home/work/workspace/self/verker/strcmp.c" 11 37 50#
           (valid_str !mutable_ct_0 voidP_ct_0_51_alloc_table
           charP_charM_ct_0_51)))))))))) } ;
          try
           begin
           begin
           begin
           (tmp_0_12 := !mutable_cs_0);
            begin
            (mutable_cs_0 :=
             (shift_  !mutable_cs_0
              (Unsafe_bit_int32.to_int 
               (#"whole_program.jc" 2932 51 63# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1)) ) ));
             (c1_0 :=
              (#"/home/work/workspace/self/verker/strcmp.c" 22 23 50#
              "expl:Integer cast"
              (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
               (acc  charP_charM_cs_0_50 !tmp_0_12 ) ))) end end;
            begin
            (tmp_0_13 := !mutable_ct_0);
             begin
             (mutable_ct_0 :=
              (shift_  !mutable_ct_0
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 2937 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) ));
              (c2_0 :=
               (#"/home/work/workspace/self/verker/strcmp.c" 23 23 50#
               "expl:Integer cast"
               (Unsafe_bit_uint8_of_Unsafe_bit_int8.cast_modulo 
                (acc  charP_charM_ct_0_51 !tmp_0_13 ) ))) end end;
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 24 6 14#
            (Unsafe_bit_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcmp.c" 24 6 8#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
             (#"/home/work/workspace/self/verker/strcmp.c" 24 12 14#
             "expl:Integer cast"
             (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
            then
             begin
             (if
             (#"/home/work/workspace/self/verker/strcmp.c" 25 23 30#
             (Unsafe_bit_int32.(<) 
              (#"/home/work/workspace/self/verker/strcmp.c" 25 23 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
              (#"/home/work/workspace/self/verker/strcmp.c" 25 28 30#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
             then
              (tmp_1_4 :=
               (#"whole_program.jc" 2943 86 99# "expl:Integer cast"
               (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
             else
              (tmp_1_4 :=
               (#"whole_program.jc" 2944 36 48# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 1))));
              begin
              (res_2 := !tmp_1_4);
               begin
               any unit
               requires { true } reads { mutable_cs_0, mutable_ct_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcmp.c" 26 14 307#
                 (exists i_35 : int.
                  (((<=) (0) i_35) /\
                  (((<=) i_35
                   (Uint64.to_int
                   (strlen (at !mutable_cs_0 'Init) charP_charM_cs_0_50)))
                  /\
                  ((forall j_7 : int.
                    ((((<=) (0) j_7) /\ ((<) j_7 i_35)) ->
                     (Bit_int8.(=)
                     (select charP_charM_cs_0_50
                     (shift (at !mutable_cs_0 'Init) j_7))
                     (select charP_charM_ct_0_51
                     (shift (at !mutable_ct_0 'Init) j_7)))))
                  /\
                  ((Bit_int8.(<>)
                   (select charP_charM_cs_0_50
                   (shift (at !mutable_cs_0 'Init) i_35))
                   (select charP_charM_ct_0_51
                   (shift (at !mutable_ct_0 'Init) i_35)))
                  /\
                  ((if
                    (Bit_uint8.(<) (#"whole_program.jc" 2965 69 174#
                    "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_cs_0_50
                    (shift (at !mutable_cs_0 'Init) i_35))))
                    (#"whole_program.jc" 2967 68 173# "expl:Integer cast"
                    (Bit_uint8_of_Bit_int8.cast_modulo
                    (select charP_charM_ct_0_51
                    (shift (at !mutable_ct_0 'Init) i_35))))) then
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2970 66 82#
                    "expl:Integer cast" (Bit_int32.of_int (Int.(-_) (1)))))
                    else
                    (Bit_int32.(=) !res_2 (#"whole_program.jc" 2972 66 78#
                    "expl:Integer cast" (Bit_int32.of_int_const 1))))
                  /\
                  ((=) i_35
                  (Int.(-)
                  (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init)) (1))))))))))
                 } ; () end;
               (if
               (#"/home/work/workspace/self/verker/strcmp.c" 32 10 17#
               (Unsafe_bit_int32.(<) 
                (#"/home/work/workspace/self/verker/strcmp.c" 32 10 12#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c1_0 ))
                (#"/home/work/workspace/self/verker/strcmp.c" 32 15 17#
                "expl:Integer cast"
                (Unsafe_bit_int32_of_Unsafe_bit_uint8.cast  !c2_0 )) ))
               then
                (tmp_2_3 :=
                 (#"whole_program.jc" 2980 86 99# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int  (Int.(-_)  (1) ) )))
               else
                (tmp_2_3 :=
                 (#"whole_program.jc" 2981 36 48# "expl:Integer cast"
                 (Unsafe_bit_int32.of_int_const 1))));
               begin
               (__retres_8 := !tmp_2_3); (raise (Goto_return_label_4_exc ()))
               end end end else ());
            (if
            (#"/home/work/workspace/self/verker/strcmp.c" 34 6 9#
            (Bool.notb 
             (Unsafe_bit_uint8.(<>)  !c1_0
              (#"whole_program.jc" 2988 49 61# "expl:Integer cast"
              (Unsafe_bit_uint8.of_int_const 0)) ) ))
            then (raise (Goto_while_0_break_11_exc ())) else ());
            begin
            any unit
            requires { true } reads { mutable_cs_0, mutable_ct_0 }
            ensures {
              (#"/home/work/workspace/self/verker/strcmp.c" 36 13 79#
              (Bit_int8.(=)
              (select charP_charM_cs_0_50
              (shift (at !mutable_cs_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1))))
              (select charP_charM_ct_0_51
              (shift (at !mutable_ct_0 'Init)
              (Int.(-) (sub_pointer !mutable_cs_0 (at !mutable_cs_0 'Init))
              (1)))))) } ; () end end; (raise (Loop_continue_exc ())) end
           with Loop_continue_exc _jessie_57 -> () end end end;
        (raise (Goto_while_0_break_11_exc ())) end with
       Goto_while_0_break_11_exc _jessie_54 ->
       'While_0_break_11:
       'While_0_break_11:
       begin
       ();
        (__retres_8 :=
         (#"whole_program.jc" 3005 30 42# "expl:Integer cast"
         (Unsafe_bit_int32.of_int_const 0))) end end;
       (raise (Goto_return_label_4_exc ())) end with Goto_return_label_4_exc
      _jessie_55 ->
      'Return_label_4:
      'Return_label_4: begin (return := !__retres_8); (raise Return) end end))))))));
     absurd  end with Return -> !return end)))
  
end

module Function_strcpy_safety
#"/home/work/workspace/self/verker/strcpy.c" 3 5 41# "expl:strcpy, safety"

  use enum.Uint64 
  
  use Safe_int8 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcpy #"/home/work/workspace/self/verker/strcpy.c" 3 5 41#
  "expl:Function strcpy, safety" =
  fun
   (dest_7 : (pointer voidP)) (src_6 : (pointer voidP))
   (charP_charM_dest_7_52 : ref (memory voidP Int8.t))
   (voidP_dest_7_52_alloc_table : (alloc_table voidP))
   (voidP_src_6_53_alloc_table : (alloc_table voidP))
   (voidP_src_6_53_tag_table : (tag_table voidP)) (voidP_dest_7_52_tag_table
   : (tag_table voidP)) (charP_charM_src_6_53 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_6_53_alloc_table src_6) ->
     (((=) (typeof voidP_src_6_53_tag_table src_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_6_53_alloc_table src_6) i) /\
       ((<) i (offset_max voidP_src_6_53_alloc_table src_6))) ->
       ((=) (typeof voidP_src_6_53_tag_table (shift src_6 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_7_52_alloc_table dest_7) ->
     (((=) (typeof voidP_dest_7_52_tag_table dest_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_7_52_alloc_table dest_7) i) /\
       ((<) i (offset_max voidP_dest_7_52_alloc_table dest_7))) ->
       ((=) (typeof voidP_dest_7_52_tag_table (shift dest_7 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3012 12 773#
   ((#"/home/work/workspace/self/verker/strcpy.h" 12 13 27#
    (valid_str src_6 voidP_src_6_53_alloc_table charP_charM_src_6_53))
   /\
   (#"whole_program.jc" 3012 12 773#
   ((#"/home/work/workspace/self/verker/strcpy.h" 13 13 42#
    (if ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_53))) then
     (((<=) (offset_min voidP_dest_7_52_alloc_table dest_7) (0)) /\
     (((>=) (offset_max voidP_dest_7_52_alloc_table dest_7)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))
     /\
     (forall __framac_tmp25 : int.
      ((((<=) (0) __framac_tmp25) /\
       ((<=) __framac_tmp25
       (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/strcpy.h" 14 13 48#
   (not (same_block dest_7 src_6))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_dest_7 = ref dest_7 in
   (let mutable_src_6 = ref src_6 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let osrc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_15 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_5 = ref (Safe_int8.any_  () ) in
    (let tmp_2_4 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (tmp_0_14 :=
      (let _jessie_832 = !mutable_dest_7 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcpy.c" 5 6 10#
      "expl:Pointer index bounds" true) }); _jessie_832 end));
      begin
      (osrc_0 :=
       (let _jessie_821 = !mutable_src_6 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcpy.c" 6 17 21#
       "expl:Pointer index bounds" true) }); _jessie_821 end));
       begin
       any unit
       requires { true }
       ensures {
         (#"/home/work/workspace/self/verker/strcpy.c" 7 12 27#
         (valid_str !osrc_0 voidP_src_6_53_alloc_table charP_charM_src_6_53))
         } ; () end;
       'Loop_52:
       loop
       invariant { (#"whole_program.jc" 3053 6 2808# true) }
         variant { (#"/home/work/workspace/self/verker/strcpy.c" 15 18 45#
           (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53))
           (sub_pointer !mutable_src_6 !osrc_0))) }
        begin
        any unit
        requires { true } reads { charP_charM_dest_7_52, mutable_dest_7,
        mutable_src_6 }
        ensures {
          ((#"/home/work/workspace/self/verker/strcpy.c" 14 20 80#
           (forall i_36 : int.
            ((((<=) (0) i_36) /\
             ((<) i_36 (sub_pointer !mutable_src_6 !osrc_0))) ->
             (Int8.(=) (select !charP_charM_dest_7_52 (shift !tmp_0_14 i_36))
             (select charP_charM_src_6_53 (shift !osrc_0 i_36))))))
          /\
          ((#"/home/work/workspace/self/verker/strcpy.c" 13 20 62#
           ((=) (Uint64.to_int (strlen !mutable_src_6 charP_charM_src_6_53))
           (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53))
           (sub_pointer !mutable_src_6 !osrc_0))))
          /\
          ((#"/home/work/workspace/self/verker/strcpy.c" 12 20 44#
           ((=) (sub_pointer !mutable_dest_7 !tmp_0_14)
           (sub_pointer !mutable_src_6 !osrc_0)))
          /\
          ((#"/home/work/workspace/self/verker/strcpy.c" 11 20 34#
           (valid_str !mutable_src_6 voidP_src_6_53_alloc_table
           charP_charM_src_6_53))
          /\
          ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
           (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 31#
            (same_block !tmp_0_14 !mutable_dest_7))
           /\
           (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 31#
            ((<=) (sub_pointer !tmp_0_14 !mutable_dest_7) (0)))
           /\
           (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
           ((#"/home/work/workspace/self/verker/strcpy.c" 10 27 53#
            (same_block !mutable_dest_7
            (shift !tmp_0_14
            (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))))
           /\
           (#"/home/work/workspace/self/verker/strcpy.c" 10 27 53#
           ((<=)
           (sub_pointer !mutable_dest_7
           (shift !tmp_0_14
           (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))) (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
          (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker/strcpy.c" 9 20 31#
           (same_block !osrc_0 !mutable_src_6))
          /\
          (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker/strcpy.c" 9 20 31#
           ((<=) (sub_pointer !osrc_0 !mutable_src_6) (0)))
          /\
          (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
          ((#"/home/work/workspace/self/verker/strcpy.c" 9 28 54#
           (same_block !mutable_src_6
           (shift !osrc_0
           (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))))
          /\
          (#"/home/work/workspace/self/verker/strcpy.c" 9 28 54#
          ((<=)
          (sub_pointer !mutable_src_6
          (shift !osrc_0
          (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))) (0)))))))))))))))
          } ;
         try
          begin
          begin
          begin
          (tmp_0_15 :=
           (let _jessie_822 = !mutable_dest_7 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strcpy.c" 17 10 16#
           "expl:Pointer index bounds" true) }); _jessie_822 end));
           begin
           (mutable_dest_7 :=
            (let _jessie_823 =
            (shift_typesafe  !mutable_dest_7
             (Safe_int32.to_int 
              (#"whole_program.jc" 3096 55 67# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strcpy.c" 17 10 16#
            "expl:Pointer index bounds" true) }); _jessie_823 end));
            begin
            (tmp_2_4 :=
             (let _jessie_824 = !mutable_src_6 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strcpy.c" 17 20 25#
             "expl:Pointer index bounds" true) }); _jessie_824 end));
             begin
             (mutable_src_6 :=
              (let _jessie_825 =
              (shift_typesafe  !mutable_src_6
               (Safe_int32.to_int 
                (#"whole_program.jc" 3098 53 65# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcpy.c" 17 20 25#
              "expl:Pointer index bounds" true) }); _jessie_825 end));
              (tmp_1_5 :=
               (let _jessie_826 =
               (#"/home/work/workspace/self/verker/strcpy.c" 17 19 25#
               "expl:Pointer dereference"
               (acc  voidP_src_6_53_alloc_table charP_charM_src_6_53 !tmp_2_4
                )) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcpy.c" 17 9 25#
               "expl:Pointer index bounds" true) }); _jessie_826 end)) end
            end end end;
           begin
           (let _jessie_828 =
           (let _jessie_827 = !tmp_1_5 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strcpy.c" 17 9 25#
           "expl:Pointer index bounds" true) }); _jessie_827 end) in
           (let _jessie_829 = !tmp_0_15 in
           (let _jessie_830 = (0) in
           (let _jessie_831 = _jessie_829 in
           (#"/home/work/workspace/self/verker/strcpy.c" 17 9 25#
           "expl:Pointer dereference"
           (upd  voidP_dest_7_52_alloc_table charP_charM_dest_7_52
            _jessie_829 _jessie_828 ))))));
            (if
            (#"/home/work/workspace/self/verker/strcpy.c" 17 8 34#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcpy.c" 17 9 25#
             "expl:Integer cast" (Safe_int32_of_Safe_int8.cast  !tmp_1_5 ))
             (#"whole_program.jc" 3102 60 72# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_12_exc ()))) end end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_60 -> () end end end;
       (raise (Goto_while_0_break_12_exc ())) end end with
     Goto_while_0_break_12_exc _jessie_58 ->
     'While_0_break_12:
     'While_0_break_12:
     begin
     ();
      begin
      any unit
      requires { true } reads { charP_charM_dest_7_52, mutable_dest_7,
      mutable_src_6 }
      ensures {
        (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
        (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
        ((#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
         (Int8.(=)
         (select !charP_charM_dest_7_52
         (shift !mutable_dest_7 (Int.(-_) (1))))
         (#"whole_program.jc" 3110 53 64# "expl:Integer cast" (Int8.of_int
         (0)))))
        /\
        (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
        (Int8.(=)
        (select charP_charM_src_6_53 (shift !mutable_src_6 (Int.(-_) (1))))
        (#"whole_program.jc" 3112 54 65# "expl:Integer cast" (Int8.of_int
        (0)))))))) } ; () end;
      begin
      any unit
      requires { true } reads { charP_charM_dest_7_52 }
      ensures {
        (#"/home/work/workspace/self/verker/strcpy.c" 20 12 26#
        (valid_str !tmp_0_14 voidP_dest_7_52_alloc_table
        !charP_charM_dest_7_52)) } ; () end;
      begin
      (return :=
       (let _jessie_833 = !tmp_0_14 in
       begin
       (assert {
       (#"whole_program.jc" 3121 7 22# "expl:Pointer index bounds" true) });
        _jessie_833 end)); (raise Return) end end end))))); absurd  end with
    Return -> !return end)))
  
end

module Function_strcpy_behaviors
#"/home/work/workspace/self/verker/strcpy.c" 3 5 41# "expl:strcpy, behaviors"

  use Unsafe_int8 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strcpy_ensures_default
  #"/home/work/workspace/self/verker/strcpy.c" 3 5 41#
  "expl:Function strcpy, default behavior" =
  fun
   (dest_7 : (pointer voidP)) (src_6 : (pointer voidP))
   (charP_charM_dest_7_52 : ref (memory voidP Int8.t))
   (voidP_dest_7_52_alloc_table : (alloc_table voidP))
   (voidP_src_6_53_alloc_table : (alloc_table voidP))
   (voidP_src_6_53_tag_table : (tag_table voidP)) (voidP_dest_7_52_tag_table
   : (tag_table voidP)) (charP_charM_src_6_53 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_6_53_alloc_table src_6) ->
     (((=) (typeof voidP_src_6_53_tag_table src_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_6_53_alloc_table src_6) i) /\
       ((<) i (offset_max voidP_src_6_53_alloc_table src_6))) ->
       ((=) (typeof voidP_src_6_53_tag_table (shift src_6 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_7_52_alloc_table dest_7) ->
     (((=) (typeof voidP_dest_7_52_tag_table dest_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_7_52_alloc_table dest_7) i) /\
       ((<) i (offset_max voidP_dest_7_52_alloc_table dest_7))) ->
       ((=) (typeof voidP_dest_7_52_tag_table (shift dest_7 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3012 12 773#
   ((#"/home/work/workspace/self/verker/strcpy.h" 12 13 27#
    (valid_str src_6 voidP_src_6_53_alloc_table charP_charM_src_6_53))
   /\
   (#"whole_program.jc" 3012 12 773#
   ((#"/home/work/workspace/self/verker/strcpy.h" 13 13 42#
    (if ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_53))) then
     (((<=) (offset_min voidP_dest_7_52_alloc_table dest_7) (0)) /\
     (((>=) (offset_max voidP_dest_7_52_alloc_table dest_7)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))
     /\
     (forall __framac_tmp25 : int.
      ((((<=) (0) __framac_tmp25) /\
       ((<=) __framac_tmp25
       (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/strcpy.h" 14 13 48#
   (not (same_block dest_7 src_6))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 3025 10 63# "expl:Assigns clause"
      (not_assigns voidP_dest_7_52_alloc_table voidP_dest_7_52_alloc_table
      (old !charP_charM_dest_7_52) !charP_charM_dest_7_52
      (pset_range (pset_singleton dest_7) (0)
      (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))))
     /\
     (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
      "expl:Ensures clause"
      (valid_str result voidP_dest_7_52_alloc_table !charP_charM_dest_7_52))
     /\
     (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcpy.h" 17 12 27#
      "expl:Ensures clause" ((=) result dest_7))
     /\
     (#"/home/work/workspace/self/verker/strcpy.h" 18 12 77#
     "expl:Ensures clause"
     (forall i_32_0 : int.
      ((((<=) (0) i_32_0) /\
       ((<=) i_32_0 (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
       (Int8.(=) (select !charP_charM_dest_7_52 (shift result i_32_0))
       (select charP_charM_src_6_53 (shift src_6 i_32_0))))))))))))) }
   diverges  ->
   (let mutable_dest_7 = ref dest_7 in
   (let mutable_src_6 = ref src_6 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let tmp_0_14 = ref (any_pointer  () : (pointer voidP)) in
    (let osrc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0_15 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1_5 = ref (Unsafe_int8.any_  () ) in
    (let tmp_2_4 = ref (any_pointer  () : (pointer voidP)) in
    try
     begin
     (tmp_0_14 := !mutable_dest_7);
      begin
      (osrc_0 := !mutable_src_6);
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strcpy.c" 7 12 27#
       "expl:Assertion in line 7"
       (valid_str !osrc_0 voidP_src_6_53_alloc_table charP_charM_src_6_53))
       }); () end;
       'Loop_51:
       loop
       invariant
         { (((#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
             (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/strcpy.c" 9 20 31#
              (same_block !osrc_0 !mutable_src_6))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/strcpy.c" 9 20 31#
              ((<=) (sub_pointer !osrc_0 !mutable_src_6) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 9 20 54#
             ((#"/home/work/workspace/self/verker/strcpy.c" 9 28 54#
              (same_block !mutable_src_6
              (shift !osrc_0
              (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 9 28 54#
             ((<=)
             (sub_pointer !mutable_src_6
             (shift !osrc_0
             (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
             (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 31#
              (same_block !tmp_0_14 !mutable_dest_7))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker/strcpy.c" 10 20 31#
              ((<=) (sub_pointer !tmp_0_14 !mutable_dest_7) (0)))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 10 20 53#
             ((#"/home/work/workspace/self/verker/strcpy.c" 10 27 53#
              (same_block !mutable_dest_7
              (shift !tmp_0_14
              (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))))
             /\
             (#"/home/work/workspace/self/verker/strcpy.c" 10 27 53#
             ((<=)
             (sub_pointer !mutable_dest_7
             (shift !tmp_0_14
             (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strcpy.c" 11 20 34#
             (valid_str !mutable_src_6 voidP_src_6_53_alloc_table
             charP_charM_src_6_53))
            &&
            ((#"/home/work/workspace/self/verker/strcpy.c" 12 20 44#
             ((=) (sub_pointer !mutable_dest_7 !tmp_0_14)
             (sub_pointer !mutable_src_6 !osrc_0)))
            &&
            ((#"/home/work/workspace/self/verker/strcpy.c" 13 20 62#
             ((=)
             (Uint64.to_int (strlen !mutable_src_6 charP_charM_src_6_53))
             (Int.(-) (Uint64.to_int (strlen !osrc_0 charP_charM_src_6_53))
             (sub_pointer !mutable_src_6 !osrc_0))))
            &&
            (#"/home/work/workspace/self/verker/strcpy.c" 14 20 80#
            (forall i_36 : int.
             ((((<=) (0) i_36) /\
              ((<) i_36 (sub_pointer !mutable_src_6 !osrc_0))) ->
              (Int8.(=)
              (select !charP_charM_dest_7_52 (shift !tmp_0_14 i_36))
              (select charP_charM_src_6_53 (shift !osrc_0 i_36)))))))))))
           /\
           (#"whole_program.jc" 3025 10 63# "expl:Assigns clause"
           (not_assigns voidP_dest_7_52_alloc_table
           voidP_dest_7_52_alloc_table (at !charP_charM_dest_7_52 'Init)
           !charP_charM_dest_7_52
           (pset_range (pset_singleton (at !mutable_dest_7 'Init)) (0)
           (Uint64.to_int
           (strlen (at !mutable_src_6 'Init) charP_charM_src_6_53)))))) } 
         
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_15 := !mutable_dest_7);
           begin
           (mutable_dest_7 :=
            (shift_  !mutable_dest_7
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 3096 55 67# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) ));
            begin
            (tmp_2_4 := !mutable_src_6);
             begin
             (mutable_src_6 :=
              (shift_  !mutable_src_6
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 3098 53 65# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) ));
              (tmp_1_5 := (acc  charP_charM_src_6_53 !tmp_2_4 )) end end end
          end;
           begin
           (let _jessie_815 = !tmp_1_5 in
           (let _jessie_816 = !tmp_0_15 in
           (let _jessie_817 = (0) in
           (let _jessie_818 = _jessie_816 in
           (upd  charP_charM_dest_7_52 _jessie_818 _jessie_815 )))));
            (if
            (#"/home/work/workspace/self/verker/strcpy.c" 17 8 34#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcpy.c" 17 9 25#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  !tmp_1_5 ))
             (#"whole_program.jc" 3102 60 72# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_12_exc ()))) end end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_60 -> () end end end;
       (raise (Goto_while_0_break_12_exc ())) end end with
     Goto_while_0_break_12_exc _jessie_58 ->
     'While_0_break_12:
     'While_0_break_12:
     begin
     ();
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      ((#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
       "expl:Assertion in line 19"
       (Int8.(=)
       (select !charP_charM_dest_7_52 (shift !mutable_dest_7 (Int.(-_) (1))))
       (#"whole_program.jc" 3110 53 64# "expl:Integer cast" (Int8.of_int
       (0)))))
      /\
      (#"/home/work/workspace/self/verker/strcpy.c" 19 12 47#
      "expl:Assertion in line 19"
      (Int8.(=)
      (select charP_charM_src_6_53 (shift !mutable_src_6 (Int.(-_) (1))))
      (#"whole_program.jc" 3112 54 65# "expl:Integer cast" (Int8.of_int
      (0)))))))) }); () end;
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strcpy.c" 20 12 26#
      "expl:Assertion in line 20"
      (valid_str !tmp_0_14 voidP_dest_7_52_alloc_table
      !charP_charM_dest_7_52)) }); () end;
      begin (return := !tmp_0_14); (raise Return) end end end))))); absurd 
    end with Return -> !return end)))
  
end

theory Axiomatic_StrSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate in_array (s_17 : (pointer voidP)) (c_28 : Int8.t)
  (charP_charM_s_17_55_at_L : (memory voidP Int8.t))
  =
     (exists p_8_0 : (pointer voidP).
      ((same_block s_17 p_8_0) /\
      (((<=) (sub_pointer s_17 p_8_0) (0)) /\
      ((same_block p_8_0
       (shift s_17 (Uint64.to_int (strlen s_17 charP_charM_s_17_55_at_L))))
      /\
      (((<)
       (sub_pointer p_8_0
       (shift s_17 (Uint64.to_int (strlen s_17 charP_charM_s_17_55_at_L))))
       (0))
      /\ (Int8.(=) (select charP_charM_s_17_55_at_L p_8_0) c_28))))))
  
  
  lemma In_array_shift1
  #"/home/work/workspace/self/verker/strspn.h" 17 7 129#
  "expl:Lemma in_array_shift1" :
  (forall voidP_s_18_284_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_18_284_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 17 7 129#
    (forall s_18 : (pointer voidP).
     (forall c_29 : Int8.t.
      ((((valid_str s_18 voidP_s_18_284_alloc_table_at_L
         charP_charM_s_18_284_at_L)
        /\
        (((<>) s_18 null) /\
        (Int8.(<>) (select charP_charM_s_18_284_at_L s_18) c_29))) ->
        (in_array s_18 c_29 charP_charM_s_18_284_at_L))
      <-> (in_array (shift s_18 (1)) c_29 charP_charM_s_18_284_at_L)))))))
  
  lemma In_array_true #"/home/work/workspace/self/verker/strspn.h" 21 7 105#
  "expl:Lemma in_array_true" :
  (forall voidP_s_19_286_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_19_286_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 21 7 105#
    (forall s_19 : (pointer voidP).
     (forall c_30 : Int8.t.
      (((valid_str s_19 voidP_s_19_286_alloc_table_at_L
        charP_charM_s_19_286_at_L)
       /\
       (((<>) s_19 null) /\
       (Int8.(=) (select charP_charM_s_19_286_at_L s_19) c_30))) ->
       (in_array s_19 c_30 charP_charM_s_19_286_at_L)))))))
  
  lemma In_array_false #"/home/work/workspace/self/verker/strspn.h" 25 7 95#
  "expl:Lemma in_array_false" :
  (forall voidP_s_20_288_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_20_288_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 25 7 95#
    (forall s_20 : (pointer voidP).
     (forall c_31 : Int8.t.
      (((valid_str s_20 voidP_s_20_288_alloc_table_at_L
        charP_charM_s_20_288_at_L)
       /\ ((=) s_20 null)) ->
       (not (in_array s_20 c_31 charP_charM_s_20_288_at_L))))))))
  
  function strspn (pointer voidP) (pointer voidP) : int
  
  
  lemma Strspn_strend #"/home/work/workspace/self/verker/strspn.h" 32 7 106#
  "expl:Lemma strspn_strend" :
  (forall voidP_s_21_56_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_21_56_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 32 7 106#
    (forall s_22 : (pointer voidP).
     (forall accept_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_21_56_alloc_table_at_L s_22) (0)) /\
        (((>=) (offset_max voidP_s_21_56_alloc_table_at_L s_22) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_21_56_at_L s_22)
       (#"whole_program.jc" 3164 34 45# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strspn s_22 accept_0_0) (0))))))))
  
  lemma Strspn_empty_accept
  #"/home/work/workspace/self/verker/strspn.h" 37 7 116#
  "expl:Lemma strspn_empty_accept" :
  (forall voidP_accept_57_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_accept_57_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 37 7 116#
    (forall s_23 : (pointer voidP).
     (forall accept_1 : (pointer voidP).
      (((((<=) (offset_min voidP_accept_57_alloc_table_at_L accept_1) (0)) /\
        (((>=) (offset_max voidP_accept_57_alloc_table_at_L accept_1) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_accept_57_at_L accept_1)
       (#"whole_program.jc" 3173 38 49# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strspn s_23 accept_1) (0))))))))
  
  lemma Strspn_range #"/home/work/workspace/self/verker/strspn.h" 42 7 129#
  "expl:Lemma strspn_range" :
  (forall voidP_accept_57_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_56_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_57_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_56_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 42 7 129#
      (forall s_24 : (pointer voidP).
       (forall accept_2 : (pointer voidP).
        (((valid_str s_24 voidP_s_21_56_alloc_table_at_L
          charP_charM_s_21_56_at_L)
         /\
         (valid_str accept_2 voidP_accept_57_alloc_table_at_L
         charP_charM_accept_57_at_L)) ->
         (((<=) (0) (strspn s_24 accept_2)) /\
         ((<=) (strspn s_24 accept_2)
         (Uint64.to_int (strlen s_24 charP_charM_s_21_56_at_L))))))))))))
  
  lemma Strspn_shift1 #"/home/work/workspace/self/verker/strspn.h" 47 7 188#
  "expl:Lemma strspn_shift1" :
  (forall voidP_accept_57_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_56_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_57_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_56_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 47 7 188#
      (forall s_25 : (pointer voidP).
       (forall accept_3 : (pointer voidP).
        (((valid_str s_25 voidP_s_21_56_alloc_table_at_L
          charP_charM_s_21_56_at_L)
         /\
         ((valid_str accept_3 voidP_accept_57_alloc_table_at_L
          charP_charM_accept_57_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_56_at_L s_25)
          (#"whole_program.jc" 3187 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array accept_3 (select charP_charM_s_21_56_at_L s_25)
         charP_charM_accept_57_at_L)))) ->
         ((=) (strspn s_25 accept_3)
         (Int.(+) (strspn (shift s_25 (1)) accept_3) (1)))))))))))
  
  lemma Strspn_stop_not_in_accept
  #"/home/work/workspace/self/verker/strspn.h" 53 7 165#
  "expl:Lemma strspn_stop_not_in_accept" :
  (forall voidP_accept_57_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_56_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_57_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_56_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 53 7 165#
      (forall s_26 : (pointer voidP).
       (forall accept_4 : (pointer voidP).
        (((valid_str s_26 voidP_s_21_56_alloc_table_at_L
          charP_charM_s_21_56_at_L)
         /\
         ((valid_str accept_4 voidP_accept_57_alloc_table_at_L
          charP_charM_accept_57_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_56_at_L s_26)
          (#"whole_program.jc" 3196 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array accept_4 (select charP_charM_s_21_56_at_L s_26)
         charP_charM_accept_57_at_L))))) -> ((=) (strspn s_26 accept_4) (0))))))))))
  
end

theory Axiomatic_StrCSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  function strcspn (pointer voidP) (pointer voidP) : int
  
  
  lemma Strcspn_strend
  #"/home/work/workspace/self/verker/strcspn.h" 18 7 107#
  "expl:Lemma strcspn_strend" :
  (forall voidP_s_27_58_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_27_58_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strcspn.h" 18 7 107#
    (forall s_28 : (pointer voidP).
     (forall reject_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_27_58_alloc_table_at_L s_28) (0)) /\
        (((>=) (offset_max voidP_s_27_58_alloc_table_at_L s_28) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_27_58_at_L s_28)
       (#"whole_program.jc" 3212 34 45# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strcspn s_28 reject_0_0) (0))))))))
  
  lemma Strcspn_empty_reject
  #"/home/work/workspace/self/verker/strcspn.h" 23 7 144#
  "expl:Lemma strcspn_empty_reject" :
  (forall voidP_reject_59_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_27_58_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_59_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_27_58_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 23 7 144#
      (forall s_29 : (pointer voidP).
       (forall reject_1 : (pointer voidP).
        (((valid_str s_29 voidP_s_27_58_alloc_table_at_L
          charP_charM_s_27_58_at_L)
         /\
         ((valid_str reject_1 voidP_reject_59_alloc_table_at_L
          charP_charM_reject_59_at_L)
         /\
         (Int8.(=) (select charP_charM_reject_59_at_L reject_1)
         (#"whole_program.jc" 3219 38 49# "expl:Integer cast" (Int8.of_int
         (0)))))) ->
         ((=) (strcspn s_29 reject_1)
         (Uint64.to_int (strlen s_29 charP_charM_s_27_58_at_L)))))))))))
  
  lemma Strcspn_range #"/home/work/workspace/self/verker/strcspn.h" 28 7 130#
  "expl:Lemma strcspn_range" :
  (forall voidP_reject_59_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_27_58_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_59_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_27_58_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 28 7 130#
      (forall s_30 : (pointer voidP).
       (forall reject_2 : (pointer voidP).
        (((valid_str s_30 voidP_s_27_58_alloc_table_at_L
          charP_charM_s_27_58_at_L)
         /\
         (valid_str reject_2 voidP_reject_59_alloc_table_at_L
         charP_charM_reject_59_at_L)) ->
         (((<=) (0) (strcspn s_30 reject_2)) /\
         ((<=) (strcspn s_30 reject_2)
         (Uint64.to_int (strlen s_30 charP_charM_s_27_58_at_L))))))))))))
  
  lemma Strcspn_shift1
  #"/home/work/workspace/self/verker/strcspn.h" 33 7 191#
  "expl:Lemma strcspn_shift1" :
  (forall voidP_reject_59_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_27_58_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_59_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_27_58_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 33 7 191#
      (forall s_31 : (pointer voidP).
       (forall reject_3 : (pointer voidP).
        (((valid_str s_31 voidP_s_27_58_alloc_table_at_L
          charP_charM_s_27_58_at_L)
         /\
         ((valid_str reject_3 voidP_reject_59_alloc_table_at_L
          charP_charM_reject_59_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_27_58_at_L s_31)
          (#"whole_program.jc" 3233 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array reject_3 (select charP_charM_s_27_58_at_L s_31)
         charP_charM_reject_59_at_L))))) ->
         ((=) (strcspn s_31 reject_3)
         (Int.(+) (strcspn (shift s_31 (1)) reject_3) (1)))))))))))
  
  lemma Strcspn_stop_in_reject
  #"/home/work/workspace/self/verker/strcspn.h" 39 7 165#
  "expl:Lemma strcspn_stop_in_reject" :
  (forall voidP_reject_59_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_27_58_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_59_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_27_58_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 39 7 165#
      (forall s_32 : (pointer voidP).
       (forall reject_4 : (pointer voidP).
        (((valid_str s_32 voidP_s_27_58_alloc_table_at_L
          charP_charM_s_27_58_at_L)
         /\
         ((valid_str reject_4 voidP_reject_59_alloc_table_at_L
          charP_charM_reject_59_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_27_58_at_L s_32)
          (#"whole_program.jc" 3242 35 46# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array reject_4 (select charP_charM_s_27_58_at_L s_32)
         charP_charM_reject_59_at_L)))) -> ((=) (strcspn s_32 reject_4) (0))))))))))
  
end

module Function_strcspn_0_safety
#"/home/work/workspace/self/verker/strcspn.c" 3 7 49# "expl:strcspn, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_0 #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, safety" =
  fun
   (s_5_0 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_60_alloc_table : (alloc_table voidP))
   (voidP_reject_61_alloc_table : (alloc_table voidP))
   (voidP_reject_61_tag_table : (tag_table voidP)) (voidP_s_5_60_tag_table :
   (tag_table voidP)) (charP_charM_s_5_60 : (memory voidP Int8.t))
   (charP_charM_reject_61 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_61_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_61_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_61_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_61_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_61_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_60_alloc_table s_5_0) ->
     (((=) (typeof voidP_s_5_60_tag_table s_5_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_60_alloc_table s_5_0) i) /\
       ((<) i (offset_max voidP_s_5_60_alloc_table s_5_0))) ->
       ((=) (typeof voidP_s_5_60_tag_table (shift s_5_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3249 12 94#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_5_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_61_alloc_table charP_charM_reject_61))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Safe_uint64.any_  () ) in
     (let __retres_9 = ref (Safe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (let _jessie_867 =
        (#"whole_program.jc" 3433 27 40# "expl:Integer cast"
        (Safe_uint64.of_int (0))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcspn.c" 7 8 13#
        "expl:Pointer index bounds" true) }); _jessie_867 end));
        begin
        (p_1_0 :=
         (let _jessie_861 = s_5_0 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcspn.c" 19 6 11#
         "expl:Pointer index bounds" true) }); _jessie_861 end));
         'Loop_59:
         loop
         invariant { (#"whole_program.jc" 3436 6 6105# true) }
           variant { (#"/home/work/workspace/self/verker/strcspn.c" 17 18 37#
             (Int.(-) (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))
             (sub_pointer !p_1_0 s_5_0))) }
          begin
          any unit
          requires { true } reads { reject_0, s_5_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_5_0 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_32 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_5_0 c_32) /\
                (((<=) (sub_pointer s_5_0 c_32) (0)) /\
                ((same_block c_32 !p_1_0) /\
                (((<) (sub_pointer c_32 !p_1_0) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_60 c_32)
                (select charP_charM_reject_61 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5_0)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 3450 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5_0 charP_charM_s_5_60))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_5_0 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5_0 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
            (0))))))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
              "expl:Pointer dereference"
              (acc  voidP_s_5_60_alloc_table charP_charM_s_5_60 !p_1_0 )) ))
             (#"whole_program.jc" 3480 28 40# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_13_exc ())));
             try
              begin
              (r :=
               (let _jessie_862 = reject_0 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcspn.c" 26 7 17#
               "expl:Pointer index bounds" true) }); _jessie_862 end));
               'Loop_60:
               loop
               invariant { (#"whole_program.jc" 3485 15 2974# true) }
                 variant {
                   (#"/home/work/workspace/self/verker/strcspn.c" 24 19 48#
                   (Int.(-)
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_61))
                   (sub_pointer !r reject_0))) }
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61) ->
                    (in_array !r (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_61_alloc_table
                   charP_charM_reject_61))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_33 : (pointer voidP).
                    (((same_block reject_0 c_33) /\
                     (((<=) (sub_pointer reject_0 c_33) (0)) /\
                     ((same_block c_33 !r) /\
                     ((<) (sub_pointer c_33 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_61 c_33)
                     (select charP_charM_s_5_60 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Safe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                    "expl:Pointer dereference"
                    (acc  voidP_reject_61_alloc_table charP_charM_reject_61
                     !r )) ))
                   (#"whole_program.jc" 3517 37 49# "expl:Integer cast"
                   (Safe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_0_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Safe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                     "expl:Pointer dereference"
                     (acc  voidP_s_5_60_alloc_table charP_charM_s_5_60 !p_1_0
                      )) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                     "expl:Pointer dereference"
                     (acc  voidP_reject_61_alloc_table charP_charM_reject_61
                      !r )) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                      charP_charM_reject_61)) } ; () end;
                     begin
                     (__retres_9 :=
                      (let _jessie_863 = !count_5 in
                      begin
                      (assert {
                      (#"/home/work/workspace/self/verker/strcspn.c" 29 4 17#
                      "expl:Pointer index bounds" true) }); _jessie_863 end));
                      (raise (Goto_return_label_5_exc ())) end end else ());
                   (r :=
                    (let _jessie_864 =
                    (shift_typesafe  !r
                     (Safe_int32.to_int 
                      (#"whole_program.jc" 3536 51 63# "expl:Integer cast"
                      (Safe_int32.of_int (1))) ) ) in
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker/strcspn.c" 26 31 34#
                    "expl:Pointer index bounds" true) }); _jessie_864 end))
                  end; (raise (Loop_continue_exc ())) end with
                  Loop_continue_exc _jessie_65 -> () end end end;
               (raise (Goto_while_1_break_0_exc ())) end with
              Goto_while_1_break_0_exc _jessie_61 ->
              'While_1_break_0:
              'While_1_break_0:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                 charP_charM_reject_61))) } ; () end;
               (count_5 :=
                (let _jessie_865 =
                (Safe_uint64.(+)  !count_5
                 (#"whole_program.jc" 3547 59 72# "expl:Integer cast"
                 (Safe_uint64.of_int (1))) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/strcspn.c" 32 2 9#
                "expl:Pointer index bounds" true) }); _jessie_865 end)) end
              end;
             (p_1_0 :=
              (let _jessie_866 =
              (shift_typesafe  !p_1_0
               (Safe_int32.to_int 
                (#"whole_program.jc" 3549 46 58# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcspn.c" 19 25 28#
              "expl:Pointer index bounds" true) }); _jessie_866 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_67 -> () end end end;
         (raise (Goto_while_0_break_13_exc ())) end end with
       Goto_while_0_break_13_exc _jessie_62 ->
       'While_0_break_13:
       'While_0_break_13:
       begin
       ();
        (__retres_9 :=
         (let _jessie_868 = !count_5 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcspn.c" 34 1 14#
         "expl:Pointer index bounds" true) }); _jessie_868 end)) end end;
       (raise (Goto_return_label_5_exc ())) end with Goto_return_label_5_exc
      _jessie_63 ->
      'Return_label_5:
      'Return_label_5:
      begin
      (return :=
       (let _jessie_869 = !__retres_9 in
       begin
       (assert {
       (#"whole_program.jc" 3555 7 24# "expl:Pointer index bounds" true) });
        _jessie_869 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Function_strcspn_0_behaviors
#"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
"expl:strcspn, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_ensures_default
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, default behavior" =
  fun
   (s_5_0 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_60_alloc_table : (alloc_table voidP))
   (voidP_reject_61_alloc_table : (alloc_table voidP))
   (voidP_reject_61_tag_table : (tag_table voidP)) (voidP_s_5_60_tag_table :
   (tag_table voidP)) (charP_charM_s_5_60 : (memory voidP Int8.t))
   (charP_charM_reject_61 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_61_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_61_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_61_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_61_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_61_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_60_alloc_table s_5_0) ->
     (((=) (typeof voidP_s_5_60_tag_table s_5_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_60_alloc_table s_5_0) i) /\
       ((<) i (offset_max voidP_s_5_60_alloc_table s_5_0))) ->
       ((=) (typeof voidP_s_5_60_tag_table (shift s_5_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3249 12 94#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_5_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_61_alloc_table charP_charM_reject_61))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
      "expl:Ensures clause"
      ((=) (Uint64.to_int result) (strcspn s_5_0 reject_0)))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
      "expl:Ensures clause"
      (Uint64.(<=) (#"whole_program.jc" 3255 35 48# "expl:Integer cast"
      (Uint64.of_int (0))) result))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
      "expl:Ensures clause"
      (Uint64.(<=) result (strlen s_5_0 charP_charM_s_5_60)))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
     "expl:Ensures clause"
     (forall p_11 : (pointer voidP).
      (forall t_2 : (pointer voidP).
       (((same_block s_5_0 p_11) /\
        (((<=) (sub_pointer s_5_0 p_11) (0)) /\
        ((same_block p_11 (shift s_5_0 (Uint64.to_int result))) /\
        (((<) (sub_pointer p_11 (shift s_5_0 (Uint64.to_int result))) (0)) /\
        ((same_block reject_0 t_2) /\
        (((<=) (sub_pointer reject_0 t_2) (0)) /\
        ((same_block t_2
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
        /\
        ((<)
        (sub_pointer t_2
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
        ->
        (Int8.(<>) (select charP_charM_s_5_60 p_11)
        (select charP_charM_reject_61 t_2)))))))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 3323 10 3435# "expl:Behavior disjointness check"
    (not
    ((exists p_10_0 : (pointer voidP).
      (exists t_0_0 : (pointer voidP).
       ((same_block s_5_0 p_10_0) /\
       (((<=) (sub_pointer s_5_0 p_10_0) (0)) /\
       ((same_block p_10_0
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
       /\
       (((<)
        (sub_pointer p_10_0
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
       /\
       ((same_block reject_0 t_0_0) /\
       (((<=) (sub_pointer reject_0 t_0_0) (0)) /\
       ((same_block t_0_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
       /\
       (((<)
        (sub_pointer t_0_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_5_60 p_10_0)
       (select charP_charM_reject_61 t_0_0))))))))))))
    /\
    (forall p_9_0 : (pointer voidP).
     (forall t_3 : (pointer voidP).
      (((same_block s_5_0 p_9_0) /\
       (((<=) (sub_pointer s_5_0 p_9_0) (0)) /\
       ((same_block p_9_0
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
       /\
       (((<)
        (sub_pointer p_9_0
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
       /\
       ((same_block reject_0 t_3) /\
       (((<=) (sub_pointer reject_0 t_3) (0)) /\
       ((same_block t_3
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
       /\
       ((<)
       (sub_pointer t_3
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_5_60 p_9_0)
       (select charP_charM_reject_61 t_3)))))))) });
     (check {
     (#"whole_program.jc" 3374 10 3284# "expl:Behavior completeness check"
     ((forall p_9_1 : (pointer voidP).
       (forall t_4 : (pointer voidP).
        (((same_block s_5_0 p_9_1) /\
         (((<=) (sub_pointer s_5_0 p_9_1) (0)) /\
         ((same_block p_9_1
          (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
         /\
         (((<)
          (sub_pointer p_9_1
          (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
          (0))
         /\
         ((same_block reject_0 t_4) /\
         (((<=) (sub_pointer reject_0 t_4) (0)) /\
         ((same_block t_4
          (shift reject_0
          (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
         /\
         ((<)
         (sub_pointer t_4
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
         ->
         (Int8.(<>) (select charP_charM_s_5_60 p_9_1)
         (select charP_charM_reject_61 t_4)))))
     \/
     (exists p_10_1 : (pointer voidP).
      (exists t_0_1 : (pointer voidP).
       ((same_block s_5_0 p_10_1) /\
       (((<=) (sub_pointer s_5_0 p_10_1) (0)) /\
       ((same_block p_10_1
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
       /\
       (((<)
        (sub_pointer p_10_1
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
       /\
       ((same_block reject_0 t_0_1) /\
       (((<=) (sub_pointer reject_0 t_0_1) (0)) /\
       ((same_block t_0_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
       /\
       (((<)
        (sub_pointer t_0_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_5_60 p_10_1)
       (select charP_charM_reject_61 t_0_1)))))))))))))) });
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_9 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"whole_program.jc" 3433 27 40# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_1_0 := s_5_0);
         'Loop_53:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
               (same_block s_5_0 !p_1_0))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
               ((<=) (sub_pointer s_5_0 !p_1_0) (0)))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
               (same_block !p_1_0
               (shift s_5_0
               (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
              ((<=)
              (sub_pointer !p_1_0
              (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
              (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
              (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
               (Uint64.(<=) (#"whole_program.jc" 3450 40 53#
               "expl:Integer cast" (Uint64.of_int (0))) !count_5))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
              (Uint64.(<=) !count_5 (strlen s_5_0 charP_charM_s_5_60))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
              ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5_0)))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
              (forall c_32 : (pointer voidP).
               (forall t_5 : (pointer voidP).
                (((same_block s_5_0 c_32) /\
                 (((<=) (sub_pointer s_5_0 c_32) (0)) /\
                 ((same_block c_32 !p_1_0) /\
                 (((<) (sub_pointer c_32 !p_1_0) (0)) /\
                 ((same_block reject_0 t_5) /\
                 (((<=) (sub_pointer reject_0 t_5) (0)) /\
                 ((same_block t_5
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 /\
                 ((<)
                 (sub_pointer t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_60 c_32)
                 (select charP_charM_reject_61 t_5))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
              (valid_str !p_1_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
             &&
             (#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_5_0 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_60 !p_1_0 ) ))
             (#"whole_program.jc" 3480 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_13_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_54:
               loop
               invariant
                 { ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                     (same_block reject_0 !r))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                     ((<=) (sub_pointer reject_0 !r) (0)))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                     (same_block !r
                     (shift reject_0
                     (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                    ((<=)
                    (sub_pointer !r
                    (shift reject_0
                    (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                    (0))))))))))
                   &&
                   ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                    (forall c_33 : (pointer voidP).
                     (((same_block reject_0 c_33) /\
                      (((<=) (sub_pointer reject_0 c_33) (0)) /\
                      ((same_block c_33 !r) /\
                      ((<) (sub_pointer c_33 !r) (0))))) ->
                      (Int8.(<>) (select charP_charM_reject_61 c_33)
                      (select charP_charM_s_5_60 !p_1_0)))))
                   &&
                   ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                    (valid_str !r voidP_reject_61_alloc_table
                    charP_charM_reject_61))
                   &&
                   (#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61) ->
                    (in_array !r (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61)))))) } 
                begin
                any unit requires { true } ensures { true } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_61 !r ) ))
                   (#"whole_program.jc" 3517 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_0_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_60 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_61 !r ) )) ))
                   then
                    begin
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                    "expl:Assertion in line 28"
                    (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61)) }); () end;
                     begin
                     (__retres_9 := !count_5);
                      (raise (Goto_return_label_5_exc ())) end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 3536 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_65 -> () end end end;
               (raise (Goto_while_1_break_0_exc ())) end with
              Goto_while_1_break_0_exc _jessie_61 ->
              'While_1_break_0:
              'While_1_break_0:
              begin
              ();
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
               "expl:Assertion in line 31"
               (not
               (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
               charP_charM_reject_61))) }); () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 3547 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 3549 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_67 -> () end end end;
         (raise (Goto_while_0_break_13_exc ())) end end with
       Goto_while_0_break_13_exc _jessie_62 ->
       'While_0_break_13:
       'While_0_break_13: begin (); (__retres_9 := !count_5) end end;
       (raise (Goto_return_label_5_exc ())) end with Goto_return_label_5_exc
      _jessie_63 ->
      'Return_label_5:
      'Return_label_5: begin (return := !__retres_9); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_exists
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior exists" =
  fun
   (s_5_0 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_60_alloc_table : (alloc_table voidP))
   (voidP_reject_61_alloc_table : (alloc_table voidP))
   (voidP_reject_61_tag_table : (tag_table voidP)) (voidP_s_5_60_tag_table :
   (tag_table voidP)) (charP_charM_s_5_60 : (memory voidP Int8.t))
   (charP_charM_reject_61 : (memory voidP Int8.t)) 
   requires {
   ((exists p_10 : (pointer voidP).
     (exists t_0 : (pointer voidP).
      ((same_block s_5_0 p_10) /\
      (((<=) (sub_pointer s_5_0 p_10) (0)) /\
      ((same_block p_10
       (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
      /\
      (((<)
       (sub_pointer p_10
       (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
      /\
      ((same_block reject_0 t_0) /\
      (((<=) (sub_pointer reject_0 t_0) (0)) /\
      ((same_block t_0
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
      /\
      (((<)
       (sub_pointer t_0
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0))
      /\
      (Int8.(=) (select charP_charM_s_5_60 p_10)
      (select charP_charM_reject_61 t_0))))))))))))
   /\
   (((allocated voidP_reject_61_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_61_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_61_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_61_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_61_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_60_alloc_table s_5_0) ->
     (((=) (typeof voidP_s_5_60_tag_table s_5_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_60_alloc_table s_5_0) i) /\
       ((<) i (offset_max voidP_s_5_60_alloc_table s_5_0))) ->
       ((=) (typeof voidP_s_5_60_tag_table (shift s_5_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3249 12 94#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_5_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_61_alloc_table charP_charM_reject_61)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
     "expl:Ensures clause"
     (exists t_1 : (pointer voidP).
      ((same_block reject_0 t_1) /\
      (((<=) (sub_pointer reject_0 t_1) (0)) /\
      ((same_block t_1
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
      /\
      (((<)
       (sub_pointer t_1
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0))
      /\
      (Int8.(=)
      (select charP_charM_s_5_60 (shift s_5_0 (Uint64.to_int result)))
      (select charP_charM_reject_61 t_1))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_9 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"whole_program.jc" 3433 27 40# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_1_0 := s_5_0);
         'Loop_55:
         loop
         invariant { (#"whole_program.jc" 3436 6 6105# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_5_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_5_0 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_32 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_5_0 c_32) /\
                (((<=) (sub_pointer s_5_0 c_32) (0)) /\
                ((same_block c_32 !p_1_0) /\
                (((<) (sub_pointer c_32 !p_1_0) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_60 c_32)
                (select charP_charM_reject_61 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5_0)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 3450 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5_0 charP_charM_s_5_60))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_5_0 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5_0 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
            (0))))))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_60 !p_1_0 ) ))
             (#"whole_program.jc" 3480 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_13_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_56:
               loop
               invariant { (#"whole_program.jc" 3485 15 2974# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61) ->
                    (in_array !r (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_61_alloc_table
                   charP_charM_reject_61))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_33 : (pointer voidP).
                    (((same_block reject_0 c_33) /\
                     (((<=) (sub_pointer reject_0 c_33) (0)) /\
                     ((same_block c_33 !r) /\
                     ((<) (sub_pointer c_33 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_61 c_33)
                     (select charP_charM_s_5_60 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_61 !r ) ))
                   (#"whole_program.jc" 3517 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_0_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_60 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_61 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                      charP_charM_reject_61)) } ; () end;
                     begin
                     (__retres_9 := !count_5);
                      (raise (Goto_return_label_5_exc ())) end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 3536 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_65 -> () end end end;
               (raise (Goto_while_1_break_0_exc ())) end with
              Goto_while_1_break_0_exc _jessie_61 ->
              'While_1_break_0:
              'While_1_break_0:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                 charP_charM_reject_61))) } ; () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 3547 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 3549 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_67 -> () end end end;
         (raise (Goto_while_0_break_13_exc ())) end end with
       Goto_while_0_break_13_exc _jessie_62 ->
       'While_0_break_13:
       'While_0_break_13: begin (); (__retres_9 := !count_5) end end;
       (raise (Goto_return_label_5_exc ())) end with Goto_return_label_5_exc
      _jessie_63 ->
      'Return_label_5:
      'Return_label_5: begin (return := !__retres_9); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_not_exists
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior not_exists" =
  fun
   (s_5_0 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_5_60_alloc_table : (alloc_table voidP))
   (voidP_reject_61_alloc_table : (alloc_table voidP))
   (voidP_reject_61_tag_table : (tag_table voidP)) (voidP_s_5_60_tag_table :
   (tag_table voidP)) (charP_charM_s_5_60 : (memory voidP Int8.t))
   (charP_charM_reject_61 : (memory voidP Int8.t)) 
   requires {
   ((forall p_9 : (pointer voidP).
     (forall t : (pointer voidP).
      (((same_block s_5_0 p_9) /\
       (((<=) (sub_pointer s_5_0 p_9) (0)) /\
       ((same_block p_9
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
       /\
       (((<)
        (sub_pointer p_9
        (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
       /\
       ((same_block reject_0 t) /\
       (((<=) (sub_pointer reject_0 t) (0)) /\
       ((same_block t
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
       /\
       ((<)
       (sub_pointer t
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_5_60 p_9)
       (select charP_charM_reject_61 t)))))
   /\
   (((allocated voidP_reject_61_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_61_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_61_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_61_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_61_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_5_60_alloc_table s_5_0) ->
     (((=) (typeof voidP_s_5_60_tag_table s_5_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_5_60_alloc_table s_5_0) i) /\
       ((<) i (offset_max voidP_s_5_60_alloc_table s_5_0))) ->
       ((=) (typeof voidP_s_5_60_tag_table (shift s_5_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3249 12 94#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_5_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_61_alloc_table charP_charM_reject_61)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
     "expl:Ensures clause"
     (Uint64.(=) result (strlen s_5_0 charP_charM_s_5_60)))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_1_0 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count_5 = ref (Unsafe_uint64.any_  () ) in
     (let __retres_9 = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count_5 :=
        (#"whole_program.jc" 3433 27 40# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_1_0 := s_5_0);
         'Loop_57:
         loop
         invariant { (#"whole_program.jc" 3436 6 6105# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_5_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_5_0 reject_0)
             (Int.(+) (strcspn !p_1_0 reject_0) (Uint64.to_int !count_5))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_1_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_32 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_5_0 c_32) /\
                (((<=) (sub_pointer s_5_0 c_32) (0)) /\
                ((same_block c_32 !p_1_0) /\
                (((<) (sub_pointer c_32 !p_1_0) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_5_60 c_32)
                (select charP_charM_reject_61 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_5) (sub_pointer !p_1_0 s_5_0)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 3450 40 53#
              "expl:Integer cast" (Uint64.of_int (0))) !count_5))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count_5 (strlen s_5_0 charP_charM_s_5_60))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_5_0 !p_1_0))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_5_0 !p_1_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_1_0
             (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_1_0
            (shift s_5_0 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
            (0))))))))))))))) } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_5_60 !p_1_0 ) ))
             (#"whole_program.jc" 3480 28 40# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_13_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_58:
               loop
               invariant { (#"whole_program.jc" 3485 15 2974# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61) ->
                    (in_array !r (select charP_charM_s_5_60 !p_1_0)
                    charP_charM_reject_61)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_61_alloc_table
                   charP_charM_reject_61))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_33 : (pointer voidP).
                    (((same_block reject_0 c_33) /\
                     (((<=) (sub_pointer reject_0 c_33) (0)) /\
                     ((same_block c_33 !r) /\
                     ((<) (sub_pointer c_33 !r) (0))))) ->
                     (Int8.(<>) (select charP_charM_reject_61 c_33)
                     (select charP_charM_s_5_60 !p_1_0)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_61 !r ) ))
                   (#"whole_program.jc" 3517 37 49# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_0_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_5_60 !p_1_0 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_61 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                      charP_charM_reject_61)) } ; () end;
                     begin
                     (__retres_9 := !count_5);
                      (raise (Goto_return_label_5_exc ())) end end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"whole_program.jc" 3536 51 63# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_65 -> () end end end;
               (raise (Goto_while_1_break_0_exc ())) end with
              Goto_while_1_break_0_exc _jessie_61 ->
              'While_1_break_0:
              'While_1_break_0:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_5_60 !p_1_0)
                 charP_charM_reject_61))) } ; () end;
               (count_5 :=
                (Unsafe_uint64.(+)  !count_5
                 (#"whole_program.jc" 3547 59 72# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_1_0 :=
              (shift_  !p_1_0
               (Unsafe_int32.to_int 
                (#"whole_program.jc" 3549 46 58# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_67 -> () end end end;
         (raise (Goto_while_0_break_13_exc ())) end end with
       Goto_while_0_break_13_exc _jessie_62 ->
       'While_0_break_13:
       'While_0_break_13: begin (); (__retres_9 := !count_5) end end;
       (raise (Goto_return_label_5_exc ())) end with Goto_return_label_5_exc
      _jessie_63 ->
      'Return_label_5:
      'Return_label_5: begin (return := !__retres_9); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

theory Axiomatic_memcpy_char

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use int.ComputerDivision 
  
  use why3.Bool.Bool 
  
  predicate memcmp_char (p1_1 : (pointer voidP)) (p2_1 : (pointer voidP))
  (n_3 : Uint64.t) (voidP_p2_1_66_alloc_table_at_L2 : (alloc_table voidP))
  (voidP_p1_1_65_alloc_table_at_L1 : (alloc_table voidP))
  (charP_charM_p2_1_66_at_L2 : (memory voidP Int8.t))
  (charP_charM_p1_1_65_at_L1 : (memory voidP Int8.t))
  =
     (((=) (ComputerDivision.mod (Uint64.to_int n_3) (1)) (0)) /\
     (let _n_7 = (ComputerDivision.div (Uint64.to_int n_3) (1)) in
      ((if ((<=) (0) (Int.(-) _n_7 (1))) then
        (((<=) (offset_min voidP_p1_1_65_alloc_table_at_L1 p1_1) (0)) /\
        (((>=) (offset_max voidP_p1_1_65_alloc_table_at_L1 p1_1)
         (Int.(-) _n_7 (1)))
        /\
        (forall __framac_tmp32 : int.
         ((((<=) (0) __framac_tmp32) /\
          ((<=) __framac_tmp32 (Int.(-) _n_7 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((if ((<=) (0) (Int.(-) _n_7 (1))) then
        (((<=) (offset_min voidP_p2_1_66_alloc_table_at_L2 p2_1) (0)) /\
        (((>=) (offset_max voidP_p2_1_66_alloc_table_at_L2 p2_1)
         (Int.(-) _n_7 (1)))
        /\
        (forall __framac_tmp31 : int.
         ((((<=) (0) __framac_tmp31) /\
          ((<=) __framac_tmp31 (Int.(-) _n_7 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      (forall k_1 : int.
       ((((<=) (0) k_1) /\ ((<) k_1 _n_7)) ->
        (Int8.(=) (select charP_charM_p1_1_65_at_L1 (shift p1_1 k_1))
        (select charP_charM_p2_1_66_at_L2 (shift p2_1 k_1)))))))))
  
  
  predicate separated_char (p1_2 : (pointer voidP)) (p2_2 : (pointer voidP))
  (n_4 : Uint64.t) (voidP_p2_2_68_alloc_table_at_L2 : (alloc_table voidP))
  (voidP_p1_2_67_alloc_table_at_L1 : (alloc_table voidP))
  =
     (((=) (ComputerDivision.mod (Uint64.to_int n_4) (1)) (0)) /\
     (let _n_8 = (ComputerDivision.div (Uint64.to_int n_4) (1)) in
      ((if ((<=) (0) (Int.(-) _n_8 (1))) then
        (((<=) (offset_min voidP_p1_2_67_alloc_table_at_L1 p1_2) (0)) /\
        (((>=) (offset_max voidP_p1_2_67_alloc_table_at_L1 p1_2)
         (Int.(-) _n_8 (1)))
        /\
        (forall __framac_tmp34 : int.
         ((((<=) (0) __framac_tmp34) /\
          ((<=) __framac_tmp34 (Int.(-) _n_8 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((if ((<=) (0) (Int.(-) _n_8 (1))) then
        (((<=) (offset_min voidP_p2_2_68_alloc_table_at_L2 p2_2) (0)) /\
        (((>=) (offset_max voidP_p2_2_68_alloc_table_at_L2 p2_2)
         (Int.(-) _n_8 (1)))
        /\
        (forall __framac_tmp33 : int.
         ((((<=) (0) __framac_tmp33) /\
          ((<=) __framac_tmp33 (Int.(-) _n_8 (1)))) -> ((=) true true)))))
        else ((=) true true))
      /\
      ((not (same_block p1_2 p2_2)) \/ (((=) true true) /\ ((=) true true)))))))
  
  
end

module Function_memcpy_char_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use int.ComputerDivision 
  
  use import Axiomatic_memcpy_char 
  
  use why3.Bool.Bool 
  
  val memcpy_char_0
  (dest_2 : (pointer voidP)) 
   (src_2 : (pointer voidP)) 
    (n_2 : Uint64.t) 
     (charP_charM_dest_2_62 : ref (memory voidP Int8.t)) 
      (voidP_src_2_63_alloc_table : (alloc_table voidP)) 
       (voidP_dest_2_62_alloc_table : (alloc_table voidP)) 
        (charP_charM_src_2_63 : (memory voidP Int8.t)) : (pointer voidP)
         requires {
           ("expl:External"
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 19#
            "expl:Requires clause"
            (Uint64.(>=) n_2 (#"whole_program.jc" 3560 41 54#
            "expl:Integer cast" (Uint64.of_int (0)))))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
           "expl:Requires clause"
           ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 56 13 38#
            "expl:Requires clause"
            ((=) (ComputerDivision.mod (Uint64.to_int n_2) (1)) (0)))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 57 13 223#
           "expl:Requires clause"
           (let _n_6 = (ComputerDivision.div (Uint64.to_int n_2) (1)) in
            (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) _n_6 (1))) then
              (((<=) (offset_min voidP_dest_2_62_alloc_table dest_2) (0)) /\
              (((>=) (offset_max voidP_dest_2_62_alloc_table dest_2)
               (Int.(-) _n_6 (1)))
              /\
              (forall __framac_tmp30 : int.
               ((((<=) (0) __framac_tmp30) /\
                ((<=) __framac_tmp30 (Int.(-) _n_6 (1)))) -> ((=) true true)))))
              else ((=) true true)))
            /\
            (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) _n_6 (1))) then
              (((<=) (offset_min voidP_src_2_63_alloc_table src_2) (0)) /\
              (((>=) (offset_max voidP_src_2_63_alloc_table src_2)
               (Int.(-) _n_6 (1)))
              /\
              (forall __framac_tmp29 : int.
               ((((<=) (0) __framac_tmp29) /\
                ((<=) __framac_tmp29 (Int.(-) _n_6 (1)))) -> ((=) true true)))))
              else ((=) true true)))
            /\
            (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 55 13 288#
            "expl:Requires clause"
            (separated_char dest_2 src_2 n_2 voidP_src_2_63_alloc_table
            voidP_dest_2_62_alloc_table)))))))))))))) }
         reads { charP_charM_dest_2_62 } writes { charP_charM_dest_2_62 }
         ensures {
           ((#"whole_program.jc" 3591 10 75# "expl:Assigns clause"
            (not_assigns voidP_dest_2_62_alloc_table
            voidP_dest_2_62_alloc_table (old !charP_charM_dest_2_62)
            !charP_charM_dest_2_62
            (pset_range (pset_singleton dest_2) (0)
            (Int.(-) (ComputerDivision.div (Uint64.to_int n_2) (1)) (1)))))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 70#
            "expl:Ensures clause"
            (memcmp_char dest_2 src_2 n_2 voidP_src_2_63_alloc_table
            voidP_dest_2_62_alloc_table charP_charM_src_2_63
            !charP_charM_dest_2_62))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 74 89#
           "expl:Ensures clause" ((=) result dest_2)))))) }
  
end

module Function_strlcpy_safety
#"/home/work/workspace/self/verker/strlcpy.c" 3 7 56# "expl:strlcpy, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int8 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_offset_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0_safe 
  
  use Function_memcpy_char_0_safe 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlcpy #"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, safety" =
  fun
   (dest_8 : (pointer voidP)) (src_7 : (pointer voidP)) (size_2 : Uint64.t)
   (charP_charM_dest_8_69 : ref (memory voidP Int8.t))
   (voidP_dest_8_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_8_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_69_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_69_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_69_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_69_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
     (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
     (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
      (Int.(-) (Uint64.to_int size_2) (1)))
     /\
     (forall __framac_tmp35 : int.
      ((((<=) (0) __framac_tmp35) /\
       ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
   (not (same_block dest_8 src_7))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Safe_uint64.any_  () ) in
     (let len = ref (Safe_uint64.any_  () ) in
     (let tmp_0_16 = ref (Safe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_930 =
      (let _jessie_931 = src_7 in
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0_safe.strlen_0  _jessie_931
       voidP_src_7_70_alloc_table voidP_src_7_70_tag_table
       charP_charM_src_7_70 ))) in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Pointer index bounds" true) }); _jessie_930 end));
      (if
      (#"/home/work/workspace/self/verker/strlcpy.c" 7 5 9#
      (Safe_uint64.(<>)  size_2
       (#"whole_program.jc" 3734 44 57# "expl:Integer cast"
       (Safe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker/strlcpy.c" 8 16 27#
       (Safe_uint64.(>=)  !ret size_2 ))
       then
        (tmp_0_16 :=
         (let _jessie_933 =
         (Safe_uint64.(-)  size_2
          (#"whole_program.jc" 3738 60 73# "expl:Integer cast"
          (Safe_uint64.of_int (1))) ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strlcpy.c" 8 15 45#
         "expl:Pointer index bounds" true) }); _jessie_933 end))
       else
        (tmp_0_16 :=
         (let _jessie_932 = !ret in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strlcpy.c" 8 15 45#
         "expl:Pointer index bounds" true) }); _jessie_932 end)));
        begin
        (len :=
         (let _jessie_934 = !tmp_0_16 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strlcpy.c" 8 9 12#
         "expl:Pointer index bounds" true) }); _jessie_934 end));
         begin
         (let _jessie_938 =
         (let _jessie_937 = dest_8 in
         (let _jessie_936 = src_7 in
         (let _jessie_935 = !len in
         (#"/home/work/workspace/self/verker/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0_safe.memcpy_char_0  _jessie_937 _jessie_936
          _jessie_935 charP_charM_dest_8_69 voidP_src_7_70_alloc_table
          voidP_dest_8_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_8_69, dest_8, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker/strlcpy.c" 10 13 67#
            (forall i_37 : int.
             ((((<=) (0) i_37) /\ ((<) i_37 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_37))
              (select !charP_charM_dest_8_69 (shift dest_8 i_37)))))) } ; ()
          end;
          begin
          (let _jessie_940 =
          (let _jessie_939 =
          (#"whole_program.jc" 3752 68 79# "expl:Integer cast"
          (Safe_int8.of_int (0))) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/strlcpy.c" 11 2 18#
          "expl:Pointer index bounds" true) }); _jessie_939 end) in
          (let _jessie_941 = dest_8 in
          (let _jessie_942 = (Safe_uint64.to_int  !len ) in
          (let _jessie_943 = (shift_typesafe  _jessie_941 _jessie_942 ) in
          (#"/home/work/workspace/self/verker/strlcpy.c" 11 2 18#
          "expl:Pointer dereference"
          (upd_offset_typesafe  voidP_dest_8_69_alloc_table
           charP_charM_dest_8_69 _jessie_941 _jessie_942 _jessie_940 ))))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 12 13 28#
             (valid_str dest_8 voidP_dest_8_69_alloc_table
             !charP_charM_dest_8_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_8 !charP_charM_dest_8_69) !len)) } ; ()
           end end end end end else ());
      begin
      (return :=
       (let _jessie_944 = !ret in
       begin
       (assert {
       (#"whole_program.jc" 3767 7 17# "expl:Pointer index bounds" true) });
        _jessie_944 end)); (raise Return) end end))); absurd  end with Return
    -> !return end)
  
end

module Function_memcpy_char_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use int.Int 
  
  use int.ComputerDivision 
  
  use import Axiomatic_memcpy_char 
  
  use why3.Bool.Bool 
  
  val memcpy_char_0
  (dest_2 : (pointer voidP)) 
   (src_2 : (pointer voidP)) 
    (n_2 : Uint64.t) 
     (charP_charM_dest_2_62 : ref (memory voidP Int8.t)) 
      (voidP_src_2_63_alloc_table : (alloc_table voidP)) 
       (voidP_dest_2_62_alloc_table : (alloc_table voidP)) 
        (charP_charM_src_2_63 : (memory voidP Int8.t)) : (pointer voidP)
         requires { true } reads { charP_charM_dest_2_62 } writes {
         charP_charM_dest_2_62 }
         ensures {
           ((#"whole_program.jc" 3591 10 75# "expl:Assigns clause"
            (not_assigns voidP_dest_2_62_alloc_table
            voidP_dest_2_62_alloc_table (old !charP_charM_dest_2_62)
            !charP_charM_dest_2_62
            (pset_range (pset_singleton dest_2) (0)
            (Int.(-) (ComputerDivision.div (Uint64.to_int n_2) (1)) (1)))))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 89#
           "expl:Ensures clause"
           ((#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 12 70#
            "expl:Ensures clause"
            (memcmp_char dest_2 src_2 n_2 voidP_src_2_63_alloc_table
            voidP_dest_2_62_alloc_table charP_charM_src_2_63
            !charP_charM_dest_2_62))
           /\
           (#"/home/work/.opam/astraver/share/frama-c/jessie/jessie_spec_prolog.h" 63 74 89#
           "expl:Ensures clause" ((=) result dest_2)))))) }
  
end

module Function_strlcpy_behaviors
#"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
"expl:strlcpy, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int8 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strlen_0 
  
  use Function_memcpy_char_0 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlcpy_ensures_default
  #"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, default behavior" =
  fun
   (dest_8 : (pointer voidP)) (src_7 : (pointer voidP)) (size_2 : Uint64.t)
   (charP_charM_dest_8_69 : ref (memory voidP Int8.t))
   (voidP_dest_8_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_8_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_69_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_69_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_69_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_69_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
     (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
     (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
      (Int.(-) (Uint64.to_int size_2) (1)))
     /\
     (forall __framac_tmp35 : int.
      ((((<=) (0) __framac_tmp35) /\
       ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
   (not (same_block dest_8 src_7))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 3711 10 135# "expl:Behavior disjointness check"
    (not
    ((Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)) /\
    (Uint64.(=) size_2 (#"whole_program.jc" 3712 48 61# "expl:Integer cast"
    (Uint64.of_int (0))))))) });
     (check {
     (#"whole_program.jc" 3714 10 209# "expl:Behavior disjointness check"
     (not
     ((Uint64.(<) (#"whole_program.jc" 3714 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_2)
     /\
     ((Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70)) /\
     (Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)))))) });
     (check {
     (#"whole_program.jc" 3718 10 204# "expl:Behavior disjointness check"
     (not
     ((Uint64.(<) (#"whole_program.jc" 3718 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_2)
     /\
     ((Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70)) /\
     (Uint64.(=) size_2 (#"whole_program.jc" 3720 48 61# "expl:Integer cast"
     (Uint64.of_int (0)))))))) });
     (check {
     (#"whole_program.jc" 3722 10 269# "expl:Behavior completeness check"
     ((Uint64.(=) size_2 (#"whole_program.jc" 3722 44 57# "expl:Integer cast"
      (Uint64.of_int (0))))
     \/
     ((Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)) \/
     ((Uint64.(<) (#"whole_program.jc" 3724 38 51# "expl:Integer cast"
      (Uint64.of_int (0))) size_2)
     /\ (Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70)))))) });
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_16 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_871 = src_7 in
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_871 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_2
       (#"whole_program.jc" 3734 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_2 ))
       then
        (tmp_0_16 :=
         (Unsafe_uint64.(-)  size_2
          (#"whole_program.jc" 3738 60 73# "expl:Integer cast"
          (Unsafe_uint64.of_int (1))) )) else (tmp_0_16 := !ret));
        begin
        (len := !tmp_0_16);
         begin
         (let _jessie_878 =
         (let _jessie_877 = dest_8 in
         (let _jessie_876 = src_7 in
         (let _jessie_875 = !len in
         (#"/home/work/workspace/self/verker/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_877 _jessie_876
          _jessie_875 charP_charM_dest_8_69 voidP_src_7_70_alloc_table
          voidP_dest_8_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          (assert {
          (#"/home/work/workspace/self/verker/strlcpy.c" 10 13 67#
          "expl:Assertion in line 10"
          (forall i_37 : int.
           ((((<=) (0) i_37) /\ ((<) i_37 (Uint64.to_int !len))) ->
            (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_37))
            (select !charP_charM_dest_8_69 (shift dest_8 i_37)))))) }); ()
          end;
          begin
          (let _jessie_880 =
          (#"whole_program.jc" 3752 68 79# "expl:Integer cast"
          (Unsafe_int8.of_int (0))) in
          (let _jessie_881 = dest_8 in
          (let _jessie_882 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_883 = (shift_  _jessie_881 _jessie_882 ) in
          (upd  charP_charM_dest_8_69 _jessie_883 _jessie_880 )))));
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strlcpy.c" 12 13 28#
           "expl:Assertion in line 12"
           (valid_str dest_8 voidP_dest_8_69_alloc_table
           !charP_charM_dest_8_69)) }); () end;
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strlcpy.c" 13 13 32#
           "expl:Assertion in line 13"
           (Uint64.(=) (strlen dest_8 !charP_charM_dest_8_69) !len)) }); ()
           end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_size_is_greater_src
  #"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior size_is_greater_src" =
  fun
   (dest_8 : (pointer voidP)) (src_7 : (pointer voidP)) (size_2 : Uint64.t)
   (charP_charM_dest_8_69 : ref (memory voidP Int8.t))
   (voidP_dest_8_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_8_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   ((Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)) /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_69_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_69_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_69_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_69_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
     (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
     (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
      (Int.(-) (Uint64.to_int size_2) (1)))
     /\
     (forall __framac_tmp35 : int.
      ((((<=) (0) __framac_tmp35) /\
       ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
   (not (same_block dest_8 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 3698 10 63# "expl:Assigns clause"
      (not_assigns voidP_dest_8_69_alloc_table voidP_dest_8_69_alloc_table
      (old !charP_charM_dest_8_69) !charP_charM_dest_8_69
      (pset_range (pset_singleton dest_8) (0)
      (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
     /\
     (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
      "expl:Ensures clause"
      (forall i_33_0 : int.
       ((((<=) (0) i_33_0) /\
        ((<) i_33_0 (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
        (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_33_0))
        (select !charP_charM_dest_8_69 (shift dest_8 i_33_0))))))
     /\
     (#"/home/work/workspace/self/verker/strlcpy.h" 32 15 30#
     "expl:Ensures clause"
     (valid_str dest_8 voidP_dest_8_69_alloc_table !charP_charM_dest_8_69)))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_16 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_901 = src_7 in
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_901 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_2
       (#"whole_program.jc" 3734 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_2 ))
       then
        (tmp_0_16 :=
         (Unsafe_uint64.(-)  size_2
          (#"whole_program.jc" 3738 60 73# "expl:Integer cast"
          (Unsafe_uint64.of_int (1))) )) else (tmp_0_16 := !ret));
        begin
        (len := !tmp_0_16);
         begin
         (let _jessie_908 =
         (let _jessie_907 = dest_8 in
         (let _jessie_906 = src_7 in
         (let _jessie_905 = !len in
         (#"/home/work/workspace/self/verker/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_907 _jessie_906
          _jessie_905 charP_charM_dest_8_69 voidP_src_7_70_alloc_table
          voidP_dest_8_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_8_69, dest_8, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker/strlcpy.c" 10 13 67#
            (forall i_37 : int.
             ((((<=) (0) i_37) /\ ((<) i_37 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_37))
              (select !charP_charM_dest_8_69 (shift dest_8 i_37)))))) } ; ()
          end;
          begin
          (let _jessie_910 =
          (#"whole_program.jc" 3752 68 79# "expl:Integer cast"
          (Unsafe_int8.of_int (0))) in
          (let _jessie_911 = dest_8 in
          (let _jessie_912 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_913 = (shift_  _jessie_911 _jessie_912 ) in
          (upd  charP_charM_dest_8_69 _jessie_913 _jessie_910 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 12 13 28#
             (valid_str dest_8 voidP_dest_8_69_alloc_table
             !charP_charM_dest_8_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_8 !charP_charM_dest_8_69) !len)) } ; ()
           end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_size_is_lower_src
  #"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior size_is_lower_src" =
  fun
   (dest_8 : (pointer voidP)) (src_7 : (pointer voidP)) (size_2 : Uint64.t)
   (charP_charM_dest_8_69 : ref (memory voidP Int8.t))
   (voidP_dest_8_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_8_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   (((Uint64.(<) (#"whole_program.jc" 3687 12 25# "expl:Integer cast"
     (Uint64.of_int (0))) size_2)
    /\ (Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70)))
   /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_69_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_69_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_69_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_69_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
     (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
     (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
      (Int.(-) (Uint64.to_int size_2) (1)))
     /\
     (forall __framac_tmp35 : int.
      ((((<=) (0) __framac_tmp35) /\
       ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
   (not (same_block dest_8 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 3688 10 57# "expl:Assigns clause"
      (not_assigns voidP_dest_8_69_alloc_table voidP_dest_8_69_alloc_table
      (old !charP_charM_dest_8_69) !charP_charM_dest_8_69
      (pset_range (pset_singleton dest_8) (0)
      (Int.(-) (Uint64.to_int size_2) (1)))))
     /\
     (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
      "expl:Ensures clause"
      (forall i_34_0 : int.
       ((((<=) (0) i_34_0) /\
        ((<) i_34_0 (Int.(-) (Uint64.to_int size_2) (1)))) ->
        (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_34_0))
        (select !charP_charM_dest_8_69 (shift dest_8 i_34_0))))))
     /\
     (#"/home/work/workspace/self/verker/strlcpy.h" 27 15 30#
     "expl:Ensures clause"
     (valid_str dest_8 voidP_dest_8_69_alloc_table !charP_charM_dest_8_69)))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_16 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_886 = src_7 in
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_886 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_2
       (#"whole_program.jc" 3734 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_2 ))
       then
        (tmp_0_16 :=
         (Unsafe_uint64.(-)  size_2
          (#"whole_program.jc" 3738 60 73# "expl:Integer cast"
          (Unsafe_uint64.of_int (1))) )) else (tmp_0_16 := !ret));
        begin
        (len := !tmp_0_16);
         begin
         (let _jessie_893 =
         (let _jessie_892 = dest_8 in
         (let _jessie_891 = src_7 in
         (let _jessie_890 = !len in
         (#"/home/work/workspace/self/verker/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_892 _jessie_891
          _jessie_890 charP_charM_dest_8_69 voidP_src_7_70_alloc_table
          voidP_dest_8_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_8_69, dest_8, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker/strlcpy.c" 10 13 67#
            (forall i_37 : int.
             ((((<=) (0) i_37) /\ ((<) i_37 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_37))
              (select !charP_charM_dest_8_69 (shift dest_8 i_37)))))) } ; ()
          end;
          begin
          (let _jessie_895 =
          (#"whole_program.jc" 3752 68 79# "expl:Integer cast"
          (Unsafe_int8.of_int (0))) in
          (let _jessie_896 = dest_8 in
          (let _jessie_897 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_898 = (shift_  _jessie_896 _jessie_897 ) in
          (upd  charP_charM_dest_8_69 _jessie_898 _jessie_895 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 12 13 28#
             (valid_str dest_8 voidP_dest_8_69_alloc_table
             !charP_charM_dest_8_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_8 !charP_charM_dest_8_69) !len)) } ; ()
           end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
  let strlcpy_ensures_zero_size
  #"/home/work/workspace/self/verker/strlcpy.c" 3 7 56#
  "expl:Function strlcpy, behavior zero_size" =
  fun
   (dest_8 : (pointer voidP)) (src_7 : (pointer voidP)) (size_2 : Uint64.t)
   (charP_charM_dest_8_69 : ref (memory voidP Int8.t))
   (voidP_dest_8_69_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_alloc_table : (alloc_table voidP))
   (voidP_src_7_70_tag_table : (tag_table voidP)) (voidP_dest_8_69_tag_table
   : (tag_table voidP)) (charP_charM_src_7_70 : (memory voidP Int8.t)) 
   requires {
   ((Uint64.(=) size_2 (#"whole_program.jc" 3707 21 34# "expl:Integer cast"
    (Uint64.of_int (0))))
   /\
   (((allocated voidP_src_7_70_alloc_table src_7) ->
     (((=) (typeof voidP_src_7_70_tag_table src_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_src_7_70_alloc_table src_7) i) /\
       ((<) i (offset_max voidP_src_7_70_alloc_table src_7))) ->
       ((=) (typeof voidP_src_7_70_tag_table (shift src_7 i)) charP_tag)))))
   /\
   (((allocated voidP_dest_8_69_alloc_table dest_8) ->
     (((=) (typeof voidP_dest_8_69_tag_table dest_8) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) i) /\
       ((<) i (offset_max voidP_dest_8_69_alloc_table dest_8))) ->
       ((=) (typeof voidP_dest_8_69_tag_table (shift dest_8 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
    (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
     (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
     (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
      (Int.(-) (Uint64.to_int size_2) (1)))
     /\
     (forall __framac_tmp35 : int.
      ((((<=) (0) __framac_tmp35) /\
       ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"whole_program.jc" 3672 12 785#
   ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
    (valid_str src_7 voidP_src_7_70_alloc_table charP_charM_src_7_70))
   /\
   (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
   (not (same_block dest_8 src_7)))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"whole_program.jc" 3708 10 18# "expl:Assigns clause"
     (not_assigns voidP_dest_8_69_alloc_table voidP_dest_8_69_alloc_table
     (old !charP_charM_dest_8_69) !charP_charM_dest_8_69 pset_empty))) }  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); (); (); ();
     (let ret = ref (Unsafe_uint64.any_  () ) in
     (let len = ref (Unsafe_uint64.any_  () ) in
     (let tmp_0_16 = ref (Unsafe_uint64.any_  () ) in
     begin
     (ret :=
      (let _jessie_916 = src_7 in
      (#"/home/work/workspace/self/verker/strlcpy.c" 5 14 25#
      "expl:Precondition for strlen"
      (Function_strlen_0.strlen_0  _jessie_916 voidP_src_7_70_alloc_table
       voidP_src_7_70_tag_table charP_charM_src_7_70 ))));
      (if
      (#"/home/work/workspace/self/verker/strlcpy.c" 7 5 9#
      (Unsafe_uint64.(<>)  size_2
       (#"whole_program.jc" 3734 44 57# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))) ))
      then
       begin
       (if
       (#"/home/work/workspace/self/verker/strlcpy.c" 8 16 27#
       (Unsafe_uint64.(>=)  !ret size_2 ))
       then
        (tmp_0_16 :=
         (Unsafe_uint64.(-)  size_2
          (#"whole_program.jc" 3738 60 73# "expl:Integer cast"
          (Unsafe_uint64.of_int (1))) )) else (tmp_0_16 := !ret));
        begin
        (len := !tmp_0_16);
         begin
         (let _jessie_923 =
         (let _jessie_922 = dest_8 in
         (let _jessie_921 = src_7 in
         (let _jessie_920 = !len in
         (#"/home/work/workspace/self/verker/strlcpy.c" 9 2 24#
         "expl:Precondition for memcpy_char_0"
         (Function_memcpy_char_0.memcpy_char_0  _jessie_922 _jessie_921
          _jessie_920 charP_charM_dest_8_69 voidP_src_7_70_alloc_table
          voidP_dest_8_69_alloc_table charP_charM_src_7_70 ))))) in ());
          begin
          any unit
          requires { true } reads { charP_charM_dest_8_69, dest_8, src_7 }
          ensures {
            (#"/home/work/workspace/self/verker/strlcpy.c" 10 13 67#
            (forall i_37 : int.
             ((((<=) (0) i_37) /\ ((<) i_37 (Uint64.to_int !len))) ->
              (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_37))
              (select !charP_charM_dest_8_69 (shift dest_8 i_37)))))) } ; ()
          end;
          begin
          (let _jessie_925 =
          (#"whole_program.jc" 3752 68 79# "expl:Integer cast"
          (Unsafe_int8.of_int (0))) in
          (let _jessie_926 = dest_8 in
          (let _jessie_927 = (Unsafe_uint64.to_int  !len ) in
          (let _jessie_928 = (shift_  _jessie_926 _jessie_927 ) in
          (upd  charP_charM_dest_8_69 _jessie_928 _jessie_925 )))));
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 12 13 28#
             (valid_str dest_8 voidP_dest_8_69_alloc_table
             !charP_charM_dest_8_69)) } ; () end;
           begin
           any unit
           requires { true } reads { charP_charM_dest_8_69, dest_8 }
           ensures {
             (#"/home/work/workspace/self/verker/strlcpy.c" 13 13 32#
             (Uint64.(=) (strlen dest_8 !charP_charM_dest_8_69) !len)) } ; ()
           end end end end end else ());
      begin (return := !ret); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
end

module Function_strlen_0_safety
#"/home/work/workspace/self/verker/strlen.h" 86 7 28# "expl:strlen, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlen_0 #"/home/work/workspace/self/verker/strlen.h" 86 7 28#
  "expl:Function strlen, safety" =
  fun
   (s_6 : (pointer voidP)) (voidP_s_6_71_alloc_table : (alloc_table voidP))
   (voidP_s_6_71_tag_table : (tag_table voidP)) (charP_charM_s_6_71 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_6_71_alloc_table s_6) ->
     (((=) (typeof voidP_s_6_71_tag_table s_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_6_71_alloc_table s_6) i) /\
       ((<) i (offset_max voidP_s_6_71_alloc_table s_6))) ->
       ((=) (typeof voidP_s_6_71_tag_table (shift s_6 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strlen.h" 80 13 25#
   (valid_str s_6 voidP_s_6_71_alloc_table charP_charM_s_6_71))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (let sc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let __retres_10 = ref (Safe_uint64.any_  () ) in
    try
     begin
     (sc_0 :=
      (let _jessie_949 = s_6 in
      begin
      (assert {
      (#"/home/work/workspace/self/verker/strlen.c" 11 6 12#
      "expl:Pointer index bounds" true) }); _jessie_949 end));
      'Loop_62:
      loop
      invariant { (#"whole_program.jc" 3790 6 1354# true) }
        variant { (#"/home/work/workspace/self/verker/strlen.c" 9 18 38#
          (Int.(-) (Uint64.to_int (strlen s_6 charP_charM_s_6_71))
          (sub_pointer !sc_0 s_6))) }
       begin
       any unit
       requires { true } reads { s_6 }
       ensures {
         ((#"/home/work/workspace/self/verker/strlen.c" 8 20 54#
          ((=) (Uint64.to_int (strlen s_6 charP_charM_s_6_71))
          (Int.(+) (Uint64.to_int (strlen !sc_0 charP_charM_s_6_71))
          (sub_pointer !sc_0 s_6))))
         /\
         ((#"/home/work/workspace/self/verker/strlen.c" 7 20 33#
          (valid_str !sc_0 voidP_s_6_71_alloc_table charP_charM_s_6_71))
         /\
         (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
         (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker/strlen.c" 6 20 27#
          (same_block s_6 !sc_0))
         /\
         (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker/strlen.c" 6 20 27#
          ((<=) (sub_pointer s_6 !sc_0) (0)))
         /\
         (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
         ((#"/home/work/workspace/self/verker/strlen.c" 6 25 44#
          (same_block !sc_0
          (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_71)))))
         /\
         (#"/home/work/workspace/self/verker/strlen.c" 6 25 44#
         ((<=)
         (sub_pointer !sc_0
         (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_71)))) (0))))))))))))
         } ;
        try
         begin
         begin
         (if
         (#"/home/work/workspace/self/verker/strlen.c" 11 14 25#
         (Safe_int32.(<>) 
          (#"/home/work/workspace/self/verker/strlen.c" 11 14 17#
          "expl:Integer cast"
          (Safe_int32_of_Safe_int8.cast 
           (#"/home/work/workspace/self/verker/strlen.c" 11 14 17#
           "expl:Pointer dereference"
           (acc  voidP_s_6_71_alloc_table charP_charM_s_6_71 !sc_0 )) ))
          (#"whole_program.jc" 3812 29 41# "expl:Integer cast"
          (Safe_int32.of_int (0))) )) then ()
         else (raise (Goto_while_0_break_14_exc ())));
          (sc_0 :=
           (let _jessie_950 =
           (shift_typesafe  !sc_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 3814 46 58# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strlen.c" 11 27 31#
           "expl:Pointer index bounds" true) }); _jessie_950 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_70 -> () end end end; (raise (Goto_while_0_break_14_exc ()))
     end with Goto_while_0_break_14_exc _jessie_68 ->
     'While_0_break_14:
     'While_0_break_14:
     begin
     ();
      begin
      (__retres_10 :=
       (let _jessie_951 =
       (#"/home/work/workspace/self/verker/strlen.c" 13 8 14#
       "expl:Integer cast"
       (Safe_uint64.of_int 
        (#"/home/work/workspace/self/verker/strlen.c" 13 8 14#
        (sub_pointer_  !sc_0 s_6 )) )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strlen.c" 13 1 15#
       "expl:Pointer index bounds" true) }); _jessie_951 end));
       begin
       (return :=
        (let _jessie_952 = !__retres_10 in
        begin
        (assert {
        (#"whole_program.jc" 3820 7 25# "expl:Pointer index bounds" true) });
         _jessie_952 end)); (raise Return) end end end end)); absurd  end
    with Return -> !return end)
  
end

module Function_strlen_0_behaviors
#"/home/work/workspace/self/verker/strlen.h" 86 7 28#
"expl:strlen, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strlen_ensures_default
  #"/home/work/workspace/self/verker/strlen.h" 86 7 28#
  "expl:Function strlen, default behavior" =
  fun
   (s_6 : (pointer voidP)) (voidP_s_6_71_alloc_table : (alloc_table voidP))
   (voidP_s_6_71_tag_table : (tag_table voidP)) (charP_charM_s_6_71 : (memory
   voidP Int8.t)) 
   requires {
   (((allocated voidP_s_6_71_alloc_table s_6) ->
     (((=) (typeof voidP_s_6_71_tag_table s_6) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_6_71_alloc_table s_6) i) /\
       ((<) i (offset_max voidP_s_6_71_alloc_table s_6))) ->
       ((=) (typeof voidP_s_6_71_tag_table (shift s_6 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strlen.h" 80 13 25#
   (valid_str s_6 voidP_s_6_71_alloc_table charP_charM_s_6_71))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
      "expl:Ensures clause"
      (Uint64.(=) result (strlen s_6 charP_charM_s_6_71)))
     /\
     (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
      "expl:Ensures clause"
      (Int8.(=)
      (select charP_charM_s_6_71 (shift s_6 (Uint64.to_int result)))
      (#"whole_program.jc" 3777 37 48# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
     "expl:Ensures clause"
     (forall i_35_0 : int.
      ((((<=) (0) i_35_0) /\ ((<) i_35_0 (Uint64.to_int result))) ->
       (Int8.(<>) (select charP_charM_s_6_71 (shift s_6 i_35_0))
       (#"whole_program.jc" 3782 42 53# "expl:Integer cast" (Int8.of_int
       (0))))))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (let sc_0 = ref (any_pointer  () : (pointer voidP)) in
    (let __retres_10 = ref (Unsafe_uint64.any_  () ) in
    try
     begin
     (sc_0 := s_6);
      'Loop_61:
      loop
      invariant
        { ((#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
           (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker/strlen.c" 6 20 27#
            (same_block s_6 !sc_0))
           /\
           (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker/strlen.c" 6 20 27#
            ((<=) (sub_pointer s_6 !sc_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strlen.c" 6 20 44#
           ((#"/home/work/workspace/self/verker/strlen.c" 6 25 44#
            (same_block !sc_0
            (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_71)))))
           /\
           (#"/home/work/workspace/self/verker/strlen.c" 6 25 44#
           ((<=)
           (sub_pointer !sc_0
           (shift s_6 (Uint64.to_int (strlen s_6 charP_charM_s_6_71)))) (0))))))))))
          &&
          ((#"/home/work/workspace/self/verker/strlen.c" 7 20 33#
           (valid_str !sc_0 voidP_s_6_71_alloc_table charP_charM_s_6_71))
          &&
          (#"/home/work/workspace/self/verker/strlen.c" 8 20 54#
          ((=) (Uint64.to_int (strlen s_6 charP_charM_s_6_71))
          (Int.(+) (Uint64.to_int (strlen !sc_0 charP_charM_s_6_71))
          (sub_pointer !sc_0 s_6)))))) } 
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         begin
         (if
         (#"/home/work/workspace/self/verker/strlen.c" 11 14 25#
         (Unsafe_int32.(<>) 
          (#"/home/work/workspace/self/verker/strlen.c" 11 14 17#
          "expl:Integer cast"
          (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_s_6_71 !sc_0 )
           ))
          (#"whole_program.jc" 3812 29 41# "expl:Integer cast"
          (Unsafe_int32.of_int (0))) )) then ()
         else (raise (Goto_while_0_break_14_exc ())));
          (sc_0 :=
           (shift_  !sc_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 3814 46 58# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) )) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc
         _jessie_70 -> () end end end; (raise (Goto_while_0_break_14_exc ()))
     end with Goto_while_0_break_14_exc _jessie_68 ->
     'While_0_break_14:
     'While_0_break_14:
     begin
     ();
      begin
      (__retres_10 :=
       (#"/home/work/workspace/self/verker/strlen.c" 13 8 14#
       "expl:Integer cast"
       (Unsafe_uint64.of_int 
        (#"/home/work/workspace/self/verker/strlen.c" 13 8 14#
        (sub_pointer_  !sc_0 s_6 )) )));
       begin (return := !__retres_10); (raise Return) end end end end));
     absurd  end with Return -> !return end)
  
end

theory Axiomatic_Strnlen

  use enum.Uint64 
  
  use int.MinMax 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use bool.Bool 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate valid_strn (s_33 : (pointer voidP)) (cnt : Uint64.t)
  (voidP_s_33_72_alloc_table_at_L : (alloc_table voidP))
  (charP_charM_s_33_72_at_L : (memory voidP Int8.t))
  =
     ((exists n_5 : Uint64.t.
       ((Uint64.(<) n_5 cnt) /\
       ((Int8.(=)
        (select charP_charM_s_33_72_at_L (shift s_33 (Uint64.to_int n_5)))
        (#"whole_program.jc" 3828 62 73# "expl:Integer cast" (Int8.of_int
        (0))))
       /\
       (if ((<=) (0) (Uint64.to_int n_5)) then
        (((<=) (offset_min voidP_s_33_72_alloc_table_at_L s_33) (0)) /\
        (((>=) (offset_max voidP_s_33_72_alloc_table_at_L s_33)
         (Uint64.to_int n_5))
        /\
        (forall __framac_tmp37 : int.
         ((((<=) (0) __framac_tmp37) /\
          ((<=) __framac_tmp37 (Uint64.to_int n_5))) -> ((=) true true)))))
        else ((=) true true)))))
     \/
     (if ((<=) (0) (Uint64.to_int cnt)) then
      (((<=) (offset_min voidP_s_33_72_alloc_table_at_L s_33) (0)) /\
      (((>=) (offset_max voidP_s_33_72_alloc_table_at_L s_33)
       (Uint64.to_int cnt))
      /\
      (forall __framac_tmp36 : int.
       ((((<=) (0) __framac_tmp36) /\
        ((<=) __framac_tmp36 (Uint64.to_int cnt))) -> ((=) true true)))))
      else ((=) true true)))
  
  
  lemma Valid_strn_shift1
  #"/home/work/workspace/self/verker/strnlen.h" 13 7 133#
  "expl:Lemma valid_strn_shift1" :
  (forall voidP_s_34_332_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_34_332_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 13 7 133#
    (forall s_34 : (pointer voidP).
     (forall cnt_0 : Uint64.t.
      (((valid_strn s_34 cnt_0 voidP_s_34_332_alloc_table_at_L
        charP_charM_s_34_332_at_L)
       /\
       ((Uint64.(>) cnt_0 (#"whole_program.jc" 3853 59 72#
        "expl:Integer cast" (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_34_332_at_L s_34)
       (#"whole_program.jc" 3854 35 46# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       (valid_strn (shift s_34 (1)) (#"whole_program.jc" 3856 33 69#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_0) (1))))
       voidP_s_34_332_alloc_table_at_L charP_charM_s_34_332_at_L)))))))
  
  lemma Valid_str_to_valid_strn
  #"/home/work/workspace/self/verker/strnlen.h" 17 7 80#
  "expl:Lemma valid_str_to_valid_strn" :
  (forall voidP_s_35_333_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_35_333_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 17 7 80#
    (forall s_35 : (pointer voidP).
     (forall cnt_1 : Uint64.t.
      ((valid_str s_35 voidP_s_35_333_alloc_table_at_L
       charP_charM_s_35_333_at_L) ->
       (valid_strn s_35 cnt_1 voidP_s_35_333_alloc_table_at_L
       charP_charM_s_35_333_at_L)))))))
  
  function strnlen (s_36 : (pointer voidP)) (cnt_2 : Uint64.t)
  (charP_charM_s_36_73_at_L : (memory voidP Int8.t)) : Uint64.t
  =
     (if
      (Bool.orb
      (Int8.(=) (select charP_charM_s_36_73_at_L (shift s_36 (0)))
      (#"whole_program.jc" 3864 32 43# "expl:Integer cast" (Int8.of_int
      (0))))
      (Uint64.(=) cnt_2 (#"whole_program.jc" 3864 58 71# "expl:Integer cast"
      (Uint64.of_int (0))))) then (#"whole_program.jc" 3864 79 92#
      "expl:Integer cast" (Uint64.of_int (0))) else
      (#"whole_program.jc" 3864 98 204# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int
      (strnlen (shift s_36 (1)) (#"whole_program.jc" 3866 32 68#
      "expl:Integer cast"
      (Uint64.of_int (Int.(-) (Uint64.to_int cnt_2) (1))))
      charP_charM_s_36_73_at_L))))))
  
  
  lemma Strnlen_range #"/home/work/workspace/self/verker/strnlen.h" 26 7 109#
  "expl:Lemma strnlen_range" :
  (forall voidP_s_37_334_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_37_334_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 26 7 109#
    (forall s_37 : (pointer voidP).
     (forall cnt_3 : Uint64.t.
      ((valid_strn s_37 cnt_3 voidP_s_37_334_alloc_table_at_L
       charP_charM_s_37_334_at_L) ->
       ((Uint64.(<=) (#"whole_program.jc" 3872 21 34# "expl:Integer cast"
        (Uint64.of_int (0))) (strnlen s_37 cnt_3 charP_charM_s_37_334_at_L))
       /\ (Uint64.(<=) (strnlen s_37 cnt_3 charP_charM_s_37_334_at_L) cnt_3))))))))
  
  lemma Strnlen_null #"/home/work/workspace/self/verker/strnlen.h" 31 7 111#
  "expl:Lemma strnlen_null" :
  (forall voidP_s_38_335_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_38_335_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 31 7 111#
    (forall s_38 : (pointer voidP).
     (forall cnt_4 : Uint64.t.
      ((((<=) (offset_min voidP_s_38_335_alloc_table_at_L s_38) (0)) /\
       (((>=) (offset_max voidP_s_38_335_alloc_table_at_L s_38) (0)) /\
       ((=) true true))) ->
       ((Uint64.(=) (strnlen s_38 cnt_4 charP_charM_s_38_335_at_L)
        (#"whole_program.jc" 3881 48 61# "expl:Integer cast" (Uint64.of_int
        (0))))
       <->
       ((Int8.(=) (select charP_charM_s_38_335_at_L s_38)
        (#"whole_program.jc" 3882 37 48# "expl:Integer cast" (Int8.of_int
        (0))))
       \/
       (Uint64.(=) cnt_4 (#"whole_program.jc" 3883 33 46# "expl:Integer cast"
       (Uint64.of_int (0))))))))))))
  
  lemma Strnlen_zero_count
  #"/home/work/workspace/self/verker/strnlen.h" 35 7 51#
  "expl:Lemma strnlen_zero_count" :
  (forall charP_charM_s_39_336_at_L : (memory voidP Int8.t).
   (#"/home/work/workspace/self/verker/strnlen.h" 35 7 51#
   (forall s_39 : (pointer voidP).
    (Uint64.(=)
    (strnlen s_39 (#"whole_program.jc" 3887 33 46# "expl:Integer cast"
    (Uint64.of_int (0))) charP_charM_s_39_336_at_L)
    (#"whole_program.jc" 3887 51 64# "expl:Integer cast" (Uint64.of_int
    (0)))))))
  
  lemma Strnlen_min_len
  #"/home/work/workspace/self/verker/strnlen.h" 39 6 160#
  "expl:Lemma strnlen_min_len" :
  (forall voidP_s_40_337_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_40_337_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 39 6 160#
    (forall s_40 : (pointer voidP).
     (forall cnt_5 : Uint64.t.
      ((exists n_6 : Uint64.t.
        ((Uint64.(<) n_6 cnt_5) /\
        ((Int8.(=)
         (select charP_charM_s_40_337_at_L (shift s_40 (Uint64.to_int n_6)))
         (#"whole_program.jc" 3894 59 70# "expl:Integer cast" (Int8.of_int
         (0))))
        /\
        (if ((<=) (0) (Uint64.to_int n_6)) then
         (((<=) (offset_min voidP_s_40_337_alloc_table_at_L s_40) (0)) /\
         (((>=) (offset_max voidP_s_40_337_alloc_table_at_L s_40)
          (Uint64.to_int n_6))
         /\
         (forall __framac_tmp39 : int.
          ((((<=) (0) __framac_tmp39) /\
           ((<=) __framac_tmp39 (Uint64.to_int n_6))) -> ((=) true true)))))
         else ((=) true true))))) ->
       ((=) (Uint64.to_int (strnlen s_40 cnt_5 charP_charM_s_40_337_at_L))
       (MinMax.min (Uint64.to_int (strlen s_40 charP_charM_s_40_337_at_L))
       (Uint64.to_int cnt_5)))))))))
  
  lemma Strnlen_before_zero
  #"/home/work/workspace/self/verker/strnlen.h" 44 7 122#
  "expl:Lemma strnlen_before_zero" :
  (forall voidP_s_41_338_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_41_338_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 44 7 122#
    (forall s_41 : (pointer voidP).
     (forall i_36_0 : Uint64.t.
      (forall cnt_6 : Uint64.t.
       (((valid_strn s_41 cnt_6 voidP_s_41_338_alloc_table_at_L
         charP_charM_s_41_338_at_L)
        /\
        ((Uint64.(<=) (#"whole_program.jc" 3915 53 66# "expl:Integer cast"
         (Uint64.of_int (0))) i_36_0)
        /\
        (Uint64.(<) i_36_0 (strnlen s_41 cnt_6 charP_charM_s_41_338_at_L))))
        ->
        (Int8.(<>)
        (select charP_charM_s_41_338_at_L
        (shift s_41 (Uint64.to_int i_36_0))) (#"whole_program.jc" 3917 58 69#
        "expl:Integer cast" (Int8.of_int (0)))))))))))
  
  lemma Strnlen_at_zero
  #"/home/work/workspace/self/verker/strnlen.h" 49 7 133#
  "expl:Lemma strnlen_at_zero" :
  (forall voidP_s_42_339_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_42_339_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 49 7 133#
    (forall s_42 : (pointer voidP).
     (forall cnt_7 : Uint64.t.
      (((valid_strn s_42 cnt_7 voidP_s_42_339_alloc_table_at_L
        charP_charM_s_42_339_at_L)
       /\ (Uint64.(<) (strnlen s_42 cnt_7 charP_charM_s_42_339_at_L) cnt_7))
       ->
       (Int8.(=)
       (select charP_charM_s_42_339_at_L
       (shift s_42
       (Uint64.to_int (strnlen s_42 cnt_7 charP_charM_s_42_339_at_L))))
       (#"whole_program.jc" 3925 21 32# "expl:Integer cast" (Int8.of_int
       (0))))))))))
  
  lemma Strnlen_at_cnt
  #"/home/work/workspace/self/verker/strnlen.h" 54 7 133#
  "expl:Lemma strnlen_at_cnt" :
  (forall voidP_s_43_340_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_43_340_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 54 7 133#
    (forall s_43 : (pointer voidP).
     (forall i_37_0 : Uint64.t.
      (forall cnt_8 : Uint64.t.
       (((valid_strn s_43 cnt_8 voidP_s_43_340_alloc_table_at_L
         charP_charM_s_43_340_at_L)
        /\
        (Uint64.(=) i_37_0 (strnlen s_43 cnt_8 charP_charM_s_43_340_at_L)))
        ->
        ((Int8.(=)
         (select charP_charM_s_43_340_at_L
         (shift s_43 (Uint64.to_int i_37_0)))
         (#"whole_program.jc" 3933 59 70# "expl:Integer cast" (Int8.of_int
         (0))))
        \/ (Uint64.(=) i_37_0 cnt_8)))))))))
  
  lemma Strnlen_zero #"/home/work/workspace/self/verker/strnlen.h" 59 7 209#
  "expl:Lemma strnlen_zero" :
  (forall voidP_s_44_341_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_44_341_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 59 7 209#
    (forall s_44 : (pointer voidP).
     (forall cnt_9 : Uint64.t.
      (forall n_7 : Uint64.t.
       (((valid_strn s_44 cnt_9 voidP_s_44_341_alloc_table_at_L
         charP_charM_s_44_341_at_L)
        /\
        ((Uint64.(<) n_7 cnt_9) /\
        ((Int8.(=)
         (select charP_charM_s_44_341_at_L (shift s_44 (Uint64.to_int n_7)))
         (#"whole_program.jc" 3941 59 70# "expl:Integer cast" (Int8.of_int
         (0))))
        /\
        (forall i_38 : Uint64.t.
         ((Uint64.(<) i_38 n_7) ->
          (Int8.(<>)
          (select charP_charM_s_44_341_at_L
          (shift s_44 (Uint64.to_int i_38))) (#"whole_program.jc" 3944 63 74#
          "expl:Integer cast" (Int8.of_int (0))))))))) ->
        (Uint64.(=) (strnlen s_44 cnt_9 charP_charM_s_44_341_at_L) n_7))))))))
  
  lemma Strnlen_cnt #"/home/work/workspace/self/verker/strnlen.h" 67 7 162#
  "expl:Lemma strnlen_cnt" :
  (forall voidP_s_45_342_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_45_342_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 67 7 162#
    (forall s_45 : (pointer voidP).
     (forall cnt_10 : Uint64.t.
      (((valid_strn s_45 cnt_10 voidP_s_45_342_alloc_table_at_L
        charP_charM_s_45_342_at_L)
       /\
       (forall n_8 : Uint64.t.
        ((Uint64.(<) n_8 cnt_10) ->
         (Int8.(<>)
         (select charP_charM_s_45_342_at_L (shift s_45 (Uint64.to_int n_8)))
         (#"whole_program.jc" 3953 60 71# "expl:Integer cast" (Int8.of_int
         (0))))))) ->
       (Uint64.(=) (strnlen s_45 cnt_10 charP_charM_s_45_342_at_L) cnt_10)))))))
  
  lemma Strnlen_shift #"/home/work/workspace/self/verker/strnlen.h" 73 7 161#
  "expl:Lemma strnlen_shift" :
  (forall voidP_s_46_343_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_46_343_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 73 7 161#
    (forall s_46 : (pointer voidP).
     (forall i_39 : Uint64.t.
      (forall cnt_11 : Uint64.t.
       (((valid_strn s_46 cnt_11 voidP_s_46_343_alloc_table_at_L
         charP_charM_s_46_343_at_L)
        /\
        (Uint64.(<=) i_39 (strnlen s_46 cnt_11 charP_charM_s_46_343_at_L)))
        ->
        ((=)
        (Uint64.to_int
        (strnlen (shift s_46 (Uint64.to_int i_39)) cnt_11
        charP_charM_s_46_343_at_L))
        (Int.(-)
        (Uint64.to_int (strnlen s_46 cnt_11 charP_charM_s_46_343_at_L))
        (Uint64.to_int i_39))))))))))
  
  lemma Strnlen_shift_ex
  #"/home/work/workspace/self/verker/strnlen.h" 79 7 160#
  "expl:Lemma strnlen_shift_ex" :
  (forall voidP_s_47_344_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_47_344_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 79 7 160#
    (forall s_47 : (pointer voidP).
     (forall i_40 : Uint64.t.
      (forall cnt_12 : Uint64.t.
       (((valid_strn s_47 cnt_12 voidP_s_47_344_alloc_table_at_L
         charP_charM_s_47_344_at_L)
        /\
        ((Uint64.(<) (#"whole_program.jc" 3970 54 67# "expl:Integer cast"
         (Uint64.of_int (0))) i_40)
        /\
        (Uint64.(<=) i_40 (strnlen s_47 cnt_12 charP_charM_s_47_344_at_L))))
        ->
        (Uint64.(<)
        (strnlen (shift s_47 (Uint64.to_int i_40)) cnt_12
        charP_charM_s_47_344_at_L)
        (strnlen s_47 cnt_12 charP_charM_s_47_344_at_L)))))))))
  
  lemma Strnlen_shift1
  #"/home/work/workspace/self/verker/strnlen.h" 85 7 159#
  "expl:Lemma strnlen_shift1" :
  (forall voidP_s_48_345_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_48_345_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 85 7 159#
    (forall s_48 : (pointer voidP).
     (forall cnt_13 : Uint64.t.
      (((valid_strn s_48 cnt_13 voidP_s_48_345_alloc_table_at_L
        charP_charM_s_48_345_at_L)
       /\
       ((Uint64.(>) cnt_13 (#"whole_program.jc" 3978 61 74#
        "expl:Integer cast" (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_48_345_at_L s_48)
       (#"whole_program.jc" 3979 35 46# "expl:Integer cast" (Int8.of_int
       (0)))))) ->
       ((=) (Uint64.to_int (strnlen s_48 cnt_13 charP_charM_s_48_345_at_L))
       (Int.(+)
       (Uint64.to_int
       (strnlen (shift s_48 (1)) (#"whole_program.jc" 3982 34 71#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_13) (1))))
       charP_charM_s_48_345_at_L)) (1)))))))))
  
  lemma Strnlen_cmp #"/home/work/workspace/self/verker/strnlen.h" 90 7 167#
  "expl:Lemma strnlen_cmp" :
  (forall voidP_s2_347_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s1_346_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_s2_347_at_L : (memory voidP Int8.t).
     (forall charP_charM_s1_346_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strnlen.h" 90 7 167#
      (forall s1_0 : (pointer voidP).
       (forall s2_0 : (pointer voidP).
        (forall cnt_14 : Uint64.t.
         (((valid_str s1_0 voidP_s1_346_alloc_table_at_L
           charP_charM_s1_346_at_L)
          /\
          ((valid_strn s2_0 cnt_14 voidP_s2_347_alloc_table_at_L
           charP_charM_s2_347_at_L)
          /\
          (Uint64.(<) (strlen s1_0 charP_charM_s1_346_at_L)
          (strnlen s2_0 cnt_14 charP_charM_s2_347_at_L)))) ->
          (Uint64.(<) (strnlen s1_0 cnt_14 charP_charM_s1_346_at_L)
          (strnlen s2_0 cnt_14 charP_charM_s2_347_at_L)))))))))))
  
  lemma Strnlen_less #"/home/work/workspace/self/verker/strnlen.h" 95 7 139#
  "expl:Lemma strnlen_less" :
  (forall voidP_s_49_348_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_49_348_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 95 7 139#
    (forall s_49 : (pointer voidP).
     (forall i_41 : Uint64.t.
      (forall cnt_15 : Uint64.t.
       (((valid_strn s_49 cnt_15 voidP_s_49_348_alloc_table_at_L
         charP_charM_s_49_348_at_L)
        /\ (Uint64.(<=) i_41 cnt_15)) ->
        (Uint64.(<=) (strnlen s_49 i_41 charP_charM_s_49_348_at_L)
        (strnlen s_49 cnt_15 charP_charM_s_49_348_at_L)))))))))
  
  lemma Valid_str_strn
  #"/home/work/workspace/self/verker/strnlen.h" 101 7 114#
  "expl:Lemma valid_str_strn" :
  (forall voidP_s_50_349_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_50_349_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 101 7 114#
    (forall s_50 : (pointer voidP).
     (forall cnt_16 : Uint64.t.
      (((valid_str s_50 voidP_s_50_349_alloc_table_at_L
        charP_charM_s_50_349_at_L)
       /\ (Uint64.(<=) cnt_16 (strlen s_50 charP_charM_s_50_349_at_L))) ->
       (valid_strn s_50 cnt_16 voidP_s_50_349_alloc_table_at_L
       charP_charM_s_50_349_at_L)))))))
  
end

module Function_strnchr_safety
#"/home/work/workspace/self/verker/strnchr.c" 3 5 49# "expl:strnchr, safety"

  use enum.Uint64 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, safety" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_74_alloc_table : (alloc_table voidP)) (voidP_s_7_74_tag_table :
   (tag_table voidP)) (charP_charM_s_7_74 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_7_74_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_74_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_74_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_74_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_74_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_74_alloc_table charP_charM_s_7_74))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount_1 = ref (Safe_bit_uint64.any_  () ) in
     (let tmp_0_17 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 :=
        (let _jessie_982 = !mutable_s_7 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strnchr.c" 5 17 19#
        "expl:Pointer index bounds" true) }); _jessie_982 end));
        begin
        (ocount_1 :=
         (let _jessie_977 = !mutable_count_3 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strnchr.c" 6 18 24#
         "expl:Pointer index bounds" true) }); _jessie_977 end));
         'Loop_66:
         loop
         invariant { (#"whole_program.jc" 4122 6 2871# true) }
           variant { (#"/home/work/workspace/self/verker/strnchr.c" 13 18 23#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker/strnchr.c" 13 18 23#
             !mutable_count_3))) }
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_15 : (pointer voidP).
              (((same_block !os_1 p_15) /\
               (((<=) (sub_pointer !os_1 p_15) (0)) /\
               ((same_block p_15 !mutable_s_7) /\
               ((<) (sub_pointer p_15 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_74 p_15)
               (#"whole_program.jc" 4154 45 60# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_74_alloc_table charP_charM_s_7_74))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount_1)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int
              (strnlen !os_1 !ocount_1 charP_charM_s_7_74)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 4124 42 55#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount_1)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_17 :=
             (let _jessie_978 = !mutable_count_3 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             "expl:Pointer index bounds" true) }); _jessie_978 end));
             begin
             (mutable_count_3 :=
              (let _jessie_979 =
              (Safe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 4161 62 75# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
              "expl:Pointer index bounds" true) }); _jessie_979 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Safe_bit_uint64.(<>)  !tmp_0_17
              (#"whole_program.jc" 4164 52 65# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Safe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Safe_bit_int32_of_Safe_bit_int8.cast 
                (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
                "expl:Pointer dereference"
                (acc  voidP_s_7_74_alloc_table charP_charM_s_7_74
                 !mutable_s_7 )) ))
               (#"whole_program.jc" 4166 29 41# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_15_exc ())))
             else (raise (Goto_while_0_break_15_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Safe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
               "expl:Pointer dereference"
               (acc  voidP_s_7_74_alloc_table charP_charM_s_7_74 !mutable_s_7
                )) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_11 :=
               (let _jessie_980 = !mutable_s_7 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strnchr.c" 17 3 20#
               "expl:Pointer index bounds" true) }); _jessie_980 end));
               (raise (Goto_return_label_6_exc ())) end else ());
             (mutable_s_7 :=
              (let _jessie_981 =
              (shift_typesafe  !mutable_s_7
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 4175 48 60# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strnchr.c" 15 38 41#
              "expl:Pointer index bounds" true) }); _jessie_981 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_74 -> () end end end;
         (raise (Goto_while_0_break_15_exc ())) end end with
       Goto_while_0_break_15_exc _jessie_71 ->
       'While_0_break_15:
       'While_0_break_15:
       begin
       ();
        (__retres_11 :=
         (let _jessie_983 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strnchr.c" 18 1 20#
         "expl:Pointer index bounds" true) }); _jessie_983 end)) end end;
       (raise (Goto_return_label_6_exc ())) end with Goto_return_label_6_exc
      _jessie_72 ->
      'Return_label_6:
      'Return_label_6:
      begin
      (return :=
       (let _jessie_984 = !__retres_11 in
       begin
       (assert {
       (#"whole_program.jc" 4181 7 25# "expl:Pointer index bounds" true) });
        _jessie_984 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)))
  
end

module Function_strnchr_behaviors
#"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
"expl:strnchr, behaviors"

  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr_ensures_default
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, default behavior" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_74_alloc_table : (alloc_table voidP)) (voidP_s_7_74_tag_table :
   (tag_table voidP)) (charP_charM_s_7_74 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_7_74_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_74_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_74_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_74_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_74_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_74_alloc_table charP_charM_s_7_74))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 4058 10 1759# "expl:Behavior disjointness check"
    (not
    ((exists p_13_0 : (pointer voidP).
      ((same_block !mutable_s_7 p_13_0) /\
      (((<=) (sub_pointer !mutable_s_7 p_13_0) (0)) /\
      ((same_block p_13_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74))))
      /\
      (((<)
       (sub_pointer p_13_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_7_74 p_13_0)
      (#"whole_program.jc" 4070 55 70# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))
    /\
    (forall p_12_0 : (pointer voidP).
     (((same_block !mutable_s_7 p_12_0) /\
      (((<=) (sub_pointer !mutable_s_7 p_12_0) (0)) /\
      ((same_block p_12_0
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74))))
      /\
      ((<)
      (sub_pointer p_12_0
      (shift !mutable_s_7
      (Bit_uint64.to_int
      (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_7_74 p_12_0)
      (#"whole_program.jc" 4083 56 71# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) });
     (check {
     (#"whole_program.jc" 4085 10 1640# "expl:Behavior completeness check"
     ((forall p_12_1 : (pointer voidP).
       (((same_block !mutable_s_7 p_12_1) /\
        (((<=) (sub_pointer !mutable_s_7 p_12_1) (0)) /\
        ((same_block p_12_1
         (shift !mutable_s_7
         (Bit_uint64.to_int
         (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74))))
        /\
        ((<)
        (sub_pointer p_12_1
        (shift !mutable_s_7
        (Bit_uint64.to_int
        (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))) (0)))))
        ->
        (Bit_int8.(<>) (select charP_charM_s_7_74 p_12_1)
        (#"whole_program.jc" 4096 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_16)))))
     \/
     (exists p_13_1 : (pointer voidP).
      ((same_block !mutable_s_7 p_13_1) /\
      (((<=) (sub_pointer !mutable_s_7 p_13_1) (0)) /\
      ((same_block p_13_1
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74))))
      /\
      (((<)
       (sub_pointer p_13_1
       (shift !mutable_s_7
       (Bit_uint64.to_int
       (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_7_74 p_13_1)
      (#"whole_program.jc" 4109 53 68# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))) });
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_17 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount_1 := !mutable_count_3);
         'Loop_63:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
              (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
              ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
               (Bit_uint64.(<=) (#"whole_program.jc" 4124 42 55#
               "expl:Integer cast" (Bit_uint64.of_int_const 0))
               !mutable_count_3))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
              (Bit_uint64.(<=) !mutable_count_3 !ocount_1)))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
               (same_block !os_1 !mutable_s_7))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
               ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
               (same_block !mutable_s_7
               (shift !os_1
               (Bit_uint64.to_int
               (strnlen !os_1 !ocount_1 charP_charM_s_7_74)))))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              ((<=)
              (sub_pointer !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int
              (strnlen !os_1 !ocount_1 charP_charM_s_7_74)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
              ((=) (sub_pointer !mutable_s_7 !os_1)
              (Int.(-) (Bit_uint64.to_int !ocount_1)
              (Bit_uint64.to_int !mutable_count_3))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
              (valid_strn !mutable_s_7 !mutable_count_3
              voidP_s_7_74_alloc_table charP_charM_s_7_74))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
              ((=)
              (Bit_uint64.to_int
              (strnlen !os_1 !ocount_1 charP_charM_s_7_74))
              (Int.(+) (sub_pointer !mutable_s_7 !os_1)
              (Bit_uint64.to_int
              (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))))
             &&
             (#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_15 : (pointer voidP).
              (((same_block !os_1 p_15) /\
               (((<=) (sub_pointer !os_1 p_15) (0)) /\
               ((same_block p_15 !mutable_s_7) /\
               ((<) (sub_pointer p_15 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_74 p_15)
               (#"whole_program.jc" 4154 45 60# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_0_17 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 4161 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_17
              (#"whole_program.jc" 4164 52 65# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
               (#"whole_program.jc" 4166 29 41# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_15_exc ())))
             else (raise (Goto_while_0_break_15_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_11 := !mutable_s_7);
               (raise (Goto_return_label_6_exc ())) end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4175 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_74 -> () end end end;
         (raise (Goto_while_0_break_15_exc ())) end end with
       Goto_while_0_break_15_exc _jessie_71 ->
       'While_0_break_15:
       'While_0_break_15: begin (); (__retres_11 := (null  )) end end;
       (raise (Goto_return_label_6_exc ())) end with Goto_return_label_6_exc
      _jessie_72 ->
      'Return_label_6:
      'Return_label_6: begin (return := !__retres_11); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_exists
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior exists" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_74_alloc_table : (alloc_table voidP)) (voidP_s_7_74_tag_table :
   (tag_table voidP)) (charP_charM_s_7_74 : (memory voidP Int8.t)) 
   requires {
   ((exists p_13 : (pointer voidP).
     ((same_block s_7 p_13) /\
     (((<=) (sub_pointer s_7 p_13) (0)) /\
     ((same_block p_13
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
     /\
     (((<)
      (sub_pointer p_13
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_7_74 p_13)
     (#"whole_program.jc" 4022 29 44# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_16))))))))
   /\
   (((allocated voidP_s_7_74_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_74_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_74_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_74_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_74_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_74_alloc_table charP_charM_s_7_74)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
      "expl:Ensures clause" (same_block s_7 result))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      (same_block result
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_7_74 result)
      (#"whole_program.jc" 4036 37 61# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16))))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
     "expl:Ensures clause"
     (forall p_14 : (pointer voidP).
      (((same_block s_7 p_14) /\
       (((<=) (sub_pointer s_7 p_14) (0)) /\
       ((same_block p_14 result) /\ ((<) (sub_pointer p_14 result) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_7_74 p_14)
       (#"whole_program.jc" 4045 42 66# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))) } diverges 
   ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_17 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount_1 := !mutable_count_3);
         'Loop_64:
         loop
         invariant { (#"whole_program.jc" 4122 6 2871# true) } 
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_15 : (pointer voidP).
              (((same_block !os_1 p_15) /\
               (((<=) (sub_pointer !os_1 p_15) (0)) /\
               ((same_block p_15 !mutable_s_7) /\
               ((<) (sub_pointer p_15 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_74 p_15)
               (#"whole_program.jc" 4154 45 60# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_74_alloc_table charP_charM_s_7_74))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount_1)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int
              (strnlen !os_1 !ocount_1 charP_charM_s_7_74)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 4124 42 55#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount_1)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_17 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 4161 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_17
              (#"whole_program.jc" 4164 52 65# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
               (#"whole_program.jc" 4166 29 41# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_15_exc ())))
             else (raise (Goto_while_0_break_15_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_11 := !mutable_s_7);
               (raise (Goto_return_label_6_exc ())) end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4175 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_74 -> () end end end;
         (raise (Goto_while_0_break_15_exc ())) end end with
       Goto_while_0_break_15_exc _jessie_71 ->
       'While_0_break_15:
       'While_0_break_15: begin (); (__retres_11 := (null  )) end end;
       (raise (Goto_return_label_6_exc ())) end with Goto_return_label_6_exc
      _jessie_72 ->
      'Return_label_6:
      'Return_label_6: begin (return := !__retres_11); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_not_exists
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior not_exists" =
  fun
   (s_7 : (pointer voidP)) (count_3 : Uint64.t) (c_16 : Int32.t)
   (voidP_s_7_74_alloc_table : (alloc_table voidP)) (voidP_s_7_74_tag_table :
   (tag_table voidP)) (charP_charM_s_7_74 : (memory voidP Int8.t)) 
   requires {
   ((forall p_12 : (pointer voidP).
     (((same_block s_7 p_12) /\
      (((<=) (sub_pointer s_7 p_12) (0)) /\
      ((same_block p_12
       (shift s_7
       (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
      /\
      ((<)
      (sub_pointer p_12
      (shift s_7
      (Bit_uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_7_74 p_12)
      (#"whole_program.jc" 4055 29 44# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_16)))))
   /\
   (((allocated voidP_s_7_74_alloc_table s_7) ->
     (((=) (typeof voidP_s_7_74_tag_table s_7) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_7_74_alloc_table s_7) i) /\
       ((<) i (offset_max voidP_s_7_74_alloc_table s_7))) ->
       ((=) (typeof voidP_s_7_74_tag_table (shift s_7 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_7 count_3 voidP_s_7_74_alloc_table charP_charM_s_7_74)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_7 = ref s_7 in
   (let mutable_count_3 = ref count_3 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os_1 = ref (any_pointer  () : (pointer voidP)) in
     (let ocount_1 = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp_0_17 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_11 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os_1 := !mutable_s_7);
        begin
        (ocount_1 := !mutable_count_3);
         'Loop_65:
         loop
         invariant { (#"whole_program.jc" 4122 6 2871# true) } 
          begin
          any unit
          requires { true } reads { c_16, mutable_count_3, mutable_s_7 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_15 : (pointer voidP).
              (((same_block !os_1 p_15) /\
               (((<=) (sub_pointer !os_1 p_15) (0)) /\
               ((same_block p_15 !mutable_s_7) /\
               ((<) (sub_pointer p_15 !mutable_s_7) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_7_74 p_15)
               (#"whole_program.jc" 4154 45 60# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_16))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=)
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))
             (Int.(+) (sub_pointer !mutable_s_7 !os_1)
             (Bit_uint64.to_int
             (strnlen !mutable_s_7 !mutable_count_3 charP_charM_s_7_74)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_7 !mutable_count_3
             voidP_s_7_74_alloc_table charP_charM_s_7_74))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_7 !os_1)
             (Int.(-) (Bit_uint64.to_int !ocount_1)
             (Bit_uint64.to_int !mutable_count_3))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os_1 !mutable_s_7))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os_1 !mutable_s_7) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_7
              (shift !os_1
              (Bit_uint64.to_int
              (strnlen !os_1 !ocount_1 charP_charM_s_7_74)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_7
             (shift !os_1
             (Bit_uint64.to_int (strnlen !os_1 !ocount_1 charP_charM_s_7_74))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 4124 42 55#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_3))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count_3 !ocount_1)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_0_17 := !mutable_count_3);
             begin
             (mutable_count_3 :=
              (Unsafe_bit_uint64.(-%)  !mutable_count_3
               (#"whole_program.jc" 4161 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp_0_17
              (#"whole_program.jc" 4164 52 65# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
               (#"whole_program.jc" 4166 29 41# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_15_exc ())))
             else (raise (Goto_while_0_break_15_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_7_74 !mutable_s_7 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_16 )) )) ))
             then
              begin
              (__retres_11 := !mutable_s_7);
               (raise (Goto_return_label_6_exc ())) end else ());
             (mutable_s_7 :=
              (shift_  !mutable_s_7
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4175 48 60# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_74 -> () end end end;
         (raise (Goto_while_0_break_15_exc ())) end end with
       Goto_while_0_break_15_exc _jessie_71 ->
       'While_0_break_15:
       'While_0_break_15: begin (); (__retres_11 := (null  )) end end;
       (raise (Goto_return_label_6_exc ())) end with Goto_return_label_6_exc
      _jessie_72 ->
      'Return_label_6:
      'Return_label_6: begin (return := !__retres_11); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
end

module Function_strnlen_0_safety
#"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
"expl:strnlen, safety"

  use enum.Uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnlen_0 #"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
  "expl:Function strnlen, safety" =
  fun
   (s_8_0 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_76_alloc_table :
   (alloc_table voidP)) (voidP_s_8_76_tag_table : (tag_table voidP))
   (charP_charM_s_8_76 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_8_76_alloc_table s_8_0) ->
     (((=) (typeof voidP_s_8_76_tag_table s_8_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_76_alloc_table s_8_0) i) /\
       ((<) i (offset_max voidP_s_8_76_alloc_table s_8_0))) ->
       ((=) (typeof voidP_s_8_76_tag_table (shift s_8_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
   (valid_strn s_8_0 count_4 voidP_s_8_76_alloc_table charP_charM_s_8_76))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Safe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_18 = ref (Safe_bit_uint64.any_  () ) in
     (let __retres_12 = ref (Safe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 :=
       (let _jessie_1003 = s_8_0 in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strnlen.c" 14 6 12#
       "expl:Pointer index bounds" true) }); _jessie_1003 end));
       'Loop_70:
       loop
       invariant { (#"whole_program.jc" 4234 6 2522# true) }
         variant { (#"/home/work/workspace/self/verker/strnlen.c" 12 18 23#
           (Bit_uint64.to_int
           (#"/home/work/workspace/self/verker/strnlen.c" 12 18 23#
           !mutable_count_4))) }
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strnlen.c" 11 20 71#
           (forall i_45 : int.
            ((((<=) (0) i_45) /\ ((<) i_45 (sub_pointer !sc_0_0 s_8_0))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_45))
             (#"whole_program.jc" 4265 53 64# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 10 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_76))
           (sub_pointer !sc_0_0 s_8_0))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 9 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_76_alloc_table
           charP_charM_s_8_76))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 8 20 54#
           ((=) (sub_pointer !sc_0_0 s_8_0)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            (same_block s_8_0 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            ((<=) (sub_pointer s_8_0 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
            (same_block !sc_0_0
            (shift s_8_0
            (Bit_uint64.to_int
            (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76)))))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8_0
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          ((#"/home/work/workspace/self/verker/strnlen.c" 6 20 30#
           (Bit_uint64.(<=) (#"whole_program.jc" 4236 42 55#
           "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_count_4))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 25 48#
          (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init)))))))))))
          } ;
         try
          begin
          begin
          begin
          (tmp_0_18 :=
           (let _jessie_1004 = !mutable_count_4 in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
           "expl:Pointer index bounds" true) }); _jessie_1004 end));
           begin
           (mutable_count_4 :=
            (let _jessie_1005 =
            (Safe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 4272 62 75# "expl:Integer cast"
             (Safe_bit_uint64.of_int_const 1)) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
            "expl:Pointer index bounds" true) }); _jessie_1005 end)); () end
          end;
           (if
           (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
           (Safe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 4275 52 65# "expl:Integer cast"
            (Safe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker/strnlen.c" 14 31 42#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strnlen.c" 14 31 34#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker/strnlen.c" 14 31 34#
              "expl:Pointer dereference"
              (acc  voidP_s_8_76_alloc_table charP_charM_s_8_76 !sc_0_0 )) ))
             (#"whole_program.jc" 4277 29 41# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_16_exc ())))
           else (raise (Goto_while_0_break_16_exc ())));
           (sc_0_0 :=
            (let _jessie_1006 =
            (shift_typesafe  !sc_0_0
             (Safe_int32.to_int 
              (#"whole_program.jc" 4280 50 62# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) ) in
            begin
            (assert {
            (#"/home/work/workspace/self/verker/strnlen.c" 14 44 48#
            "expl:Pointer index bounds" true) }); _jessie_1006 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_77 -> () end end end;
       (raise (Goto_while_0_break_16_exc ())) end with
      Goto_while_0_break_16_exc _jessie_75 ->
      'While_0_break_16:
      'While_0_break_16:
      begin
      ();
       begin
       (__retres_12 :=
        (let _jessie_1007 =
        (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
        "expl:Integer cast"
        (Safe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
         (sub_pointer_  !sc_0_0 s_8_0 )) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strnlen.c" 17 1 15#
        "expl:Pointer index bounds" true) }); _jessie_1007 end));
        begin
        (return :=
         (let _jessie_1008 = !__retres_12 in
         begin
         (assert {
         (#"whole_program.jc" 4286 7 25# "expl:Pointer index bounds" true) });
          _jessie_1008 end)); (raise Return) end end end end))); absurd  end
    with Return -> !return end))
  
end

module Function_strnlen_0_behaviors
#"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
"expl:strnlen, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnlen_ensures_count_len
  #"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
  "expl:Function strnlen, behavior count_len" =
  fun
   (s_8_0 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_76_alloc_table :
   (alloc_table voidP)) (voidP_s_8_76_tag_table : (tag_table voidP))
   (charP_charM_s_8_76 : (memory voidP Int8.t)) 
   requires {
   ((forall i_42 : int.
     ((((<=) (0) i_42) /\ ((<=) i_42 (Bit_uint64.to_int count_4))) ->
      (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_42))
      (#"whole_program.jc" 4205 37 48# "expl:Integer cast" (Int8.of_int
      (0))))))
   /\
   (((allocated voidP_s_8_76_alloc_table s_8_0) ->
     (((=) (typeof voidP_s_8_76_tag_table s_8_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_76_alloc_table s_8_0) i) /\
       ((<) i (offset_max voidP_s_8_76_alloc_table s_8_0))) ->
       ((=) (typeof voidP_s_8_76_tag_table (shift s_8_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
   (valid_strn s_8_0 count_4 voidP_s_8_76_alloc_table charP_charM_s_8_76))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnlen.h" 122 15 31#
     "expl:Ensures clause" (Bit_uint64.(=) result count_4))) } diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_18 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_12 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8_0);
       'Loop_69:
       loop
       invariant { (#"whole_program.jc" 4234 6 2522# true) } 
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strnlen.c" 11 20 71#
           (forall i_45 : int.
            ((((<=) (0) i_45) /\ ((<) i_45 (sub_pointer !sc_0_0 s_8_0))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_45))
             (#"whole_program.jc" 4265 53 64# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 10 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_76))
           (sub_pointer !sc_0_0 s_8_0))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 9 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_76_alloc_table
           charP_charM_s_8_76))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 8 20 54#
           ((=) (sub_pointer !sc_0_0 s_8_0)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            (same_block s_8_0 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            ((<=) (sub_pointer s_8_0 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
            (same_block !sc_0_0
            (shift s_8_0
            (Bit_uint64.to_int
            (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76)))))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8_0
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          ((#"/home/work/workspace/self/verker/strnlen.c" 6 20 30#
           (Bit_uint64.(<=) (#"whole_program.jc" 4236 42 55#
           "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_count_4))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 25 48#
          (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init)))))))))))
          } ;
         try
          begin
          begin
          begin
          (tmp_0_18 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 4272 62 75# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 4275 52 65# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker/strnlen.c" 14 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strnlen.c" 14 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_76 !sc_0_0 ) ))
             (#"whole_program.jc" 4277 29 41# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_16_exc ())))
           else (raise (Goto_while_0_break_16_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 4280 50 62# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_77 -> () end end end;
       (raise (Goto_while_0_break_16_exc ())) end with
      Goto_while_0_break_16_exc _jessie_75 ->
      'While_0_break_16:
      'While_0_break_16:
      begin
      ();
       begin
       (__retres_12 :=
        (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
         (sub_pointer_  !sc_0_0 s_8_0 )) )));
        begin (return := !__retres_12); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
  let strnlen_ensures_default
  #"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
  "expl:Function strnlen, default behavior" =
  fun
   (s_8_0 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_76_alloc_table :
   (alloc_table voidP)) (voidP_s_8_76_tag_table : (tag_table voidP))
   (charP_charM_s_8_76 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_8_76_alloc_table s_8_0) ->
     (((=) (typeof voidP_s_8_76_tag_table s_8_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_76_alloc_table s_8_0) i) /\
       ((<) i (offset_max voidP_s_8_76_alloc_table s_8_0))) ->
       ((=) (typeof voidP_s_8_76_tag_table (shift s_8_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
   (valid_strn s_8_0 count_4 voidP_s_8_76_alloc_table charP_charM_s_8_76))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnlen.h" 115 12 40#
     "expl:Ensures clause"
     (Bit_uint64.(=) result (strnlen s_8_0 count_4 charP_charM_s_8_76)))) }
   diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (check {
    (#"whole_program.jc" 4208 10 546# "expl:Behavior disjointness check"
    (not
    ((exists i_43_0 : int.
      (((<=) (0) i_43_0) /\
      (((<=) i_43_0 (Bit_uint64.to_int !mutable_count_4)) /\
      (Int8.(=) (select charP_charM_s_8_76 (shift s_8_0 i_43_0))
      (#"whole_program.jc" 4211 63 74# "expl:Integer cast" (Int8.of_int
      (0)))))))
    /\
    (forall i_42_0 : int.
     ((((<=) (0) i_42_0) /\
      ((<=) i_42_0 (Bit_uint64.to_int !mutable_count_4))) ->
      (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_42_0))
      (#"whole_program.jc" 4215 64 75# "expl:Integer cast" (Int8.of_int
      (0))))))))) });
     (check {
     (#"whole_program.jc" 4217 10 521# "expl:Behavior completeness check"
     ((forall i_42_1 : int.
       ((((<=) (0) i_42_1) /\
        ((<=) i_42_1 (Bit_uint64.to_int !mutable_count_4))) ->
        (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_42_1))
        (#"whole_program.jc" 4220 60 71# "expl:Integer cast" (Int8.of_int
        (0))))))
     \/
     (exists i_43_1 : int.
      (((<=) (0) i_43_1) /\
      (((<=) i_43_1 (Bit_uint64.to_int !mutable_count_4)) /\
      (Int8.(=) (select charP_charM_s_8_76 (shift s_8_0 i_43_1))
      (#"whole_program.jc" 4224 61 72# "expl:Integer cast" (Int8.of_int
      (0))))))))) });
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_18 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_12 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8_0);
       'Loop_67:
       loop
       invariant
         { ((#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
            (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
            ((#"/home/work/workspace/self/verker/strnlen.c" 6 20 30#
             (Bit_uint64.(<=) (#"whole_program.jc" 4236 42 55#
             "expl:Integer cast" (Bit_uint64.of_int_const 0))
             !mutable_count_4))
            /\
            (#"/home/work/workspace/self/verker/strnlen.c" 6 25 48#
            (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init))))))
           &&
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
            (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
            ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
             (same_block s_8_0 !sc_0_0))
            /\
            (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
            ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
             ((<=) (sub_pointer s_8_0 !sc_0_0) (0)))
            /\
            (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
            ((#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
             (same_block !sc_0_0
             (shift s_8_0
             (Bit_uint64.to_int
             (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76)))))
            /\
            (#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
            ((<=)
            (sub_pointer !sc_0_0
            (shift s_8_0
            (Bit_uint64.to_int
            (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))))
            (0))))))))))
           &&
           ((#"/home/work/workspace/self/verker/strnlen.c" 8 20 54#
            ((=) (sub_pointer !sc_0_0 s_8_0)
            (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
            (Bit_uint64.to_int !mutable_count_4))))
           &&
           ((#"/home/work/workspace/self/verker/strnlen.c" 9 20 41#
            (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_76_alloc_table
            charP_charM_s_8_76))
           &&
           ((#"/home/work/workspace/self/verker/strnlen.c" 10 20 78#
            ((=)
            (Bit_uint64.to_int
            (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))
            (Int.(+)
            (Bit_uint64.to_int
            (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_76))
            (sub_pointer !sc_0_0 s_8_0))))
           &&
           (#"/home/work/workspace/self/verker/strnlen.c" 11 20 71#
           (forall i_45 : int.
            ((((<=) (0) i_45) /\ ((<) i_45 (sub_pointer !sc_0_0 s_8_0))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_45))
             (#"whole_program.jc" 4265 53 64# "expl:Integer cast"
             (Int8.of_int (0)))))))))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          begin
          begin
          (tmp_0_18 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 4272 62 75# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 4275 52 65# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker/strnlen.c" 14 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strnlen.c" 14 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_76 !sc_0_0 ) ))
             (#"whole_program.jc" 4277 29 41# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_16_exc ())))
           else (raise (Goto_while_0_break_16_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 4280 50 62# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_77 -> () end end end;
       (raise (Goto_while_0_break_16_exc ())) end with
      Goto_while_0_break_16_exc _jessie_75 ->
      'While_0_break_16:
      'While_0_break_16:
      begin
      ();
       begin
       (__retres_12 :=
        (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
         (sub_pointer_  !sc_0_0 s_8_0 )) )));
        begin (return := !__retres_12); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
  let strnlen_ensures_null_byte
  #"/home/work/workspace/self/verker/strnlen.h" 126 7 43#
  "expl:Function strnlen, behavior null_byte" =
  fun
   (s_8_0 : (pointer voidP)) (count_4 : Uint64.t) (voidP_s_8_76_alloc_table :
   (alloc_table voidP)) (voidP_s_8_76_tag_table : (tag_table voidP))
   (charP_charM_s_8_76 : (memory voidP Int8.t)) 
   requires {
   ((exists i_43 : int.
     (((<=) (0) i_43) /\
     (((<=) i_43 (Bit_uint64.to_int count_4)) /\
     (Int8.(=) (select charP_charM_s_8_76 (shift s_8_0 i_43))
     (#"whole_program.jc" 4194 37 48# "expl:Integer cast" (Int8.of_int (0)))))))
   /\
   (((allocated voidP_s_8_76_alloc_table s_8_0) ->
     (((=) (typeof voidP_s_8_76_tag_table s_8_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_8_76_alloc_table s_8_0) i) /\
       ((<) i (offset_max voidP_s_8_76_alloc_table s_8_0))) ->
       ((=) (typeof voidP_s_8_76_tag_table (shift s_8_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
   (valid_strn s_8_0 count_4 voidP_s_8_76_alloc_table charP_charM_s_8_76))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
      "expl:Ensures clause"
      (Int8.(=)
      (select charP_charM_s_8_76 (shift s_8_0 (Bit_uint64.to_int result)))
      (#"whole_program.jc" 4196 35 46# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker/strnlen.h" 119 15 67#
     "expl:Ensures clause"
     (forall i_44 : int.
      ((((<=) (0) i_44) /\ ((<) i_44 (Bit_uint64.to_int result))) ->
       (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_44))
       (#"whole_program.jc" 4201 40 51# "expl:Integer cast" (Int8.of_int
       (0))))))))))) } diverges  ->
   (let mutable_count_4 = ref count_4 in
   'Init:
   (let return = ref (Unsafe_bit_uint64.any_  () ) in
   try
    begin
    (); ();
     (let sc_0_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_18 = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres_12 = ref (Unsafe_bit_uint64.any_  () ) in
     try
      begin
      (sc_0_0 := s_8_0);
       'Loop_68:
       loop
       invariant { (#"whole_program.jc" 4234 6 2522# true) } 
        begin
        any unit
        requires { true } reads { mutable_count_4, s_8_0 }
        ensures {
          ((#"/home/work/workspace/self/verker/strnlen.c" 11 20 71#
           (forall i_45 : int.
            ((((<=) (0) i_45) /\ ((<) i_45 (sub_pointer !sc_0_0 s_8_0))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_45))
             (#"whole_program.jc" 4265 53 64# "expl:Integer cast"
             (Int8.of_int (0)))))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 10 20 78#
           ((=)
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))
           (Int.(+)
           (Bit_uint64.to_int
           (strnlen !sc_0_0 !mutable_count_4 charP_charM_s_8_76))
           (sub_pointer !sc_0_0 s_8_0))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 9 20 41#
           (valid_strn !sc_0_0 !mutable_count_4 voidP_s_8_76_alloc_table
           charP_charM_s_8_76))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 8 20 54#
           ((=) (sub_pointer !sc_0_0 s_8_0)
           (Int.(-) (Bit_uint64.to_int (at !mutable_count_4 'Init))
           (Bit_uint64.to_int !mutable_count_4))))
          /\
          ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            (same_block s_8_0 !sc_0_0))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 20 27#
            ((<=) (sub_pointer s_8_0 !sc_0_0) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 20 60#
           ((#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
            (same_block !sc_0_0
            (shift s_8_0
            (Bit_uint64.to_int
            (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76)))))
           /\
           (#"/home/work/workspace/self/verker/strnlen.c" 7 25 60#
           ((<=)
           (sub_pointer !sc_0_0
           (shift s_8_0
           (Bit_uint64.to_int
           (strnlen s_8_0 (at !mutable_count_4 'Init) charP_charM_s_8_76))))
           (0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          (#"/home/work/workspace/self/verker/strnlen.c" 6 20 48#
          ((#"/home/work/workspace/self/verker/strnlen.c" 6 20 30#
           (Bit_uint64.(<=) (#"whole_program.jc" 4236 42 55#
           "expl:Integer cast" (Bit_uint64.of_int_const 0)) !mutable_count_4))
          /\
          (#"/home/work/workspace/self/verker/strnlen.c" 6 25 48#
          (Bit_uint64.(<=) !mutable_count_4 (at !mutable_count_4 'Init)))))))))))
          } ;
         try
          begin
          begin
          begin
          (tmp_0_18 := !mutable_count_4);
           begin
           (mutable_count_4 :=
            (Unsafe_bit_uint64.(-%)  !mutable_count_4
             (#"whole_program.jc" 4272 62 75# "expl:Integer cast"
             (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
           (if
           (#"/home/work/workspace/self/verker/strnlen.c" 14 14 25#
           (Unsafe_bit_uint64.(<>)  !tmp_0_18
            (#"whole_program.jc" 4275 52 65# "expl:Integer cast"
            (Unsafe_bit_uint64.of_int_const 0)) ))
           then
            (if
            (#"/home/work/workspace/self/verker/strnlen.c" 14 31 42#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strnlen.c" 14 31 34#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast 
              (acc  charP_charM_s_8_76 !sc_0_0 ) ))
             (#"whole_program.jc" 4277 29 41# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_16_exc ())))
           else (raise (Goto_while_0_break_16_exc ())));
           (sc_0_0 :=
            (shift_  !sc_0_0
             (Unsafe_int32.to_int 
              (#"whole_program.jc" 4280 50 62# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_77 -> () end end end;
       (raise (Goto_while_0_break_16_exc ())) end with
      Goto_while_0_break_16_exc _jessie_75 ->
      'While_0_break_16:
      'While_0_break_16:
      begin
      ();
       begin
       (__retres_12 :=
        (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
        "expl:Integer cast"
        (Unsafe_bit_uint64.of_int 
         (#"/home/work/workspace/self/verker/strnlen.c" 17 8 14#
         (sub_pointer_  !sc_0_0 s_8_0 )) )));
        begin (return := !__retres_12); (raise Return) end end end end)));
     absurd  end with Return -> !return end))
  
end

theory Axiomatic_StrPBrk

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  function strpbrk (pointer voidP) (pointer voidP) : (pointer
  voidP)
  
  
  lemma Strpbrk_strend
  #"/home/work/workspace/self/verker/strpbrk.h" 12 7 107#
  "expl:Lemma strpbrk_strend" :
  (forall voidP_cs_77_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_cs_77_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strpbrk.h" 12 7 107#
    (forall cs_0_0 : (pointer voidP).
     (forall ct_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_cs_77_alloc_table_at_L cs_0_0) (0)) /\
        (((>=) (offset_max voidP_cs_77_alloc_table_at_L cs_0_0) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_cs_77_at_L cs_0_0)
       (#"whole_program.jc" 4300 35 46# "expl:Integer cast" (Int8.of_int
       (0))))) -> ((=) (strpbrk cs_0_0 ct_0_0) null)))))))
  
  lemma Strpbrk_empty_ct
  #"/home/work/workspace/self/verker/strpbrk.h" 17 7 127#
  "expl:Lemma strpbrk_empty_ct" :
  (forall voidP_ct_78_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_77_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_78_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_77_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strpbrk.h" 17 7 127#
      (forall cs_1_1 : (pointer voidP).
       (forall ct_1_1 : (pointer voidP).
        (((valid_str cs_1_1 voidP_cs_77_alloc_table_at_L
          charP_charM_cs_77_at_L)
         /\
         ((valid_str ct_1_1 voidP_ct_78_alloc_table_at_L
          charP_charM_ct_78_at_L)
         /\
         (Int8.(=) (select charP_charM_ct_78_at_L ct_1_1)
         (#"whole_program.jc" 4307 35 46# "expl:Integer cast" (Int8.of_int
         (0)))))) -> ((=) (strpbrk cs_1_1 ct_1_1) null)))))))))
  
  lemma Strpbrk_range #"/home/work/workspace/self/verker/strpbrk.h" 22 7 174#
  "expl:Lemma strpbrk_range" :
  (forall voidP_ct_78_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_77_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_78_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_77_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strpbrk.h" 22 7 174#
      (forall cs_2 : (pointer voidP).
       (forall ct_2_0 : (pointer voidP).
        (((valid_str cs_2 voidP_cs_77_alloc_table_at_L
          charP_charM_cs_77_at_L)
         /\
         (valid_str ct_2_0 voidP_ct_78_alloc_table_at_L
         charP_charM_ct_78_at_L)) ->
         ((((=) (strpbrk cs_2 ct_2_0) null) /\
          (not
          ((same_block cs_2 (strpbrk cs_2 ct_2_0)) /\
          (((<=) (sub_pointer cs_2 (strpbrk cs_2 ct_2_0)) (0)) /\
          ((same_block (strpbrk cs_2 ct_2_0)
           (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_77_at_L))))
          /\
          ((<)
          (sub_pointer (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_77_at_L))))
          (0)))))))
         \/
         ((same_block cs_2 (strpbrk cs_2 ct_2_0)) /\
         (((<=) (sub_pointer cs_2 (strpbrk cs_2 ct_2_0)) (0)) /\
         ((same_block (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_77_at_L))))
         /\
         (((<)
          (sub_pointer (strpbrk cs_2 ct_2_0)
          (shift cs_2 (Uint64.to_int (strlen cs_2 charP_charM_cs_77_at_L))))
          (0))
         /\ (not ((=) (strpbrk cs_2 ct_2_0) null)))))))))))))))
  
  lemma Strpbrk_shift1
  #"/home/work/workspace/self/verker/strpbrk.h" 28 7 173#
  "expl:Lemma strpbrk_shift1" :
  (forall voidP_ct_78_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_77_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_78_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_77_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strpbrk.h" 28 7 173#
      (forall cs_3 : (pointer voidP).
       (forall ct_3 : (pointer voidP).
        (((valid_str cs_3 voidP_cs_77_alloc_table_at_L
          charP_charM_cs_77_at_L)
         /\
         ((valid_str ct_3 voidP_ct_78_alloc_table_at_L
          charP_charM_ct_78_at_L)
         /\
         ((Int8.(<>) (select charP_charM_cs_77_at_L cs_3)
          (#"whole_program.jc" 4338 36 47# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (not
         (in_array ct_3 (select charP_charM_cs_77_at_L cs_3)
         charP_charM_ct_78_at_L))))) ->
         ((=) (strpbrk cs_3 ct_3) (strpbrk (shift cs_3 (1)) ct_3))))))))))
  
  lemma Strpbrk_stop_in_ct
  #"/home/work/workspace/self/verker/strpbrk.h" 34 7 155#
  "expl:Lemma strpbrk_stop_in_ct" :
  (forall voidP_ct_78_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_cs_77_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_ct_78_at_L : (memory voidP Int8.t).
     (forall charP_charM_cs_77_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strpbrk.h" 34 7 155#
      (forall cs_4 : (pointer voidP).
       (forall ct_4 : (pointer voidP).
        (((valid_str cs_4 voidP_cs_77_alloc_table_at_L
          charP_charM_cs_77_at_L)
         /\
         ((valid_str ct_4 voidP_ct_78_alloc_table_at_L
          charP_charM_ct_78_at_L)
         /\
         ((Int8.(<>) (select charP_charM_cs_77_at_L cs_4)
          (#"whole_program.jc" 4346 36 47# "expl:Integer cast" (Int8.of_int
          (0))))
         /\
         (in_array ct_4 (select charP_charM_cs_77_at_L cs_4)
         charP_charM_ct_78_at_L)))) -> ((=) (strpbrk cs_4 ct_4) cs_4)))))))))
  
end

module Function_strpbrk_0_safety
#"/home/work/workspace/self/verker/strpbrk.c" 3 5 45# "expl:strpbrk, safety"

  use enum.Uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strpbrk_0 #"/home/work/workspace/self/verker/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, safety" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_80_alloc_table : (alloc_table voidP))
   (voidP_ct_1_81_alloc_table : (alloc_table voidP)) (voidP_ct_1_81_tag_table
   : (tag_table voidP)) (voidP_cs_1_80_tag_table : (tag_table voidP))
   (charP_charM_cs_1_80 : (memory voidP Int8.t)) (charP_charM_ct_1_81 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_1_81_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_81_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_81_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_81_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_81_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_80_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_80_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_80_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_80_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_80_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4353 12 95#
   ((#"/home/work/workspace/self/verker/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
   /\
   (#"/home/work/workspace/self/verker/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_81_alloc_table charP_charM_ct_1_81)))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 :=
        (let _jessie_1030 = cs_1_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strpbrk.c" 16 6 14#
        "expl:Pointer index bounds" true) }); _jessie_1030 end));
        'Loop_77:
        loop
        invariant { (#"whole_program.jc" 4541 6 14918# true) }
          variant { (#"/home/work/workspace/self/verker/strpbrk.c" 14 18 41#
            (Int.(-) (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))
            (sub_pointer !sc1 cs_1_0))) }
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 9 20 156#
            (forall p_18 : (pointer voidP).
             (forall t_7 : (pointer voidP).
              (((same_block cs_1_0 p_18) /\
               (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
               ((same_block p_18 !sc1) /\
               (((<) (sub_pointer p_18 !sc1) (0)) /\
               ((same_block ct_1_0 t_7) /\
               (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
               ((same_block t_7
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
               /\
               ((<)
               (sub_pointer t_7
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_80 p_18)
               (select charP_charM_ct_1_81 t_7))))))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 28#
           (Safe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Safe_int32_of_Safe_int8.cast 
             (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 20#
             "expl:Pointer dereference"
             (acc  voidP_cs_1_80_alloc_table charP_charM_cs_1_80 !sc1 )) ))
            (#"whole_program.jc" 4579 29 41# "expl:Integer cast"
            (Safe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_17_exc ())));
            try
             begin
             (sc2 :=
              (let _jessie_1031 = ct_1_0 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strpbrk.c" 23 7 15#
              "expl:Pointer index bounds" true) }); _jessie_1031 end));
              'Loop_78:
              loop
              invariant { (#"whole_program.jc" 4584 15 8560# true) }
                variant {
                  (#"/home/work/workspace/self/verker/strpbrk.c" 21 19 42#
                  (Int.(-)
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))
                  (sub_pointer !sc2 ct_1_0))) }
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81) ->
                   (in_array !sc2 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81)))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 19 21 66#
                  (forall t_8 : (pointer voidP).
                   (((same_block ct_1_0 t_8) /\
                    (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                    ((same_block t_8 !sc2) /\
                    ((<) (sub_pointer t_8 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                    (select charP_charM_ct_1_81 t_8)))))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_81_alloc_table
                  charP_charM_ct_1_81))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 29#
                 (Safe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Safe_int32_of_Safe_int8.cast 
                   (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 21#
                   "expl:Pointer dereference"
                   (acc  voidP_ct_1_81_alloc_table charP_charM_ct_1_81 !sc2 ))
                   ))
                  (#"whole_program.jc" 4617 38 50# "expl:Integer cast"
                  (Safe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_1_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 19#
                  (Safe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 11#
                    "expl:Pointer dereference"
                    (acc  voidP_cs_1_80_alloc_table charP_charM_cs_1_80 !sc1
                     )) ))
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strpbrk.c" 24 15 19#
                    "expl:Pointer dereference"
                    (acc  voidP_ct_1_81_alloc_table charP_charM_ct_1_81 !sc2
                     )) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker/strpbrk.c" 25 15 154#
                     (exists p_19 : (pointer voidP).
                      (exists t_9 : (pointer voidP).
                       ((same_block cs_1_0 p_19) /\
                       (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                       ((same_block p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                       /\
                       (((<)
                        (sub_pointer p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_9) /\
                       (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
                       ((same_block t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                       /\
                       (((<)
                        (sub_pointer t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_80 p_19)
                        (select charP_charM_ct_1_81 t_9))
                       /\ (((=) p_19 !sc1) /\ ((=) t_9 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strpbrk.c" 31 15 112#
                      (forall p_20 : (pointer voidP).
                       (forall t_10 : (pointer voidP).
                        (((same_block cs_1_0 p_20) /\
                         (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                         ((same_block p_20 !sc1) /\
                         (((<) (sub_pointer p_20 !sc1) (0)) /\
                         ((same_block ct_1_0 t_10) /\
                         (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                         ((same_block t_10
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         /\
                         ((<)
                         (sub_pointer t_10
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_80 p_20)
                         (select charP_charM_ct_1_81 t_10)))))) } ; () end;
                    begin
                    (__retres_13 :=
                     (let _jessie_1032 = !sc1 in
                     begin
                     (assert {
                     (#"/home/work/workspace/self/verker/strpbrk.c" 36 4 23#
                     "expl:Pointer index bounds" true) }); _jessie_1032 end));
                     (raise (Goto_return_label_7_exc ())) end end else ());
                  (sc2 :=
                   (let _jessie_1033 =
                   (shift_typesafe  !sc2
                    (Safe_int32.to_int 
                     (#"whole_program.jc" 4706 57 69# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) ) in
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker/strpbrk.c" 23 31 36#
                   "expl:Pointer index bounds" true) }); _jessie_1033 end))
                 end; (raise (Loop_continue_exc ())) end with
                 Loop_continue_exc _jessie_82 -> () end end end;
              (raise (Goto_while_1_break_1_exc ())) end with
             Goto_while_1_break_1_exc _jessie_78 ->
             'While_1_break_1:
             'While_1_break_1:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 38 13 70#
                (forall t_11 : (pointer voidP).
                 (((same_block ct_1_0 t_11) /\
                  (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                  ((same_block t_11
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                  /\
                  ((<)
                  (sub_pointer t_11
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                  (select charP_charM_ct_1_81 t_11))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 39 13 90#
                (forall p_21 : (pointer voidP).
                 (forall t_12 : (pointer voidP).
                  (((same_block cs_1_0 p_21) /\
                   (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
                   ((same_block p_21 !sc1) /\
                   (((<=) (sub_pointer p_21 !sc1) (0)) /\
                   ((same_block ct_1_0 t_12) /\
                   (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                   ((same_block t_12
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                   /\
                   ((<)
                   (sub_pointer t_12
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_80 p_21)
                   (select charP_charM_ct_1_81 t_12)))))) } ; () end end end;
            (sc1 :=
             (let _jessie_1034 =
             (shift_typesafe  !sc1
              (Safe_int32.to_int 
               (#"whole_program.jc" 4765 48 60# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strpbrk.c" 16 30 35#
             "expl:Pointer index bounds" true) }); _jessie_1034 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_84 -> () end end end;
        (raise (Goto_while_0_break_17_exc ())) end with
       Goto_while_0_break_17_exc _jessie_79 ->
       'While_0_break_17:
       'While_0_break_17:
       begin
       ();
        (__retres_13 :=
         (let _jessie_1035 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strpbrk.c" 41 1 20#
         "expl:Pointer index bounds" true) }); _jessie_1035 end)) end end;
       (raise (Goto_return_label_7_exc ())) end with Goto_return_label_7_exc
      _jessie_80 ->
      'Return_label_7:
      'Return_label_7:
      begin
      (return :=
       (let _jessie_1036 = !__retres_13 in
       begin
       (assert {
       (#"whole_program.jc" 4771 7 25# "expl:Pointer index bounds" true) });
        _jessie_1036 end)); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
end

module Function_strpbrk_0_behaviors
#"/home/work/workspace/self/verker/strpbrk.c" 3 5 45#
"expl:strpbrk, behaviors"

  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strpbrk_ensures_default
  #"/home/work/workspace/self/verker/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, default behavior" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_80_alloc_table : (alloc_table voidP))
   (voidP_ct_1_81_alloc_table : (alloc_table voidP)) (voidP_ct_1_81_tag_table
   : (tag_table voidP)) (voidP_cs_1_80_tag_table : (tag_table voidP))
   (charP_charM_cs_1_80 : (memory voidP Int8.t)) (charP_charM_ct_1_81 :
   (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_1_81_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_81_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_81_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_81_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_81_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_80_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_80_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_80_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_80_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_80_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4353 12 95#
   ((#"/home/work/workspace/self/verker/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
   /\
   (#"/home/work/workspace/self/verker/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_81_alloc_table charP_charM_ct_1_81)))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strpbrk.h" 50 12 38#
     "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))) } diverges 
   ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 4431 10 3441# "expl:Behavior disjointness check"
    (not
    ((exists p_16_0 : (pointer voidP).
      (exists t_4_1 : (pointer voidP).
       ((same_block cs_1_0 p_16_0) /\
       (((<=) (sub_pointer cs_1_0 p_16_0) (0)) /\
       ((same_block p_16_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
       /\
       (((<)
        (sub_pointer p_16_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
        (0))
       /\
       ((same_block ct_1_0 t_4_1) /\
       (((<=) (sub_pointer ct_1_0 t_4_1) (0)) /\
       ((same_block t_4_1
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       /\
       (((<)
        (sub_pointer t_4_1
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_80 p_16_0)
       (select charP_charM_ct_1_81 t_4_1))))))))))))
    /\
    (forall p_15_1 : (pointer voidP).
     (forall t_3_1 : (pointer voidP).
      (((same_block cs_1_0 p_15_1) /\
       (((<=) (sub_pointer cs_1_0 p_15_1) (0)) /\
       ((same_block p_15_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
       /\
       (((<)
        (sub_pointer p_15_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
        (0))
       /\
       ((same_block ct_1_0 t_3_1) /\
       (((<=) (sub_pointer ct_1_0 t_3_1) (0)) /\
       ((same_block t_3_1
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       /\
       ((<)
       (sub_pointer t_3_1
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       (0))))))))) ->
       (Int8.(<>) (select charP_charM_cs_1_80 p_15_1)
       (select charP_charM_ct_1_81 t_3_1)))))))) });
     (check {
     (#"whole_program.jc" 4482 10 3290# "expl:Behavior completeness check"
     ((forall p_15_2 : (pointer voidP).
       (forall t_3_2 : (pointer voidP).
        (((same_block cs_1_0 p_15_2) /\
         (((<=) (sub_pointer cs_1_0 p_15_2) (0)) /\
         ((same_block p_15_2
          (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
         /\
         (((<)
          (sub_pointer p_15_2
          (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
          (0))
         /\
         ((same_block ct_1_0 t_3_2) /\
         (((<=) (sub_pointer ct_1_0 t_3_2) (0)) /\
         ((same_block t_3_2
          (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
         /\
         ((<)
         (sub_pointer t_3_2
         (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
         (0))))))))) ->
         (Int8.(<>) (select charP_charM_cs_1_80 p_15_2)
         (select charP_charM_ct_1_81 t_3_2)))))
     \/
     (exists p_16_1 : (pointer voidP).
      (exists t_4_2 : (pointer voidP).
       ((same_block cs_1_0 p_16_1) /\
       (((<=) (sub_pointer cs_1_0 p_16_1) (0)) /\
       ((same_block p_16_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
       /\
       (((<)
        (sub_pointer p_16_1
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
        (0))
       /\
       ((same_block ct_1_0 t_4_2) /\
       (((<=) (sub_pointer ct_1_0 t_4_2) (0)) /\
       ((same_block t_4_2
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       /\
       (((<)
        (sub_pointer t_4_2
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_80 p_16_1)
       (select charP_charM_ct_1_81 t_4_2)))))))))))))) });
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_71:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
             (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
              (same_block cs_1_0 !sc1))
             /\
             (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
              ((<=) (sub_pointer cs_1_0 !sc1) (0)))
             /\
             (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
             ((#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
              (same_block !sc1
              (shift cs_1_0
              (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
             /\
             (#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
             ((<=)
             (sub_pointer !sc1
             (shift cs_1_0
             (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strpbrk.c" 8 20 34#
             (valid_str !sc1 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
            &&
            ((#"/home/work/workspace/self/verker/strpbrk.c" 9 20 156#
             (forall p_18 : (pointer voidP).
              (forall t_7 : (pointer voidP).
               (((same_block cs_1_0 p_18) /\
                (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
                ((same_block p_18 !sc1) /\
                (((<) (sub_pointer p_18 !sc1) (0)) /\
                ((same_block ct_1_0 t_7) /\
                (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
                ((same_block t_7
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                ((<)
                (sub_pointer t_7
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                ->
                (Int8.(<>) (select charP_charM_cs_1_80 p_18)
                (select charP_charM_ct_1_81 t_7))))))
            &&
            (#"/home/work/workspace/self/verker/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))))) } 
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_80 !sc1 ) ))
            (#"whole_program.jc" 4579 29 41# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_17_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_72:
              loop
              invariant
                { ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                   (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                    (same_block ct_1_0 !sc2))
                   /\
                   (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                    ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                   /\
                   (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                   ((#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                    (same_block !sc2
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))))
                   /\
                   (#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                   ((<=)
                   (sub_pointer !sc2
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0))))))))))
                  &&
                  ((#"/home/work/workspace/self/verker/strpbrk.c" 18 21 35#
                   (valid_str !sc2 voidP_ct_1_81_alloc_table
                   charP_charM_ct_1_81))
                  &&
                  ((#"/home/work/workspace/self/verker/strpbrk.c" 19 21 66#
                   (forall t_8 : (pointer voidP).
                    (((same_block ct_1_0 t_8) /\
                     (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                     ((same_block t_8 !sc2) /\
                     ((<) (sub_pointer t_8 !sc2) (0))))) ->
                     (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                     (select charP_charM_ct_1_81 t_8)))))
                  &&
                  (#"/home/work/workspace/self/verker/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81) ->
                   (in_array !sc2 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81)))))) } 
               begin
               any unit requires { true } ensures { true } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_81 !sc2 ) ))
                  (#"whole_program.jc" 4617 38 50# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_1_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_80 !sc1 ) ))
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_81 !sc2 ) )) ))
                  then
                   begin
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker/strpbrk.c" 25 15 154#
                   "expl:Assertion in line 25"
                   (exists p_19 : (pointer voidP).
                    (exists t_9 : (pointer voidP).
                     ((same_block cs_1_0 p_19) /\
                     (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                     ((same_block p_19
                      (shift cs_1_0
                      (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                     /\
                     (((<)
                      (sub_pointer p_19
                      (shift cs_1_0
                      (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                      (0))
                     /\
                     ((same_block ct_1_0 t_9) /\
                     (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
                     ((same_block t_9
                      (shift ct_1_0
                      (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                     /\
                     (((<)
                      (sub_pointer t_9
                      (shift ct_1_0
                      (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                      (0))
                     /\
                     ((Int8.(=) (select charP_charM_cs_1_80 p_19)
                      (select charP_charM_ct_1_81 t_9))
                     /\ (((=) p_19 !sc1) /\ ((=) t_9 !sc2)))))))))))))) });
                    () end;
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker/strpbrk.c" 31 15 112#
                    "expl:Assertion in line 31"
                    (forall p_20 : (pointer voidP).
                     (forall t_10 : (pointer voidP).
                      (((same_block cs_1_0 p_20) /\
                       (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                       ((same_block p_20 !sc1) /\
                       (((<) (sub_pointer p_20 !sc1) (0)) /\
                       ((same_block ct_1_0 t_10) /\
                       (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                       ((same_block t_10
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                       /\
                       ((<)
                       (sub_pointer t_10
                       (shift ct_1_0
                       (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                       (0))))))))) ->
                       (Int8.(<>) (select charP_charM_cs_1_80 p_20)
                       (select charP_charM_ct_1_81 t_10)))))) }); () end;
                    begin
                    (__retres_13 := !sc1);
                     (raise (Goto_return_label_7_exc ())) end end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 4706 57 69# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_82 -> () end end end;
              (raise (Goto_while_1_break_1_exc ())) end with
             Goto_while_1_break_1_exc _jessie_78 ->
             'While_1_break_1:
             'While_1_break_1:
             begin
             ();
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strpbrk.c" 38 13 70#
              "expl:Assertion in line 38"
              (forall t_11 : (pointer voidP).
               (((same_block ct_1_0 t_11) /\
                (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                ((same_block t_11
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                ((<)
                (sub_pointer t_11
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))
                ->
                (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                (select charP_charM_ct_1_81 t_11))))) }); () end;
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strpbrk.c" 39 13 90#
              "expl:Assertion in line 39"
              (forall p_21 : (pointer voidP).
               (forall t_12 : (pointer voidP).
                (((same_block cs_1_0 p_21) /\
                 (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
                 ((same_block p_21 !sc1) /\
                 (((<=) (sub_pointer p_21 !sc1) (0)) /\
                 ((same_block ct_1_0 t_12) /\
                 (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                 ((same_block t_12
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                 /\
                 ((<)
                 (sub_pointer t_12
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_80 p_21)
                 (select charP_charM_ct_1_81 t_12)))))) }); () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 4765 48 60# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_84 -> () end end end;
        (raise (Goto_while_0_break_17_exc ())) end with
       Goto_while_0_break_17_exc _jessie_79 ->
       'While_0_break_17:
       'While_0_break_17: begin (); (__retres_13 := (null  )) end end;
       (raise (Goto_return_label_7_exc ())) end with Goto_return_label_7_exc
      _jessie_80 ->
      'Return_label_7:
      'Return_label_7: begin (return := !__retres_13); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let strpbrk_ensures_found
  #"/home/work/workspace/self/verker/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, behavior found" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_80_alloc_table : (alloc_table voidP))
   (voidP_ct_1_81_alloc_table : (alloc_table voidP)) (voidP_ct_1_81_tag_table
   : (tag_table voidP)) (voidP_cs_1_80_tag_table : (tag_table voidP))
   (charP_charM_cs_1_80 : (memory voidP Int8.t)) (charP_charM_ct_1_81 :
   (memory voidP Int8.t)) 
   requires {
   ((exists p_16 : (pointer voidP).
     (exists t_4_0 : (pointer voidP).
      ((same_block cs_1_0 p_16) /\
      (((<=) (sub_pointer cs_1_0 p_16) (0)) /\
      ((same_block p_16
       (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
      /\
      (((<)
       (sub_pointer p_16
       (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
       (0))
      /\
      ((same_block ct_1_0 t_4_0) /\
      (((<=) (sub_pointer ct_1_0 t_4_0) (0)) /\
      ((same_block t_4_0
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
      /\
      (((<)
       (sub_pointer t_4_0
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       (0))
      /\
      (Int8.(=) (select charP_charM_cs_1_80 p_16)
      (select charP_charM_ct_1_81 t_4_0))))))))))))
   /\
   (((allocated voidP_ct_1_81_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_81_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_81_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_81_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_81_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_80_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_80_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_80_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_80_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_80_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4353 12 95#
   ((#"/home/work/workspace/self/verker/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
   /\
   (#"/home/work/workspace/self/verker/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_81_alloc_table charP_charM_ct_1_81))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
      "expl:Ensures clause" (same_block cs_1_0 result))
     /\
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
      "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
      "expl:Ensures clause"
      (same_block result
      (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
     /\
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
      "expl:Ensures clause"
      ((<)
      (sub_pointer result
      (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
      (0)))
     /\
     (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strpbrk.h" 57 15 76#
      "expl:Ensures clause"
      (exists t_5_0 : (pointer voidP).
       ((same_block ct_1_0 t_5_0) /\
       (((<=) (sub_pointer ct_1_0 t_5_0) (0)) /\
       ((same_block t_5_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       /\
       (((<=)
        (sub_pointer t_5_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
        (0))
       /\
       (Int8.(=) (select charP_charM_cs_1_80 result)
       (select charP_charM_ct_1_81 t_5_0))))))))
     /\
     (#"/home/work/workspace/self/verker/strpbrk.h" 58 15 140#
     "expl:Ensures clause"
     (forall p_17 : (pointer voidP).
      (forall t_6 : (pointer voidP).
       (((same_block cs_1_0 p_17) /\
        (((<=) (sub_pointer cs_1_0 p_17) (0)) /\
        ((same_block p_17 result) /\
        (((<) (sub_pointer p_17 result) (0)) /\
        ((same_block ct_1_0 t_6) /\
        (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
        ((same_block t_6
         (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
        /\
        ((<)
        (sub_pointer t_6
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
        (0))))))))) ->
        (Int8.(<>) (select charP_charM_cs_1_80 p_17)
        (select charP_charM_ct_1_81 t_6)))))))))))))))))) } diverges  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_73:
        loop
        invariant { (#"whole_program.jc" 4541 6 14918# true) } 
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 9 20 156#
            (forall p_18 : (pointer voidP).
             (forall t_7 : (pointer voidP).
              (((same_block cs_1_0 p_18) /\
               (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
               ((same_block p_18 !sc1) /\
               (((<) (sub_pointer p_18 !sc1) (0)) /\
               ((same_block ct_1_0 t_7) /\
               (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
               ((same_block t_7
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
               /\
               ((<)
               (sub_pointer t_7
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_80 p_18)
               (select charP_charM_ct_1_81 t_7))))))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_80 !sc1 ) ))
            (#"whole_program.jc" 4579 29 41# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_17_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_74:
              loop
              invariant { (#"whole_program.jc" 4584 15 8560# true) } 
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81) ->
                   (in_array !sc2 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81)))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 19 21 66#
                  (forall t_8 : (pointer voidP).
                   (((same_block ct_1_0 t_8) /\
                    (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                    ((same_block t_8 !sc2) /\
                    ((<) (sub_pointer t_8 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                    (select charP_charM_ct_1_81 t_8)))))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_81_alloc_table
                  charP_charM_ct_1_81))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_81 !sc2 ) ))
                  (#"whole_program.jc" 4617 38 50# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_1_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_80 !sc1 ) ))
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_81 !sc2 ) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker/strpbrk.c" 25 15 154#
                     (exists p_19 : (pointer voidP).
                      (exists t_9 : (pointer voidP).
                       ((same_block cs_1_0 p_19) /\
                       (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                       ((same_block p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                       /\
                       (((<)
                        (sub_pointer p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_9) /\
                       (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
                       ((same_block t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                       /\
                       (((<)
                        (sub_pointer t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_80 p_19)
                        (select charP_charM_ct_1_81 t_9))
                       /\ (((=) p_19 !sc1) /\ ((=) t_9 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strpbrk.c" 31 15 112#
                      (forall p_20 : (pointer voidP).
                       (forall t_10 : (pointer voidP).
                        (((same_block cs_1_0 p_20) /\
                         (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                         ((same_block p_20 !sc1) /\
                         (((<) (sub_pointer p_20 !sc1) (0)) /\
                         ((same_block ct_1_0 t_10) /\
                         (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                         ((same_block t_10
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         /\
                         ((<)
                         (sub_pointer t_10
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_80 p_20)
                         (select charP_charM_ct_1_81 t_10)))))) } ; () end;
                    begin
                    (__retres_13 := !sc1);
                     (raise (Goto_return_label_7_exc ())) end end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 4706 57 69# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_82 -> () end end end;
              (raise (Goto_while_1_break_1_exc ())) end with
             Goto_while_1_break_1_exc _jessie_78 ->
             'While_1_break_1:
             'While_1_break_1:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 38 13 70#
                (forall t_11 : (pointer voidP).
                 (((same_block ct_1_0 t_11) /\
                  (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                  ((same_block t_11
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                  /\
                  ((<)
                  (sub_pointer t_11
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                  (select charP_charM_ct_1_81 t_11))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 39 13 90#
                (forall p_21 : (pointer voidP).
                 (forall t_12 : (pointer voidP).
                  (((same_block cs_1_0 p_21) /\
                   (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
                   ((same_block p_21 !sc1) /\
                   (((<=) (sub_pointer p_21 !sc1) (0)) /\
                   ((same_block ct_1_0 t_12) /\
                   (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                   ((same_block t_12
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                   /\
                   ((<)
                   (sub_pointer t_12
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_80 p_21)
                   (select charP_charM_ct_1_81 t_12)))))) } ; () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 4765 48 60# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_84 -> () end end end;
        (raise (Goto_while_0_break_17_exc ())) end with
       Goto_while_0_break_17_exc _jessie_79 ->
       'While_0_break_17:
       'While_0_break_17: begin (); (__retres_13 := (null  )) end end;
       (raise (Goto_return_label_7_exc ())) end with Goto_return_label_7_exc
      _jessie_80 ->
      'Return_label_7:
      'Return_label_7: begin (return := !__retres_13); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let strpbrk_ensures_not_found
  #"/home/work/workspace/self/verker/strpbrk.c" 3 5 45#
  "expl:Function strpbrk, behavior not_found" =
  fun
   (cs_1_0 : (pointer voidP)) (ct_1_0 : (pointer voidP))
   (voidP_cs_1_80_alloc_table : (alloc_table voidP))
   (voidP_ct_1_81_alloc_table : (alloc_table voidP)) (voidP_ct_1_81_tag_table
   : (tag_table voidP)) (voidP_cs_1_80_tag_table : (tag_table voidP))
   (charP_charM_cs_1_80 : (memory voidP Int8.t)) (charP_charM_ct_1_81 :
   (memory voidP Int8.t)) 
   requires {
   ((forall p_15_0 : (pointer voidP).
     (forall t_3_0 : (pointer voidP).
      (((same_block cs_1_0 p_15_0) /\
       (((<=) (sub_pointer cs_1_0 p_15_0) (0)) /\
       ((same_block p_15_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
       /\
       (((<)
        (sub_pointer p_15_0
        (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
        (0))
       /\
       ((same_block ct_1_0 t_3_0) /\
       (((<=) (sub_pointer ct_1_0 t_3_0) (0)) /\
       ((same_block t_3_0
        (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       /\
       ((<)
       (sub_pointer t_3_0
       (shift ct_1_0 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
       (0))))))))) ->
       (Int8.(<>) (select charP_charM_cs_1_80 p_15_0)
       (select charP_charM_ct_1_81 t_3_0)))))
   /\
   (((allocated voidP_ct_1_81_alloc_table ct_1_0) ->
     (((=) (typeof voidP_ct_1_81_tag_table ct_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_1_81_alloc_table ct_1_0) i) /\
       ((<) i (offset_max voidP_ct_1_81_alloc_table ct_1_0))) ->
       ((=) (typeof voidP_ct_1_81_tag_table (shift ct_1_0 i)) charP_tag)))))
   /\
   (((allocated voidP_cs_1_80_alloc_table cs_1_0) ->
     (((=) (typeof voidP_cs_1_80_tag_table cs_1_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_cs_1_80_alloc_table cs_1_0) i) /\
       ((<) i (offset_max voidP_cs_1_80_alloc_table cs_1_0))) ->
       ((=) (typeof voidP_cs_1_80_tag_table (shift cs_1_0 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 4353 12 95#
   ((#"/home/work/workspace/self/verker/strpbrk.h" 47 13 26#
    (valid_str cs_1_0 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
   /\
   (#"/home/work/workspace/self/verker/strpbrk.h" 48 13 26#
   (valid_str ct_1_0 voidP_ct_1_81_alloc_table charP_charM_ct_1_81))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strpbrk.h" 67 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let sc1 = ref (any_pointer  () : (pointer voidP)) in
     (let sc2 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_13 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (sc1 := cs_1_0);
        'Loop_75:
        loop
        invariant { (#"whole_program.jc" 4541 6 14918# true) } 
         begin
         any unit
         requires { true } reads { cs_1_0, ct_1_0 }
         ensures {
           ((#"/home/work/workspace/self/verker/strpbrk.c" 13 20 55#
            ((=) (strpbrk cs_1_0 ct_1_0) (strpbrk !sc1 ct_1_0)))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 9 20 156#
            (forall p_18 : (pointer voidP).
             (forall t_7 : (pointer voidP).
              (((same_block cs_1_0 p_18) /\
               (((<=) (sub_pointer cs_1_0 p_18) (0)) /\
               ((same_block p_18 !sc1) /\
               (((<) (sub_pointer p_18 !sc1) (0)) /\
               ((same_block ct_1_0 t_7) /\
               (((<=) (sub_pointer ct_1_0 t_7) (0)) /\
               ((same_block t_7
                (shift ct_1_0
                (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
               /\
               ((<)
               (sub_pointer t_7
               (shift ct_1_0
               (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_cs_1_80 p_18)
               (select charP_charM_ct_1_81 t_7))))))
           /\
           ((#"/home/work/workspace/self/verker/strpbrk.c" 8 20 34#
            (valid_str !sc1 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            (same_block cs_1_0 !sc1))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 20 29#
            ((<=) (sub_pointer cs_1_0 !sc1) (0)))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 20 48#
           ((#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
            (same_block !sc1
            (shift cs_1_0
            (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
           /\
           (#"/home/work/workspace/self/verker/strpbrk.c" 7 26 48#
           ((<=)
           (sub_pointer !sc1
           (shift cs_1_0 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
           (0))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 28#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strpbrk.c" 16 16 20#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_cs_1_80 !sc1 ) ))
            (#"whole_program.jc" 4579 29 41# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_17_exc ())));
            try
             begin
             (sc2 := ct_1_0);
              'Loop_76:
              loop
              invariant { (#"whole_program.jc" 4584 15 8560# true) } 
               begin
               any unit
               requires { true } reads { ct_1_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 20 21 63#
                  ((in_array ct_1_0 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81) ->
                   (in_array !sc2 (select charP_charM_cs_1_80 !sc1)
                   charP_charM_ct_1_81)))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 19 21 66#
                  (forall t_8 : (pointer voidP).
                   (((same_block ct_1_0 t_8) /\
                    (((<=) (sub_pointer ct_1_0 t_8) (0)) /\
                    ((same_block t_8 !sc2) /\
                    ((<) (sub_pointer t_8 !sc2) (0))))) ->
                    (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                    (select charP_charM_ct_1_81 t_8)))))
                 /\
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 18 21 35#
                  (valid_str !sc2 voidP_ct_1_81_alloc_table
                  charP_charM_ct_1_81))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  (same_block ct_1_0 !sc2))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 21 30#
                  ((<=) (sub_pointer ct_1_0 !sc2) (0)))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 21 49#
                 ((#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                  (same_block !sc2
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))))
                 /\
                 (#"/home/work/workspace/self/verker/strpbrk.c" 17 27 49#
                 ((<=)
                 (sub_pointer !sc2
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))))))
                 } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strpbrk.c" 23 17 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_ct_1_81 !sc2 ) ))
                  (#"whole_program.jc" 4617 38 50# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_1_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 19#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 7 11#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_cs_1_80 !sc1 ) ))
                   (#"/home/work/workspace/self/verker/strpbrk.c" 24 15 19#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_ct_1_81 !sc2 ) )) ))
                  then
                   begin
                   begin
                   any unit
                   requires { true } reads { cs_1_0, ct_1_0 }
                   ensures {
                     (#"/home/work/workspace/self/verker/strpbrk.c" 25 15 154#
                     (exists p_19 : (pointer voidP).
                      (exists t_9 : (pointer voidP).
                       ((same_block cs_1_0 p_19) /\
                       (((<=) (sub_pointer cs_1_0 p_19) (0)) /\
                       ((same_block p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                       /\
                       (((<)
                        (sub_pointer p_19
                        (shift cs_1_0
                        (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                        (0))
                       /\
                       ((same_block ct_1_0 t_9) /\
                       (((<=) (sub_pointer ct_1_0 t_9) (0)) /\
                       ((same_block t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                       /\
                       (((<)
                        (sub_pointer t_9
                        (shift ct_1_0
                        (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                        (0))
                       /\
                       ((Int8.(=) (select charP_charM_cs_1_80 p_19)
                        (select charP_charM_ct_1_81 t_9))
                       /\ (((=) p_19 !sc1) /\ ((=) t_9 !sc2)))))))))))))) } ;
                    () end;
                    begin
                    any unit
                    requires { true } reads { cs_1_0, ct_1_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strpbrk.c" 31 15 112#
                      (forall p_20 : (pointer voidP).
                       (forall t_10 : (pointer voidP).
                        (((same_block cs_1_0 p_20) /\
                         (((<=) (sub_pointer cs_1_0 p_20) (0)) /\
                         ((same_block p_20 !sc1) /\
                         (((<) (sub_pointer p_20 !sc1) (0)) /\
                         ((same_block ct_1_0 t_10) /\
                         (((<=) (sub_pointer ct_1_0 t_10) (0)) /\
                         ((same_block t_10
                          (shift ct_1_0
                          (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         /\
                         ((<)
                         (sub_pointer t_10
                         (shift ct_1_0
                         (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                         (0))))))))) ->
                         (Int8.(<>) (select charP_charM_cs_1_80 p_20)
                         (select charP_charM_ct_1_81 t_10)))))) } ; () end;
                    begin
                    (__retres_13 := !sc1);
                     (raise (Goto_return_label_7_exc ())) end end else ());
                  (sc2 :=
                   (shift_  !sc2
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 4706 57 69# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_82 -> () end end end;
              (raise (Goto_while_1_break_1_exc ())) end with
             Goto_while_1_break_1_exc _jessie_78 ->
             'While_1_break_1:
             'While_1_break_1:
             begin
             ();
              begin
              any unit
              requires { true } reads { ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 38 13 70#
                (forall t_11 : (pointer voidP).
                 (((same_block ct_1_0 t_11) /\
                  (((<=) (sub_pointer ct_1_0 t_11) (0)) /\
                  ((same_block t_11
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                  /\
                  ((<)
                  (sub_pointer t_11
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))
                  ->
                  (Int8.(<>) (select charP_charM_cs_1_80 !sc1)
                  (select charP_charM_ct_1_81 t_11))))) } ; () end;
              begin
              any unit
              requires { true } reads { cs_1_0, ct_1_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strpbrk.c" 39 13 90#
                (forall p_21 : (pointer voidP).
                 (forall t_12 : (pointer voidP).
                  (((same_block cs_1_0 p_21) /\
                   (((<=) (sub_pointer cs_1_0 p_21) (0)) /\
                   ((same_block p_21 !sc1) /\
                   (((<=) (sub_pointer p_21 !sc1) (0)) /\
                   ((same_block ct_1_0 t_12) /\
                   (((<=) (sub_pointer ct_1_0 t_12) (0)) /\
                   ((same_block t_12
                    (shift ct_1_0
                    (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                   /\
                   ((<)
                   (sub_pointer t_12
                   (shift ct_1_0
                   (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                   ->
                   (Int8.(<>) (select charP_charM_cs_1_80 p_21)
                   (select charP_charM_ct_1_81 t_12)))))) } ; () end end end;
            (sc1 :=
             (shift_  !sc1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 4765 48 60# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_84 -> () end end end;
        (raise (Goto_while_0_break_17_exc ())) end with
       Goto_while_0_break_17_exc _jessie_79 ->
       'While_0_break_17:
       'While_0_break_17: begin (); (__retres_13 := (null  )) end end;
       (raise (Goto_return_label_7_exc ())) end with Goto_return_label_7_exc
      _jessie_80 ->
      'Return_label_7:
      'Return_label_7: begin (return := !__retres_13); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
end

module Function_strrchr_safety
#"/home/work/workspace/self/verker/strrchr.c" 3 5 35# "expl:strrchr, safety"

  use enum.Uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int8 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strrchr #"/home/work/workspace/self/verker/strrchr.c" 3 5 35#
  "expl:Function strrchr, safety" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_83_alloc_table :
   (alloc_table voidP)) (voidP_s_9_83_tag_table : (tag_table voidP))
   (charP_charM_s_9_83 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_9_83_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_83_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_83_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_83_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_83_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strrchr.h" 60 13 25#
   (valid_str s_9 voidP_s_9_83_alloc_table charP_charM_s_9_83))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_19 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last :=
       (let _jessie_1062 = (null  ) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strrchr.c" 5 12 17#
       "expl:Pointer index bounds" true) }); _jessie_1062 end));
       begin
       (os_2 :=
        (let _jessie_1058 = !mutable_s_9 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strrchr.c" 6 17 19#
        "expl:Pointer index bounds" true) }); _jessie_1058 end));
        'Loop_82:
        loop
        invariant { (#"whole_program.jc" 4888 6 3791# true) }
          variant { (#"/home/work/workspace/self/verker/strrchr.c" 14 18 39#
            (Int.(-) (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))
            (sub_pointer !mutable_s_9 !os_2))) }
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker/strrchr.c" 12 20 89#
            (((<>) !last null) ->
             (forall p_24 : (pointer voidP).
              (((same_block !last p_24) /\
               (((<) (sub_pointer !last p_24) (0)) /\
               ((same_block p_24 !mutable_s_9) /\
               ((<) (sub_pointer p_24 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_83 p_24)
               (#"whole_program.jc" 4939 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 11 20 91#
            (((=) !last null) <->
            (forall p_23 : (pointer voidP).
             (((same_block !os_2 p_23) /\
              (((<=) (sub_pointer !os_2 p_23) (0)) /\
              ((same_block p_23 !mutable_s_9) /\
              ((<) (sub_pointer p_23 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_83 p_23)
              (#"whole_program.jc" 4931 47 62# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 10 20 91#
            (((<>) !last null) <->
            (exists p_22 : (pointer voidP).
             ((same_block !os_2 p_22) /\
             (((<=) (sub_pointer !os_2 p_22) (0)) /\
             ((same_block p_22 !mutable_s_9) /\
             (((<) (sub_pointer p_22 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 p_22)
             (#"whole_program.jc" 4923 47 62# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 9 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4909 52 67# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4914 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83)))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strrchr.c" 17 6 25#
           (Safe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker/strrchr.c" 17 6 8#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strrchr.c" 17 6 8#
             "expl:Pointer dereference"
             (acc  voidP_s_9_83_alloc_table charP_charM_s_9_83 !mutable_s_9 ))
             ))
            (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
            "expl:Integer cast"
            (Safe_bit_int32_of_Safe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
             "expl:Integer cast"
             (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c_17 )) )) ))
           then
            (last :=
             (let _jessie_1059 = !mutable_s_9 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strrchr.c" 18 3 11#
             "expl:Pointer index bounds" true) }); _jessie_1059 end))
           else ());
            begin
            (tmp_0_19 :=
             (let _jessie_1060 = !mutable_s_9 in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strrchr.c" 19 11 14#
             "expl:Pointer index bounds" true) }); _jessie_1060 end));
             begin
             (mutable_s_9 :=
              (let _jessie_1061 =
              (shift_typesafe  !mutable_s_9
               (Safe_bit_int32.to_int 
                (#"whole_program.jc" 4950 51 63# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strrchr.c" 19 11 14#
              "expl:Pointer index bounds" true) }); _jessie_1061 end)); ()
             end end;
            (if
            (#"/home/work/workspace/self/verker/strrchr.c" 19 10 14#
            (Safe_bit_int8.(<>) 
             (#"/home/work/workspace/self/verker/strrchr.c" 19 10 14#
             "expl:Pointer dereference"
             (acc  voidP_s_9_83_alloc_table charP_charM_s_9_83 !tmp_0_19 ))
             (#"whole_program.jc" 4954 29 40# "expl:Integer cast"
             (Safe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_18_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_87 -> () end end end;
        (raise (Goto_while_0_break_18_exc ())) end end with
      Goto_while_0_break_18_exc _jessie_85 ->
      'While_0_break_18:
      'While_0_break_18:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 20 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_83 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4962 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 21 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 22 12 96#
         ((exists p_25 : (pointer voidP).
           ((same_block !os_2 p_25) /\
           (((<=) (sub_pointer !os_2 p_25) (0)) /\
           ((same_block p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           /\
           (((<)
            (sub_pointer p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_83 p_25)
           (#"whole_program.jc" 4991 58 73# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_14 :=
        (let _jessie_1063 = !last in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strrchr.c" 24 1 21#
        "expl:Pointer index bounds" true) }); _jessie_1063 end));
        begin
        (return :=
         (let _jessie_1064 = !__retres_14 in
         begin
         (assert {
         (#"whole_program.jc" 4997 7 25# "expl:Pointer index bounds" true) });
          _jessie_1064 end)); (raise Return) end end end end)))); absurd  end
    with Return -> !return end))
  
end

module Function_strrchr_behaviors
#"/home/work/workspace/self/verker/strrchr.c" 3 5 35#
"expl:strrchr, behaviors"

  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int8 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  let strrchr_ensures_default
  #"/home/work/workspace/self/verker/strrchr.c" 3 5 35#
  "expl:Function strrchr, default behavior" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_83_alloc_table :
   (alloc_table voidP)) (voidP_s_9_83_tag_table : (tag_table voidP))
   (charP_charM_s_9_83 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_9_83_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_83_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_83_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_83_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_83_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strrchr.h" 60 13 25#
   (valid_str s_9 voidP_s_9_83_alloc_table charP_charM_s_9_83))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 4824 10 1721# "expl:Behavior disjointness check"
    (not
    ((exists p_19_1 : (pointer voidP).
      ((same_block !mutable_s_9 p_19_1) /\
      (((<=) (sub_pointer !mutable_s_9 p_19_1) (0)) /\
      ((same_block p_19_1
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83))))
      /\
      (((<=)
       (sub_pointer p_19_1
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_9_83 p_19_1)
      (#"whole_program.jc" 4836 55 70# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))
    /\
    (forall p_18_1 : (pointer voidP).
     (((same_block !mutable_s_9 p_18_1) /\
      (((<=) (sub_pointer !mutable_s_9 p_18_1) (0)) /\
      ((same_block p_18_1
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83))))
      /\
      ((<=)
      (sub_pointer p_18_1
      (shift !mutable_s_9
      (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_9_83 p_18_1)
      (#"whole_program.jc" 4849 56 71# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) });
     (check {
     (#"whole_program.jc" 4851 10 1602# "expl:Behavior completeness check"
     ((forall p_18_2 : (pointer voidP).
       (((same_block !mutable_s_9 p_18_2) /\
        (((<=) (sub_pointer !mutable_s_9 p_18_2) (0)) /\
        ((same_block p_18_2
         (shift !mutable_s_9
         (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83))))
        /\
        ((<=)
        (sub_pointer p_18_2
        (shift !mutable_s_9
        (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83)))) (0))))) ->
        (Bit_int8.(<>) (select charP_charM_s_9_83 p_18_2)
        (#"whole_program.jc" 4862 52 67# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c_17)))))
     \/
     (exists p_19_2 : (pointer voidP).
      ((same_block !mutable_s_9 p_19_2) /\
      (((<=) (sub_pointer !mutable_s_9 p_19_2) (0)) /\
      ((same_block p_19_2
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83))))
      /\
      (((<=)
       (sub_pointer p_19_2
       (shift !mutable_s_9
       (Uint64.to_int (strlen !mutable_s_9 charP_charM_s_9_83)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_9_83 p_19_2)
      (#"whole_program.jc" 4875 53 68# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))) });
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_19 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_79:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
             (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
              (same_block !os_2 !mutable_s_9))
             /\
             (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
              ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
             /\
             (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
             ((#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
              (same_block !mutable_s_9
              (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83)))))
             /\
             (#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
             ((<=)
             (sub_pointer !mutable_s_9
             (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strrchr.c" 9 20 79#
             ((((=) !last null) /\
              (not
              ((same_block !os_2 !last) /\
              (((<=) (sub_pointer !os_2 !last) (0)) /\
              ((same_block !last !mutable_s_9) /\
              (((<) (sub_pointer !last !mutable_s_9) (0)) /\
              (Bit_int8.(=) (select charP_charM_s_9_83 !last)
              (#"whole_program.jc" 4909 52 67# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
             \/
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             ((Bit_int8.(=) (select charP_charM_s_9_83 !last)
              (#"whole_program.jc" 4914 49 64# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))
             /\ (not ((=) !last null)))))))))
            &&
            ((#"/home/work/workspace/self/verker/strrchr.c" 10 20 91#
             (((<>) !last null) <->
             (exists p_22 : (pointer voidP).
              ((same_block !os_2 p_22) /\
              (((<=) (sub_pointer !os_2 p_22) (0)) /\
              ((same_block p_22 !mutable_s_9) /\
              (((<) (sub_pointer p_22 !mutable_s_9) (0)) /\
              (Bit_int8.(=) (select charP_charM_s_9_83 p_22)
              (#"whole_program.jc" 4923 47 62# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strrchr.c" 11 20 91#
             (((=) !last null) <->
             (forall p_23 : (pointer voidP).
              (((same_block !os_2 p_23) /\
               (((<=) (sub_pointer !os_2 p_23) (0)) /\
               ((same_block p_23 !mutable_s_9) /\
               ((<) (sub_pointer p_23 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_83 p_23)
               (#"whole_program.jc" 4931 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
            &&
            (#"/home/work/workspace/self/verker/strrchr.c" 12 20 89#
            (((<>) !last null) ->
             (forall p_24 : (pointer voidP).
              (((same_block !last p_24) /\
               (((<) (sub_pointer !last p_24) (0)) /\
               ((same_block p_24 !mutable_s_9) /\
               ((<) (sub_pointer p_24 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_83 p_24)
               (#"whole_program.jc" 4939 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))) } 
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strrchr.c" 17 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker/strrchr.c" 17 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_83 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_19 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4950 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/strrchr.c" 19 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_83 !tmp_0_19 )
             (#"whole_program.jc" 4954 29 40# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_18_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_87 -> () end end end;
        (raise (Goto_while_0_break_18_exc ())) end end with
      Goto_while_0_break_18_exc _jessie_85 ->
      'While_0_break_18:
      'While_0_break_18:
      begin
      ();
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strrchr.c" 20 12 25#
       "expl:Assertion in line 20"
       (Bit_int8.(=)
       (select charP_charM_s_9_83 (shift !mutable_s_9 (Int.(-_) (1))))
       (#"whole_program.jc" 4962 53 64# "expl:Integer cast"
       (Bit_int8.of_int_const 0)))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strrchr.c" 21 12 36#
       "expl:Assertion in line 21"
       ((=) !mutable_s_9
       (shift (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83)))
       (1)))) }); () end;
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strrchr.c" 22 12 96#
       "expl:Assertion in line 22"
       ((exists p_25 : (pointer voidP).
         ((same_block !os_2 p_25) /\
         (((<=) (sub_pointer !os_2 p_25) (0)) /\
         ((same_block p_25
          (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
         /\
         (((<)
          (sub_pointer p_25
          (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
          (0))
         /\
         (Bit_int8.(=) (select charP_charM_s_9_83 p_25)
         (#"whole_program.jc" 4991 58 73# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
        ((<>) !last null))) }); () end;
       begin
       (__retres_14 := !last);
        begin (return := !__retres_14); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let strrchr_ensures_found
  #"/home/work/workspace/self/verker/strrchr.c" 3 5 35#
  "expl:Function strrchr, behavior found" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_83_alloc_table :
   (alloc_table voidP)) (voidP_s_9_83_tag_table : (tag_table voidP))
   (charP_charM_s_9_83 : (memory voidP Int8.t)) 
   requires {
   ((exists p_19_0 : (pointer voidP).
     ((same_block s_9 p_19_0) /\
     (((<=) (sub_pointer s_9 p_19_0) (0)) /\
     ((same_block p_19_0
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
     /\
     (((<=)
      (sub_pointer p_19_0
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_9_83 p_19_0)
     (#"whole_program.jc" 4787 29 44# "expl:Integer cast"
     (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))
   /\
   (((allocated voidP_s_9_83_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_83_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_83_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_83_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_83_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strrchr.h" 60 13 25#
   (valid_str s_9 voidP_s_9_83_alloc_table charP_charM_s_9_83)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
      "expl:Ensures clause" (same_block s_9 result))
     /\
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
      "expl:Ensures clause"
      (same_block result
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))))
     /\
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))
     /\
     (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strrchr.h" 66 15 36#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_9_83 result)
      (#"whole_program.jc" 4799 37 61# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17))))
     /\
     (#"/home/work/workspace/self/verker/strrchr.h" 67 15 95#
     "expl:Ensures clause"
     (forall p_20_0 : (pointer voidP).
      (((same_block result p_20_0) /\
       (((<) (sub_pointer result p_20_0) (0)) /\
       ((same_block p_20_0
        (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
       /\
       ((<=)
       (sub_pointer p_20_0
       (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))))
       ->
       (Bit_int8.(<>) (select charP_charM_s_9_83 p_20_0)
       (#"whole_program.jc" 4813 42 66# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))) } diverges 
   ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_19 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_80:
        loop
        invariant { (#"whole_program.jc" 4888 6 3791# true) } 
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker/strrchr.c" 12 20 89#
            (((<>) !last null) ->
             (forall p_24 : (pointer voidP).
              (((same_block !last p_24) /\
               (((<) (sub_pointer !last p_24) (0)) /\
               ((same_block p_24 !mutable_s_9) /\
               ((<) (sub_pointer p_24 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_83 p_24)
               (#"whole_program.jc" 4939 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 11 20 91#
            (((=) !last null) <->
            (forall p_23 : (pointer voidP).
             (((same_block !os_2 p_23) /\
              (((<=) (sub_pointer !os_2 p_23) (0)) /\
              ((same_block p_23 !mutable_s_9) /\
              ((<) (sub_pointer p_23 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_83 p_23)
              (#"whole_program.jc" 4931 47 62# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 10 20 91#
            (((<>) !last null) <->
            (exists p_22 : (pointer voidP).
             ((same_block !os_2 p_22) /\
             (((<=) (sub_pointer !os_2 p_22) (0)) /\
             ((same_block p_22 !mutable_s_9) /\
             (((<) (sub_pointer p_22 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 p_22)
             (#"whole_program.jc" 4923 47 62# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 9 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4909 52 67# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4914 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83)))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strrchr.c" 17 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker/strrchr.c" 17 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_83 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_19 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4950 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/strrchr.c" 19 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_83 !tmp_0_19 )
             (#"whole_program.jc" 4954 29 40# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_18_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_87 -> () end end end;
        (raise (Goto_while_0_break_18_exc ())) end end with
      Goto_while_0_break_18_exc _jessie_85 ->
      'While_0_break_18:
      'While_0_break_18:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 20 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_83 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4962 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 21 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 22 12 96#
         ((exists p_25 : (pointer voidP).
           ((same_block !os_2 p_25) /\
           (((<=) (sub_pointer !os_2 p_25) (0)) /\
           ((same_block p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           /\
           (((<)
            (sub_pointer p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_83 p_25)
           (#"whole_program.jc" 4991 58 73# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_14 := !last);
        begin (return := !__retres_14); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
  let strrchr_ensures_not_found
  #"/home/work/workspace/self/verker/strrchr.c" 3 5 35#
  "expl:Function strrchr, behavior not_found" =
  fun
   (s_9 : (pointer voidP)) (c_17 : Int32.t) (voidP_s_9_83_alloc_table :
   (alloc_table voidP)) (voidP_s_9_83_tag_table : (tag_table voidP))
   (charP_charM_s_9_83 : (memory voidP Int8.t)) 
   requires {
   ((forall p_18_0 : (pointer voidP).
     (((same_block s_9 p_18_0) /\
      (((<=) (sub_pointer s_9 p_18_0) (0)) /\
      ((same_block p_18_0
       (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
      /\
      ((<=)
      (sub_pointer p_18_0
      (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_9_83 p_18_0)
      (#"whole_program.jc" 4821 29 44# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c_17)))))
   /\
   (((allocated voidP_s_9_83_alloc_table s_9) ->
     (((=) (typeof voidP_s_9_83_tag_table s_9) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_9_83_alloc_table s_9) i) /\
       ((<) i (offset_max voidP_s_9_83_alloc_table s_9))) ->
       ((=) (typeof voidP_s_9_83_tag_table (shift s_9 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strrchr.h" 60 13 25#
   (valid_str s_9 voidP_s_9_83_alloc_table charP_charM_s_9_83)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strrchr.h" 71 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_9 = ref s_9 in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let last = ref (any_pointer  () : (pointer voidP)) in
     (let os_2 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_19 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_14 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (last := (null  ));
       begin
       (os_2 := !mutable_s_9);
        'Loop_81:
        loop
        invariant { (#"whole_program.jc" 4888 6 3791# true) } 
         begin
         any unit
         requires { true } reads { c_17, mutable_s_9 }
         ensures {
           ((#"/home/work/workspace/self/verker/strrchr.c" 12 20 89#
            (((<>) !last null) ->
             (forall p_24 : (pointer voidP).
              (((same_block !last p_24) /\
               (((<) (sub_pointer !last p_24) (0)) /\
               ((same_block p_24 !mutable_s_9) /\
               ((<) (sub_pointer p_24 !mutable_s_9) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_9_83 p_24)
               (#"whole_program.jc" 4939 47 62# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 11 20 91#
            (((=) !last null) <->
            (forall p_23 : (pointer voidP).
             (((same_block !os_2 p_23) /\
              (((<=) (sub_pointer !os_2 p_23) (0)) /\
              ((same_block p_23 !mutable_s_9) /\
              ((<) (sub_pointer p_23 !mutable_s_9) (0))))) ->
              (Bit_int8.(<>) (select charP_charM_s_9_83 p_23)
              (#"whole_program.jc" 4931 47 62# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 10 20 91#
            (((<>) !last null) <->
            (exists p_22 : (pointer voidP).
             ((same_block !os_2 p_22) /\
             (((<=) (sub_pointer !os_2 p_22) (0)) /\
             ((same_block p_22 !mutable_s_9) /\
             (((<) (sub_pointer p_22 !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 p_22)
             (#"whole_program.jc" 4923 47 62# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strrchr.c" 9 20 79#
            ((((=) !last null) /\
             (not
             ((same_block !os_2 !last) /\
             (((<=) (sub_pointer !os_2 !last) (0)) /\
             ((same_block !last !mutable_s_9) /\
             (((<) (sub_pointer !last !mutable_s_9) (0)) /\
             (Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4909 52 67# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))
            \/
            ((same_block !os_2 !last) /\
            (((<=) (sub_pointer !os_2 !last) (0)) /\
            ((same_block !last !mutable_s_9) /\
            (((<) (sub_pointer !last !mutable_s_9) (0)) /\
            ((Bit_int8.(=) (select charP_charM_s_9_83 !last)
             (#"whole_program.jc" 4914 49 64# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17)))
            /\ (not ((=) !last null)))))))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            (same_block !os_2 !mutable_s_9))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 20 27#
            ((<=) (sub_pointer !os_2 !mutable_s_9) (0)))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 20 46#
           ((#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
            (same_block !mutable_s_9
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83)))))
           /\
           (#"/home/work/workspace/self/verker/strrchr.c" 8 26 46#
           ((<=)
           (sub_pointer !mutable_s_9
           (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           (0)))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strrchr.c" 17 6 25#
           (Unsafe_bit_int32.(=) 
            (#"/home/work/workspace/self/verker/strrchr.c" 17 6 8#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (acc  charP_charM_s_9_83 !mutable_s_9 ) ))
            (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
            "expl:Integer cast"
            (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
             (#"/home/work/workspace/self/verker/strrchr.c" 17 12 25#
             "expl:Integer cast"
             (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c_17 )) )) ))
           then (last := !mutable_s_9) else ());
            begin
            (tmp_0_19 := !mutable_s_9);
             begin
             (mutable_s_9 :=
              (shift_  !mutable_s_9
               (Unsafe_bit_int32.to_int 
                (#"whole_program.jc" 4950 51 63# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )); () end end;
            (if
            (#"/home/work/workspace/self/verker/strrchr.c" 19 10 14#
            (Unsafe_bit_int8.(<>)  (acc  charP_charM_s_9_83 !tmp_0_19 )
             (#"whole_program.jc" 4954 29 40# "expl:Integer cast"
             (Unsafe_bit_int8.of_int_const 0)) )) then ()
            else (raise (Goto_while_0_break_18_exc ()))) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_87 -> () end end end;
        (raise (Goto_while_0_break_18_exc ())) end end with
      Goto_while_0_break_18_exc _jessie_85 ->
      'While_0_break_18:
      'While_0_break_18:
      begin
      ();
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 20 12 25#
         (Bit_int8.(=)
         (select charP_charM_s_9_83 (shift !mutable_s_9 (Int.(-_) (1))))
         (#"whole_program.jc" 4962 53 64# "expl:Integer cast"
         (Bit_int8.of_int_const 0)))) } ; () end;
       begin
       any unit
       requires { true } reads { mutable_s_9 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 21 12 36#
         ((=) !mutable_s_9
         (shift
         (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))) (1))))
         } ; () end;
       begin
       any unit
       requires { true } reads { c_17 }
       ensures {
         (#"/home/work/workspace/self/verker/strrchr.c" 22 12 96#
         ((exists p_25 : (pointer voidP).
           ((same_block !os_2 p_25) /\
           (((<=) (sub_pointer !os_2 p_25) (0)) /\
           ((same_block p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
           /\
           (((<)
            (sub_pointer p_25
            (shift !os_2 (Uint64.to_int (strlen !os_2 charP_charM_s_9_83))))
            (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_83 p_25)
           (#"whole_program.jc" 4991 58 73# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          ((<>) !last null))) } ; () end;
       begin
       (__retres_14 := !last);
        begin (return := !__retres_14); (raise Return) end end end end))));
     absurd  end with Return -> !return end))
  
end

theory Root_char_xP

  use why3.Bool.Bool 
  
  type char_xP 
  
end

module Function_strpbrk_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strpbrk_0
  (cs_1_0 : (pointer voidP)) 
   (ct_1_0 : (pointer voidP)) 
    (voidP_ct_1_81_alloc_table : (alloc_table voidP)) 
     (voidP_cs_1_80_alloc_table : (alloc_table voidP)) 
      (voidP_ct_1_81_tag_table : (tag_table voidP)) 
       (voidP_cs_1_80_tag_table : (tag_table voidP)) 
        (charP_charM_ct_1_81 : (memory voidP Int8.t)) 
         (charP_charM_cs_1_80 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 4353 12 95# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strpbrk.h" 47 13 26#
             "expl:Requires clause"
             (valid_str cs_1_0 voidP_cs_1_80_alloc_table charP_charM_cs_1_80))
            /\
            (#"/home/work/workspace/self/verker/strpbrk.h" 48 13 26#
            "expl:Requires clause"
            (valid_str ct_1_0 voidP_ct_1_81_alloc_table charP_charM_ct_1_81)))))
            }
          ensures {
            (((allocated voidP_cs_1_80_alloc_table result) ->
              (((=) (typeof voidP_cs_1_80_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_cs_1_80_alloc_table result) i) /\
                ((<) i (offset_max voidP_cs_1_80_alloc_table result))) ->
                ((=) (typeof voidP_cs_1_80_tag_table (shift result i))
                charP_tag)))))
            /\
            (((forall p_15_0 : (pointer voidP).
               (forall t_3_0 : (pointer voidP).
                (((same_block cs_1_0 p_15_0) /\
                 (((<=) (sub_pointer cs_1_0 p_15_0) (0)) /\
                 ((same_block p_15_0
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                 /\
                 (((<)
                  (sub_pointer p_15_0
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0))
                 /\
                 ((same_block ct_1_0 t_3_0) /\
                 (((<=) (sub_pointer ct_1_0 t_3_0) (0)) /\
                 ((same_block t_3_0
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                 /\
                 ((<)
                 (sub_pointer t_3_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_80 p_15_0)
                 (select charP_charM_ct_1_81 t_3_0))))) ->
              (#"/home/work/workspace/self/verker/strpbrk.h" 67 15 31#
              "expl:Ensures clause" ((=) result null)))
            /\
            (((exists p_16 : (pointer voidP).
               (exists t_4_0 : (pointer voidP).
                ((same_block cs_1_0 p_16) /\
                (((<=) (sub_pointer cs_1_0 p_16) (0)) /\
                ((same_block p_16
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                /\
                (((<)
                 (sub_pointer p_16
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0))
                /\
                ((same_block ct_1_0 t_4_0) /\
                (((<=) (sub_pointer ct_1_0 t_4_0) (0)) /\
                ((same_block t_4_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                (((<)
                 (sub_pointer t_4_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_80 p_16)
                (select charP_charM_ct_1_81 t_4_0)))))))))))) ->
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
               "expl:Ensures clause" (same_block cs_1_0 result))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
               "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               (same_block result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               ((<)
               (sub_pointer result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0)))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 57 15 76#
               "expl:Ensures clause"
               (exists t_5_0 : (pointer voidP).
                ((same_block ct_1_0 t_5_0) /\
                (((<=) (sub_pointer ct_1_0 t_5_0) (0)) /\
                ((same_block t_5_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                (((<=)
                 (sub_pointer t_5_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_80 result)
                (select charP_charM_ct_1_81 t_5_0))))))))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 58 15 140#
              "expl:Ensures clause"
              (forall p_17 : (pointer voidP).
               (forall t_6 : (pointer voidP).
                (((same_block cs_1_0 p_17) /\
                 (((<=) (sub_pointer cs_1_0 p_17) (0)) /\
                 ((same_block p_17 result) /\
                 (((<) (sub_pointer p_17 result) (0)) /\
                 ((same_block ct_1_0 t_6) /\
                 (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                 ((same_block t_6
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                 /\
                 ((<)
                 (sub_pointer t_6
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_80 p_17)
                 (select charP_charM_ct_1_81 t_6))))))))))))))))))
            /\
            (#"/home/work/workspace/self/verker/strpbrk.h" 50 12 38#
            "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))))) }
  
end

module Function_strsep_safety
#"/home/work/workspace/self/verker/strsep.c" 3 5 38# "expl:strsep, safety"

  use Safe_int8 
  
  use Safe_int32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_eq_pointer_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strpbrk_0_safe 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strsep #"/home/work/workspace/self/verker/strsep.c" 3 5 38#
  "expl:Function strsep, safety" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_87
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_85 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_85_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_86_alloc_table : (alloc_table voidP))
   (voidP_result_87_alloc_table : (alloc_table voidP))
   (voidP_result_87_tag_table : (tag_table voidP)) (voidP_ct_2_86_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_86 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_2_86_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_86_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_86_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_86_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_86_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 5002 12 499# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_85 s_10)
   voidP_result_87_alloc_table !charP_charM_result_87)))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_20 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_15 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin :=
       (let _jessie_1157 =
       (#"/home/work/workspace/self/verker/strsep.c" 5 16 18#
       "expl:Pointer dereference"
       (acc  char_xP_s_10_85_alloc_table !char_xP_char_xM_s_10_85 s_10 )) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strsep.c" 5 6 13#
       "expl:Pointer index bounds" true) }); _jessie_1157 end));
       (if
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       (eq_pointer  voidP_result_87_alloc_table voidP_result_87_alloc_table
        !sbegin (null  ) )))
       then
        begin
        (__retres_15 :=
         (let _jessie_1158 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strsep.c" 9 2 21#
         "expl:Pointer index bounds" true) }); _jessie_1158 end));
         (raise (Goto_return_label_8_exc ())) end else ());
       begin
       (end_0 :=
        (let _jessie_1147 =
        (let _jessie_1149 = !sbegin in
        (let _jessie_1148 = ct_2 in
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0_safe.strpbrk_0  _jessie_1149 _jessie_1148
         voidP_ct_2_86_alloc_table voidP_result_87_alloc_table
         voidP_ct_2_86_tag_table voidP_result_87_tag_table
         charP_charM_ct_2_86 !charP_charM_result_87 )))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Pointer index bounds" true) }); _jessie_1147 end));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        (neq_pointer  voidP_result_87_alloc_table voidP_result_87_alloc_table
         !end_0 (null  ) )))
        then
         begin
         (tmp_0_20 :=
          (let _jessie_1150 = !end_0 in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/strsep.c" 14 3 8#
          "expl:Pointer index bounds" true) }); _jessie_1150 end));
          begin
          (end_0 :=
           (let _jessie_1151 =
           (shift_typesafe  !end_0
            (Safe_int32.to_int 
             (#"whole_program.jc" 5079 49 61# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strsep.c" 14 3 8#
           "expl:Pointer index bounds" true) }); _jessie_1151 end));
           (let _jessie_1153 =
           (let _jessie_1152 =
           (#"whole_program.jc" 5080 50 61# "expl:Integer cast"
           (Safe_int8.of_int (0))) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/strsep.c" 14 2 15#
           "expl:Pointer index bounds" true) }); _jessie_1152 end) in
           (let _jessie_1154 = !tmp_0_20 in
           (let _jessie_1155 = (0) in
           (let _jessie_1156 = _jessie_1154 in
           (#"/home/work/workspace/self/verker/strsep.c" 14 2 15#
           "expl:Pointer dereference"
           (upd  voidP_result_87_alloc_table charP_charM_result_87
            _jessie_1154 _jessie_1153 )))))) end end else ());
        begin
        (let _jessie_1143 =
        (let _jessie_1142 = !end_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strsep.c" 16 1 9#
        "expl:Pointer index bounds" true) }); _jessie_1142 end) in
        (let _jessie_1144 = s_10 in
        (let _jessie_1145 = (0) in
        (let _jessie_1146 = _jessie_1144 in
        (#"/home/work/workspace/self/verker/strsep.c" 16 1 9#
        "expl:Pointer dereference"
        (upd  char_xP_s_10_85_alloc_table char_xP_char_xM_s_10_85
         _jessie_1144 _jessie_1143 ))))));
         begin
         (__retres_15 :=
          (let _jessie_1141 = !sbegin in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/strsep.c" 17 1 15#
          "expl:Pointer index bounds" true) }); _jessie_1141 end));
          (raise (Goto_return_label_8_exc ())) end end end end with
      Goto_return_label_8_exc _jessie_88 ->
      'Return_label_8:
      'Return_label_8:
      begin
      (return :=
       (let _jessie_1159 = !__retres_15 in
       begin
       (assert {
       (#"whole_program.jc" 5085 7 25# "expl:Pointer index bounds" true) });
        _jessie_1159 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Function_strpbrk_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strpbrk_0
  (cs_1_0 : (pointer voidP)) 
   (ct_1_0 : (pointer voidP)) 
    (voidP_ct_1_81_alloc_table : (alloc_table voidP)) 
     (voidP_cs_1_80_alloc_table : (alloc_table voidP)) 
      (voidP_ct_1_81_tag_table : (tag_table voidP)) 
       (voidP_cs_1_80_tag_table : (tag_table voidP)) 
        (charP_charM_ct_1_81 : (memory voidP Int8.t)) 
         (charP_charM_cs_1_80 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true }
          ensures {
            (((allocated voidP_cs_1_80_alloc_table result) ->
              (((=) (typeof voidP_cs_1_80_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_cs_1_80_alloc_table result) i) /\
                ((<) i (offset_max voidP_cs_1_80_alloc_table result))) ->
                ((=) (typeof voidP_cs_1_80_tag_table (shift result i))
                charP_tag)))))
            /\
            (((forall p_15_0 : (pointer voidP).
               (forall t_3_0 : (pointer voidP).
                (((same_block cs_1_0 p_15_0) /\
                 (((<=) (sub_pointer cs_1_0 p_15_0) (0)) /\
                 ((same_block p_15_0
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                 /\
                 (((<)
                  (sub_pointer p_15_0
                  (shift cs_1_0
                  (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0))
                 /\
                 ((same_block ct_1_0 t_3_0) /\
                 (((<=) (sub_pointer ct_1_0 t_3_0) (0)) /\
                 ((same_block t_3_0
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                 /\
                 ((<)
                 (sub_pointer t_3_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_80 p_15_0)
                 (select charP_charM_ct_1_81 t_3_0))))) ->
              (#"/home/work/workspace/self/verker/strpbrk.h" 67 15 31#
              "expl:Ensures clause" ((=) result null)))
            /\
            (((exists p_16 : (pointer voidP).
               (exists t_4_0 : (pointer voidP).
                ((same_block cs_1_0 p_16) /\
                (((<=) (sub_pointer cs_1_0 p_16) (0)) /\
                ((same_block p_16
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80))))
                /\
                (((<)
                 (sub_pointer p_16
                 (shift cs_1_0
                 (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0))
                /\
                ((same_block ct_1_0 t_4_0) /\
                (((<=) (sub_pointer ct_1_0 t_4_0) (0)) /\
                ((same_block t_4_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                (((<)
                 (sub_pointer t_4_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_80 p_16)
                (select charP_charM_ct_1_81 t_4_0)))))))))))) ->
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
               "expl:Ensures clause" (same_block cs_1_0 result))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 15 28#
               "expl:Ensures clause" ((<=) (sub_pointer cs_1_0 result) (0)))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               (same_block result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 56 21 46#
               "expl:Ensures clause"
               ((<)
               (sub_pointer result
               (shift cs_1_0
               (Uint64.to_int (strlen cs_1_0 charP_charM_cs_1_80)))) (0)))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 56 15 46#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strpbrk.h" 57 15 76#
               "expl:Ensures clause"
               (exists t_5_0 : (pointer voidP).
                ((same_block ct_1_0 t_5_0) /\
                (((<=) (sub_pointer ct_1_0 t_5_0) (0)) /\
                ((same_block t_5_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                /\
                (((<=)
                 (sub_pointer t_5_0
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0))
                /\
                (Int8.(=) (select charP_charM_cs_1_80 result)
                (select charP_charM_ct_1_81 t_5_0))))))))
              /\
              (#"/home/work/workspace/self/verker/strpbrk.h" 58 15 140#
              "expl:Ensures clause"
              (forall p_17 : (pointer voidP).
               (forall t_6 : (pointer voidP).
                (((same_block cs_1_0 p_17) /\
                 (((<=) (sub_pointer cs_1_0 p_17) (0)) /\
                 ((same_block p_17 result) /\
                 (((<) (sub_pointer p_17 result) (0)) /\
                 ((same_block ct_1_0 t_6) /\
                 (((<=) (sub_pointer ct_1_0 t_6) (0)) /\
                 ((same_block t_6
                  (shift ct_1_0
                  (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81))))
                 /\
                 ((<)
                 (sub_pointer t_6
                 (shift ct_1_0
                 (Uint64.to_int (strlen ct_1_0 charP_charM_ct_1_81)))) (0)))))))))
                 ->
                 (Int8.(<>) (select charP_charM_cs_1_80 p_17)
                 (select charP_charM_ct_1_81 t_6))))))))))))))))))
            /\
            (#"/home/work/workspace/self/verker/strpbrk.h" 50 12 38#
            "expl:Ensures clause" ((=) result (strpbrk cs_1_0 ct_1_0)))))) }
  
end

module Function_strsep_behaviors
#"/home/work/workspace/self/verker/strsep.c" 3 5 38# "expl:strsep, behaviors"

  use Unsafe_int8 
  
  use Unsafe_int32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Function_strpbrk_0 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  let strsep_ensures_default
  #"/home/work/workspace/self/verker/strsep.c" 3 5 38#
  "expl:Function strsep, default behavior" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_87
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_85 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_85_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_86_alloc_table : (alloc_table voidP))
   (voidP_result_87_alloc_table : (alloc_table voidP))
   (voidP_result_87_tag_table : (tag_table voidP)) (voidP_ct_2_86_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_86 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_ct_2_86_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_86_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_86_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_86_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_86_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 5002 12 499# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_85 s_10)
   voidP_result_87_alloc_table !charP_charM_result_87)))))))))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"whole_program.jc" 5037 10 301# "expl:Behavior disjointness check"
    (not
    ((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\
    (((=) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null) /\
    ((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null))))))
    });
     (check {
     (#"whole_program.jc" 5042 10 213# "expl:Behavior disjointness check"
     (not
     (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
     ((valid_str (select !char_xP_char_xM_s_10_85 s_10)
      voidP_result_87_alloc_table !charP_charM_result_87)
     /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null)))))
     });
     (check {
     (#"whole_program.jc" 5046 10 213# "expl:Behavior disjointness check"
     (not
     (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
     ((valid_str (select !char_xP_char_xM_s_10_85 s_10)
      voidP_result_87_alloc_table !charP_charM_result_87)
     /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null)))))
     });
     (check {
     (#"whole_program.jc" 5050 10 353# "expl:Behavior completeness check"
     (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
       voidP_result_87_alloc_table !charP_charM_result_87)
      /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null))
     \/
     (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
       voidP_result_87_alloc_table !charP_charM_result_87)
      /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null))
     \/ ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))) });
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_20 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_15 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_85 s_10 ));
       (if
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_15 := (null  )); (raise (Goto_return_label_8_exc ()))
        end else ());
       begin
       (end_0 :=
        (let _jessie_1073 = !sbegin in
        (let _jessie_1072 = ct_2 in
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_1073 _jessie_1072
         voidP_ct_2_86_alloc_table voidP_result_87_alloc_table
         voidP_ct_2_86_tag_table voidP_result_87_tag_table
         charP_charM_ct_2_86 !charP_charM_result_87 )))));
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strsep.c" 12 12 38#
        "expl:Assertion in line 12" ((=) (strpbrk !sbegin ct_2) !end_0)) });
         () end;
        (if
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_20 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 5079 49 61# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_1077 =
           (#"whole_program.jc" 5080 50 61# "expl:Integer cast"
           (Unsafe_int8.of_int (0))) in
           (let _jessie_1078 = !tmp_0_20 in
           (let _jessie_1079 = (0) in
           (let _jessie_1080 = _jessie_1078 in
           (upd  charP_charM_result_87 _jessie_1080 _jessie_1077 ))))) end
         end else ());
        begin
        (let _jessie_1067 = !end_0 in
        (let _jessie_1068 = s_10 in
        (let _jessie_1069 = (0) in
        (let _jessie_1070 = _jessie_1068 in
        (upd  char_xP_char_xM_s_10_85 _jessie_1070 _jessie_1067 )))));
         begin (__retres_15 := !sbegin); (raise (Goto_return_label_8_exc ()))
         end end end end with Goto_return_label_8_exc _jessie_88 ->
      'Return_label_8:
      'Return_label_8: begin (return := !__retres_15); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_null
  #"/home/work/workspace/self/verker/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_87
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_85 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_85_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_86_alloc_table : (alloc_table voidP))
   (voidP_result_87_alloc_table : (alloc_table voidP))
   (voidP_result_87_tag_table : (tag_table voidP)) (voidP_ct_2_86_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_86 : (memory voidP Int8.t)) 
   requires {
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (((allocated voidP_ct_2_86_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_86_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_86_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_86_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_86_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 5002 12 499# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_85 s_10)
   voidP_result_87_alloc_table !charP_charM_result_87))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
       (not_assigns voidP_result_87_alloc_table voidP_result_87_alloc_table
       (old !charP_charM_result_87) !charP_charM_result_87 pset_empty))
      /\
      (#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
      (not_assigns char_xP_s_10_85_alloc_table char_xP_s_10_85_alloc_table
      (old !char_xP_char_xM_s_10_85) !char_xP_char_xM_s_10_85 pset_empty)))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 25 15 31#
     "expl:Ensures clause" ((=) result null)))) }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_20 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_15 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_85 s_10 ));
       (if
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_15 := (null  )); (raise (Goto_return_label_8_exc ()))
        end else ());
       begin
       (end_0 :=
        (let _jessie_1092 = !sbegin in
        (let _jessie_1091 = ct_2 in
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_1092 _jessie_1091
         voidP_ct_2_86_alloc_table voidP_result_87_alloc_table
         voidP_ct_2_86_tag_table voidP_result_87_tag_table
         charP_charM_ct_2_86 !charP_charM_result_87 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_20 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 5079 49 61# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_1096 =
           (#"whole_program.jc" 5080 50 61# "expl:Integer cast"
           (Unsafe_int8.of_int (0))) in
           (let _jessie_1097 = !tmp_0_20 in
           (let _jessie_1098 = (0) in
           (let _jessie_1099 = _jessie_1097 in
           (upd  charP_charM_result_87 _jessie_1099 _jessie_1096 ))))) end
         end else ());
        begin
        (let _jessie_1086 = !end_0 in
        (let _jessie_1087 = s_10 in
        (let _jessie_1088 = (0) in
        (let _jessie_1089 = _jessie_1087 in
        (upd  char_xP_char_xM_s_10_85 _jessie_1089 _jessie_1086 )))));
         begin (__retres_15 := !sbegin); (raise (Goto_return_label_8_exc ()))
         end end end end with Goto_return_label_8_exc _jessie_88 ->
      'Return_label_8:
      'Return_label_8: begin (return := !__retres_15); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_strpbrk_not_null
  #"/home/work/workspace/self/verker/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_strpbrk_not_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_87
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_85 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_85_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_86_alloc_table : (alloc_table voidP))
   (voidP_result_87_alloc_table : (alloc_table voidP))
   (voidP_result_87_tag_table : (tag_table voidP)) (voidP_ct_2_86_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_86 : (memory voidP Int8.t)) 
   requires {
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ ((<>) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null))
   /\
   (((allocated voidP_ct_2_86_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_86_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_86_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_86_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_86_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 5002 12 499# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_85 s_10)
   voidP_result_87_alloc_table !charP_charM_result_87))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
       (not_assigns voidP_result_87_alloc_table voidP_result_87_alloc_table
       (old !charP_charM_result_87) !charP_charM_result_87
       (pset_singleton
       (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))))
      /\
      (#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
      (not_assigns char_xP_s_10_85_alloc_table char_xP_s_10_85_alloc_table
      (old !char_xP_char_xM_s_10_85) !char_xP_char_xM_s_10_85
      (pset_singleton s_10))))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
      "expl:Ensures clause"
      ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strsep.h" 38 15 46#
      "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_s_10_85 s_10)
      (shift (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2) (1))))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strsep.h" 39 15 45#
      "expl:Ensures clause"
      (Int8.(=)
      (select !charP_charM_result_87
      (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))
      (#"whole_program.jc" 5034 39 50# "expl:Integer cast" (Int8.of_int
      (0)))))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 40 15 33#
     "expl:Ensures clause"
     (valid_str result voidP_result_87_alloc_table !charP_charM_result_87)))))))))))
     }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_20 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_15 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_85 s_10 ));
       (if
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_15 := (null  )); (raise (Goto_return_label_8_exc ()))
        end else ());
       begin
       (end_0 :=
        (let _jessie_1130 = !sbegin in
        (let _jessie_1129 = ct_2 in
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_1130 _jessie_1129
         voidP_ct_2_86_alloc_table voidP_result_87_alloc_table
         voidP_ct_2_86_tag_table voidP_result_87_tag_table
         charP_charM_ct_2_86 !charP_charM_result_87 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_20 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 5079 49 61# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_1134 =
           (#"whole_program.jc" 5080 50 61# "expl:Integer cast"
           (Unsafe_int8.of_int (0))) in
           (let _jessie_1135 = !tmp_0_20 in
           (let _jessie_1136 = (0) in
           (let _jessie_1137 = _jessie_1135 in
           (upd  charP_charM_result_87 _jessie_1137 _jessie_1134 ))))) end
         end else ());
        begin
        (let _jessie_1124 = !end_0 in
        (let _jessie_1125 = s_10 in
        (let _jessie_1126 = (0) in
        (let _jessie_1127 = _jessie_1125 in
        (upd  char_xP_char_xM_s_10_85 _jessie_1127 _jessie_1124 )))));
         begin (__retres_15 := !sbegin); (raise (Goto_return_label_8_exc ()))
         end end end end with Goto_return_label_8_exc _jessie_88 ->
      'Return_label_8:
      'Return_label_8: begin (return := !__retres_15); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strsep_ensures_input_strpbrk_null
  #"/home/work/workspace/self/verker/strsep.c" 3 5 38#
  "expl:Function strsep, behavior input_strpbrk_null" =
  fun
   (s_10 : (pointer char_xP)) (ct_2 : (pointer voidP)) (charP_charM_result_87
   : ref (memory voidP Int8.t)) (char_xP_char_xM_s_10_85 : ref (memory
   char_xP (pointer voidP))) (char_xP_s_10_85_alloc_table : (alloc_table
   char_xP)) (voidP_ct_2_86_alloc_table : (alloc_table voidP))
   (voidP_result_87_alloc_table : (alloc_table voidP))
   (voidP_result_87_tag_table : (tag_table voidP)) (voidP_ct_2_86_tag_table :
   (tag_table voidP)) (charP_charM_ct_2_86 : (memory voidP Int8.t)) 
   requires {
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ ((=) (strpbrk (select !char_xP_char_xM_s_10_85 s_10) ct_2) null))
   /\
   (((allocated voidP_ct_2_86_alloc_table ct_2) ->
     (((=) (typeof voidP_ct_2_86_tag_table ct_2) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_ct_2_86_alloc_table ct_2) i) /\
       ((<) i (offset_max voidP_ct_2_86_alloc_table ct_2))) ->
       ((=) (typeof voidP_ct_2_86_tag_table (shift ct_2 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
    (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
   /\
   (#"whole_program.jc" 5002 12 499#
   ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
    /\
    (#"whole_program.jc" 5002 12 499#
    ((#"whole_program.jc" 5002 12 499#
     ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
    /\ (#"whole_program.jc" 5002 12 499# ((=) true true)))))))
   /\
   (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
   (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
     voidP_result_87_alloc_table !charP_charM_result_87)
    /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
   \/
   (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
   (not
   (valid_str (select !char_xP_char_xM_s_10_85 s_10)
   voidP_result_87_alloc_table !charP_charM_result_87))))))))))) }
   ensures {
     ("expl:Postcondition"
     (((#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
       (not_assigns voidP_result_87_alloc_table voidP_result_87_alloc_table
       (old !charP_charM_result_87) !charP_charM_result_87 pset_empty))
      /\
      (#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
      (not_assigns char_xP_s_10_85_alloc_table char_xP_s_10_85_alloc_table
      (old !char_xP_char_xM_s_10_85) !char_xP_char_xM_s_10_85
      (pset_singleton s_10))))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
      "expl:Ensures clause"
      ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
     /\
     (#"/home/work/workspace/self/verker/strsep.h" 31 15 26#
     "expl:Ensures clause" ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))))))
     }  ->
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); (); (); ();
     (let sbegin = ref (any_pointer  () : (pointer voidP)) in
     (let end_0 = ref (any_pointer  () : (pointer voidP)) in
     (let tmp_0_20 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_15 = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      (sbegin := (acc  !char_xP_char_xM_s_10_85 s_10 ));
       (if
       (#"/home/work/workspace/self/verker/strsep.c" 8 5 26#
       ((=)  !sbegin (null  ) ))
       then
        begin (__retres_15 := (null  )); (raise (Goto_return_label_8_exc ()))
        end else ());
       begin
       (end_0 :=
        (let _jessie_1111 = !sbegin in
        (let _jessie_1110 = ct_2 in
        (#"/home/work/workspace/self/verker/strsep.c" 11 7 26#
        "expl:Precondition for strpbrk"
        (Function_strpbrk_0.strpbrk_0  _jessie_1111 _jessie_1110
         voidP_ct_2_86_alloc_table voidP_result_87_alloc_table
         voidP_ct_2_86_tag_table voidP_result_87_tag_table
         charP_charM_ct_2_86 !charP_charM_result_87 )))));
        begin
        any unit
        requires { true } reads { ct_2 }
        ensures {
          (#"/home/work/workspace/self/verker/strsep.c" 12 12 38#
          ((=) (strpbrk !sbegin ct_2) !end_0)) } ; () end;
        (if
        (#"/home/work/workspace/self/verker/strsep.c" 13 5 8#
        ((<>)  !end_0 (null  ) ))
        then
         begin
         (tmp_0_20 := !end_0);
          begin
          (end_0 :=
           (shift_  !end_0
            (Unsafe_int32.to_int 
             (#"whole_program.jc" 5079 49 61# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) ) ));
           (let _jessie_1115 =
           (#"whole_program.jc" 5080 50 61# "expl:Integer cast"
           (Unsafe_int8.of_int (0))) in
           (let _jessie_1116 = !tmp_0_20 in
           (let _jessie_1117 = (0) in
           (let _jessie_1118 = _jessie_1116 in
           (upd  charP_charM_result_87 _jessie_1118 _jessie_1115 ))))) end
         end else ());
        begin
        (let _jessie_1105 = !end_0 in
        (let _jessie_1106 = s_10 in
        (let _jessie_1107 = (0) in
        (let _jessie_1108 = _jessie_1106 in
        (upd  char_xP_char_xM_s_10_85 _jessie_1108 _jessie_1105 )))));
         begin (__retres_15 := !sbegin); (raise (Goto_return_label_8_exc ()))
         end end end end with Goto_return_label_8_exc _jessie_88 ->
      'Return_label_8:
      'Return_label_8: begin (return := !__retres_15); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

module Function_strspn_0_safety
#"/home/work/workspace/self/verker/strspn.h" 69 7 48# "expl:strspn, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  let strspn_0 #"/home/work/workspace/self/verker/strspn.h" 69 7 48#
  "expl:Function strspn, safety" =
  fun
   (s_11 : (pointer voidP)) (accept_0 : (pointer voidP))
   (voidP_s_11_88_alloc_table : (alloc_table voidP))
   (voidP_accept_89_alloc_table : (alloc_table voidP))
   (voidP_accept_89_tag_table : (tag_table voidP)) (voidP_s_11_88_tag_table :
   (tag_table voidP)) (charP_charM_s_11_88 : (memory voidP Int8.t))
   (charP_charM_accept_89 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_accept_89_alloc_table accept_0) ->
     (((=) (typeof voidP_accept_89_tag_table accept_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_accept_89_alloc_table accept_0) i) /\
       ((<) i (offset_max voidP_accept_89_alloc_table accept_0))) ->
       ((=) (typeof voidP_accept_89_tag_table (shift accept_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_11_88_alloc_table s_11) ->
     (((=) (typeof voidP_s_11_88_tag_table s_11) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_11_88_alloc_table s_11) i) /\
       ((<) i (offset_max voidP_s_11_88_alloc_table s_11))) ->
       ((=) (typeof voidP_s_11_88_tag_table (shift s_11 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5090 12 97#
   ((#"/home/work/workspace/self/verker/strspn.h" 60 13 25#
    (valid_str s_11 voidP_s_11_88_alloc_table charP_charM_s_11_88))
   /\
   (#"/home/work/workspace/self/verker/strspn.h" 61 13 30#
   (valid_str accept_0 voidP_accept_89_alloc_table charP_charM_accept_89))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (let p_2_1 = ref (any_pointer  () : (pointer voidP)) in
    (let a = ref (any_pointer  () : (pointer voidP)) in
    (let count_6 = ref (Safe_uint64.any_  () ) in
    (let __retres_16 = ref (Safe_uint64.any_  () ) in
    try
     begin
     try
      begin
      (count_6 :=
       (let _jessie_1175 =
       (#"whole_program.jc" 5146 28 41# "expl:Integer cast"
       (Safe_uint64.of_int (0))) in
       begin
       (assert {
       (#"/home/work/workspace/self/verker/strspn.c" 7 8 13#
       "expl:Pointer index bounds" true) }); _jessie_1175 end));
       begin
       (p_2_1 :=
        (let _jessie_1169 = s_11 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strspn.c" 18 6 11#
        "expl:Pointer index bounds" true) }); _jessie_1169 end));
        'Loop_85:
        loop
        invariant { (#"whole_program.jc" 5149 6 6415# true) }
          variant { (#"/home/work/workspace/self/verker/strspn.c" 16 18 37#
            (Int.(-) (Uint64.to_int (strlen s_11 charP_charM_s_11_88))
            (sub_pointer !p_2_1 s_11))) }
         begin
         any unit
         requires { true } reads { accept_0, s_11 }
         ensures {
           ((#"/home/work/workspace/self/verker/strspn.c" 15 20 66#
            ((=) (strspn s_11 accept_0)
            (Int.(+) (strspn !p_2_1 accept_0) (Uint64.to_int !count_6))))
           /\
           ((#"/home/work/workspace/self/verker/strspn.c" 14 20 32#
            (valid_str !p_2_1 voidP_s_11_88_alloc_table charP_charM_s_11_88))
           /\
           ((#"/home/work/workspace/self/verker/strspn.c" 12 20 140#
            (forall c_34 : (pointer voidP).
             (((same_block s_11 c_34) /\
              (((<=) (sub_pointer s_11 c_34) (0)) /\
              ((same_block c_34 !p_2_1) /\
              ((<) (sub_pointer c_34 !p_2_1) (0))))) ->
              (exists t_13 : (pointer voidP).
               ((same_block accept_0 t_13) /\
               (((<=) (sub_pointer accept_0 t_13) (0)) /\
               ((same_block t_13
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
               /\
               (((<)
                (sub_pointer t_13
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                (0))
               /\
               (Int8.(=) (select charP_charM_s_11_88 c_34)
               (select charP_charM_accept_89 t_13))))))))))
           /\
           ((#"/home/work/workspace/self/verker/strspn.c" 11 20 34#
            ((=) (Uint64.to_int !count_6) (sub_pointer !p_2_1 s_11)))
           /\
           ((#"/home/work/workspace/self/verker/strspn.c" 10 20 43#
            (#"/home/work/workspace/self/verker/strspn.c" 10 20 43#
            ((#"/home/work/workspace/self/verker/strspn.c" 10 20 30#
             (Uint64.(<=) (#"whole_program.jc" 5163 42 55#
             "expl:Integer cast" (Uint64.of_int (0))) !count_6))
            /\
            (#"/home/work/workspace/self/verker/strspn.c" 10 25 43#
            (Uint64.(<=) !count_6 (strlen s_11 charP_charM_s_11_88))))))
           /\
           (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
           (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker/strspn.c" 9 20 26#
            (same_block s_11 !p_2_1))
           /\
           (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker/strspn.c" 9 20 26#
            ((<=) (sub_pointer s_11 !p_2_1) (0)))
           /\
           (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
           ((#"/home/work/workspace/self/verker/strspn.c" 9 25 43#
            (same_block !p_2_1
            (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_88)))))
           /\
           (#"/home/work/workspace/self/verker/strspn.c" 9 25 43#
           ((<=)
           (sub_pointer !p_2_1
           (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_88))))
           (0))))))))))))))) } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strspn.c" 18 13 23#
           (Safe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strspn.c" 18 13 15#
            "expl:Integer cast"
            (Safe_int32_of_Safe_int8.cast 
             (#"/home/work/workspace/self/verker/strspn.c" 18 13 15#
             "expl:Pointer dereference"
             (acc  voidP_s_11_88_alloc_table charP_charM_s_11_88 !p_2_1 )) ))
            (#"whole_program.jc" 5194 29 41# "expl:Integer cast"
            (Safe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_19_exc ())));
            try
             begin
             (a :=
              (let _jessie_1170 = accept_0 in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strspn.c" 25 7 17#
              "expl:Pointer index bounds" true) }); _jessie_1170 end));
              'Loop_86:
              loop
              invariant { (#"whole_program.jc" 5199 15 2530# true) }
                variant {
                  (#"/home/work/workspace/self/verker/strspn.c" 23 19 48#
                  (Int.(-)
                  (Uint64.to_int (strlen accept_0 charP_charM_accept_89))
                  (sub_pointer !a accept_0))) }
               begin
               any unit
               requires { true } reads { accept_0 }
               ensures {
                 ((#"/home/work/workspace/self/verker/strspn.c" 22 21 61#
                  ((in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
                   charP_charM_accept_89) ->
                   (in_array !a (select charP_charM_s_11_88 !p_2_1)
                   charP_charM_accept_89)))
                 /\
                 ((#"/home/work/workspace/self/verker/strspn.c" 21 21 33#
                  (valid_str !a voidP_accept_89_alloc_table
                  charP_charM_accept_89))
                 /\
                 ((#"/home/work/workspace/self/verker/strspn.c" 20 21 66#
                  (forall c_35 : (pointer voidP).
                   (((same_block accept_0 c_35) /\
                    (((<=) (sub_pointer accept_0 c_35) (0)) /\
                    ((same_block c_35 !a) /\ ((<) (sub_pointer c_35 !a) (0)))))
                    ->
                    (Int8.(<>) (select charP_charM_accept_89 c_35)
                    (select charP_charM_s_11_88 !p_2_1)))))
                 /\
                 (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                 (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker/strspn.c" 19 21 32#
                  (same_block accept_0 !a))
                 /\
                 (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker/strspn.c" 19 21 32#
                  ((<=) (sub_pointer accept_0 !a) (0)))
                 /\
                 (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                 ((#"/home/work/workspace/self/verker/strspn.c" 19 31 59#
                  (same_block !a
                  (shift accept_0
                  (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))))
                 /\
                 (#"/home/work/workspace/self/verker/strspn.c" 19 31 59#
                 ((<=)
                 (sub_pointer !a
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                 (0))))))))))))) } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strspn.c" 25 19 29#
                 (Safe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strspn.c" 25 19 21#
                  "expl:Integer cast"
                  (Safe_int32_of_Safe_int8.cast 
                   (#"/home/work/workspace/self/verker/strspn.c" 25 19 21#
                   "expl:Pointer dereference"
                   (acc  voidP_accept_89_alloc_table charP_charM_accept_89 !a
                    )) ))
                  (#"whole_program.jc" 5232 38 50# "expl:Integer cast"
                  (Safe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_2_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strspn.c" 26 7 15#
                  (Safe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strspn.c" 26 7 9#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strspn.c" 26 7 9#
                    "expl:Pointer dereference"
                    (acc  voidP_s_11_88_alloc_table charP_charM_s_11_88
                     !p_2_1 )) ))
                   (#"/home/work/workspace/self/verker/strspn.c" 26 13 15#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strspn.c" 26 13 15#
                    "expl:Pointer dereference"
                    (acc  voidP_accept_89_alloc_table charP_charM_accept_89
                     !a )) )) )) then (raise (Goto_while_1_break_2_exc ()))
                  else ());
                  (a :=
                   (let _jessie_1171 =
                   (shift_typesafe  !a
                    (Safe_int32.to_int 
                     (#"whole_program.jc" 5239 53 65# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) ) in
                   begin
                   (assert {
                   (#"/home/work/workspace/self/verker/strspn.c" 25 31 34#
                   "expl:Pointer index bounds" true) }); _jessie_1171 end))
                 end; (raise (Loop_continue_exc ())) end with
                 Loop_continue_exc _jessie_93 -> () end end end;
              (raise (Goto_while_1_break_2_exc ())) end with
             Goto_while_1_break_2_exc _jessie_89 ->
             'While_1_break_2:
             'While_1_break_2:
             begin
             ();
              (if
              (#"/home/work/workspace/self/verker/strspn.c" 29 6 16#
              (Safe_int32.(=) 
               (#"/home/work/workspace/self/verker/strspn.c" 29 6 8#
               "expl:Integer cast"
               (Safe_int32_of_Safe_int8.cast 
                (#"/home/work/workspace/self/verker/strspn.c" 29 6 8#
                "expl:Pointer dereference"
                (acc  voidP_accept_89_alloc_table charP_charM_accept_89 !a ))
                ))
               (#"whole_program.jc" 5244 32 44# "expl:Integer cast"
               (Safe_int32.of_int (0))) ))
              then
               begin
               begin
               any unit
               requires { true } reads { accept_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strspn.c" 30 14 35#
                 (not
                 (in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
                 charP_charM_accept_89))) } ; () end;
                begin
                (__retres_16 :=
                 (let _jessie_1172 = !count_6 in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/strspn.c" 31 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_1172 end));
                 (raise (Goto_return_label_9_exc ())) end end else ());
              begin
              any unit
              requires { true } reads { accept_0 }
              ensures {
                (#"/home/work/workspace/self/verker/strspn.c" 32 13 33#
                (in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
                charP_charM_accept_89)) } ; () end;
              (count_6 :=
               (let _jessie_1173 =
               (Safe_uint64.(+)  !count_6
                (#"whole_program.jc" 5265 62 75# "expl:Integer cast"
                (Safe_uint64.of_int (1))) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strspn.c" 33 2 9#
               "expl:Pointer index bounds" true) }); _jessie_1173 end)) end
             end;
            (p_2_1 :=
             (let _jessie_1174 =
             (shift_typesafe  !p_2_1
              (Safe_int32.to_int 
               (#"whole_program.jc" 5267 48 60# "expl:Integer cast"
               (Safe_int32.of_int (1))) ) ) in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strspn.c" 18 25 28#
             "expl:Pointer index bounds" true) }); _jessie_1174 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_95 -> () end end end;
        (raise (Goto_while_0_break_19_exc ())) end end with
      Goto_while_0_break_19_exc _jessie_90 ->
      'While_0_break_19:
      'While_0_break_19:
      begin
      ();
       (__retres_16 :=
        (let _jessie_1176 = !count_6 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strspn.c" 35 1 14#
        "expl:Pointer index bounds" true) }); _jessie_1176 end)) end end;
      (raise (Goto_return_label_9_exc ())) end with Goto_return_label_9_exc
     _jessie_91 ->
     'Return_label_9:
     'Return_label_9:
     begin
     (return :=
      (let _jessie_1177 = !__retres_16 in
      begin
      (assert {
      (#"whole_program.jc" 5273 7 25# "expl:Pointer index bounds" true) });
       _jessie_1177 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Function_strspn_0_behaviors
#"/home/work/workspace/self/verker/strspn.h" 69 7 48#
"expl:strspn, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  let strspn_ensures_default
  #"/home/work/workspace/self/verker/strspn.h" 69 7 48#
  "expl:Function strspn, default behavior" =
  fun
   (s_11 : (pointer voidP)) (accept_0 : (pointer voidP))
   (voidP_s_11_88_alloc_table : (alloc_table voidP))
   (voidP_accept_89_alloc_table : (alloc_table voidP))
   (voidP_accept_89_tag_table : (tag_table voidP)) (voidP_s_11_88_tag_table :
   (tag_table voidP)) (charP_charM_s_11_88 : (memory voidP Int8.t))
   (charP_charM_accept_89 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_accept_89_alloc_table accept_0) ->
     (((=) (typeof voidP_accept_89_tag_table accept_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_accept_89_alloc_table accept_0) i) /\
       ((<) i (offset_max voidP_accept_89_alloc_table accept_0))) ->
       ((=) (typeof voidP_accept_89_tag_table (shift accept_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_11_88_alloc_table s_11) ->
     (((=) (typeof voidP_s_11_88_tag_table s_11) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_11_88_alloc_table s_11) i) /\
       ((<) i (offset_max voidP_s_11_88_alloc_table s_11))) ->
       ((=) (typeof voidP_s_11_88_tag_table (shift s_11 i)) charP_tag)))))
   /\
   (#"whole_program.jc" 5090 12 97#
   ((#"/home/work/workspace/self/verker/strspn.h" 60 13 25#
    (valid_str s_11 voidP_s_11_88_alloc_table charP_charM_s_11_88))
   /\
   (#"/home/work/workspace/self/verker/strspn.h" 61 13 30#
   (valid_str accept_0 voidP_accept_89_alloc_table charP_charM_accept_89))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strspn.h" 63 12 24#
      "expl:Ensures clause"
      (Uint64.(<=) (#"whole_program.jc" 5094 35 48# "expl:Integer cast"
      (Uint64.of_int (0))) result))
     /\
     (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strspn.h" 63 17 37#
      "expl:Ensures clause"
      (Uint64.(<=) result (strlen s_11 charP_charM_s_11_88)))
     /\
     (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strspn.h" 64 12 87#
      "expl:Ensures clause"
      (forall t_7_0 : (pointer voidP).
       (((same_block accept_0 t_7_0) /\
        (((<=) (sub_pointer accept_0 t_7_0) (0)) /\
        ((same_block t_7_0
         (shift accept_0
         (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
        /\
        ((<)
        (sub_pointer t_7_0
        (shift accept_0
        (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))) (0))))) ->
        (Int8.(<>)
        (select charP_charM_s_11_88 (shift s_11 (Uint64.to_int result)))
        (select charP_charM_accept_89 t_7_0)))))
     /\
     (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strspn.h" 65 12 134#
      "expl:Ensures clause"
      (forall p_21_0 : (pointer voidP).
       (((same_block s_11 p_21_0) /\
        (((<=) (sub_pointer s_11 p_21_0) (0)) /\
        ((same_block p_21_0 (shift s_11 (Uint64.to_int result))) /\
        ((<) (sub_pointer p_21_0 (shift s_11 (Uint64.to_int result))) (0)))))
        ->
        (exists t_8_0 : (pointer voidP).
         ((same_block accept_0 t_8_0) /\
         (((<=) (sub_pointer accept_0 t_8_0) (0)) /\
         ((same_block t_8_0
          (shift accept_0
          (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
         /\
         (((<)
          (sub_pointer t_8_0
          (shift accept_0
          (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))) (0))
         /\
         (Int8.(=) (select charP_charM_s_11_88 p_21_0)
         (select charP_charM_accept_89 t_8_0))))))))))
     /\
     (#"/home/work/workspace/self/verker/strspn.h" 67 12 40#
     "expl:Ensures clause"
     ((=) (Uint64.to_int result) (strspn s_11 accept_0))))))))))))) }
   diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (let p_2_1 = ref (any_pointer  () : (pointer voidP)) in
    (let a = ref (any_pointer  () : (pointer voidP)) in
    (let count_6 = ref (Unsafe_uint64.any_  () ) in
    (let __retres_16 = ref (Unsafe_uint64.any_  () ) in
    try
     begin
     try
      begin
      (count_6 :=
       (#"whole_program.jc" 5146 28 41# "expl:Integer cast"
       (Unsafe_uint64.of_int (0))));
       begin
       (p_2_1 := s_11);
        'Loop_83:
        loop
        invariant
          { ((#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
             (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker/strspn.c" 9 20 26#
              (same_block s_11 !p_2_1))
             /\
             (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker/strspn.c" 9 20 26#
              ((<=) (sub_pointer s_11 !p_2_1) (0)))
             /\
             (#"/home/work/workspace/self/verker/strspn.c" 9 20 43#
             ((#"/home/work/workspace/self/verker/strspn.c" 9 25 43#
              (same_block !p_2_1
              (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_88)))))
             /\
             (#"/home/work/workspace/self/verker/strspn.c" 9 25 43#
             ((<=)
             (sub_pointer !p_2_1
             (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_88))))
             (0))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strspn.c" 10 20 30#
              (Uint64.(<=) (#"whole_program.jc" 5163 42 55#
              "expl:Integer cast" (Uint64.of_int (0))) !count_6))
             /\
             (#"/home/work/workspace/self/verker/strspn.c" 10 25 43#
             (Uint64.(<=) !count_6 (strlen s_11 charP_charM_s_11_88))))))
            &&
            ((#"/home/work/workspace/self/verker/strspn.c" 11 20 34#
             ((=) (Uint64.to_int !count_6) (sub_pointer !p_2_1 s_11)))
            &&
            ((#"/home/work/workspace/self/verker/strspn.c" 12 20 140#
             (forall c_34 : (pointer voidP).
              (((same_block s_11 c_34) /\
               (((<=) (sub_pointer s_11 c_34) (0)) /\
               ((same_block c_34 !p_2_1) /\
               ((<) (sub_pointer c_34 !p_2_1) (0))))) ->
               (exists t_13 : (pointer voidP).
                ((same_block accept_0 t_13) /\
                (((<=) (sub_pointer accept_0 t_13) (0)) /\
                ((same_block t_13
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                /\
                (((<)
                 (sub_pointer t_13
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_88 c_34)
                (select charP_charM_accept_89 t_13))))))))))
            &&
            ((#"/home/work/workspace/self/verker/strspn.c" 14 20 32#
             (valid_str !p_2_1 voidP_s_11_88_alloc_table charP_charM_s_11_88))
            &&
            (#"/home/work/workspace/self/verker/strspn.c" 15 20 66#
            ((=) (strspn s_11 accept_0)
            (Int.(+) (strspn !p_2_1 accept_0) (Uint64.to_int !count_6))))))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           begin
           (if
           (#"/home/work/workspace/self/verker/strspn.c" 18 13 23#
           (Unsafe_int32.(<>) 
            (#"/home/work/workspace/self/verker/strspn.c" 18 13 15#
            "expl:Integer cast"
            (Unsafe_int32_of_Unsafe_int8.cast 
             (acc  charP_charM_s_11_88 !p_2_1 ) ))
            (#"whole_program.jc" 5194 29 41# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) )) then ()
           else (raise (Goto_while_0_break_19_exc ())));
            try
             begin
             (a := accept_0);
              'Loop_84:
              loop
              invariant
                { ((#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                   (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker/strspn.c" 19 21 32#
                    (same_block accept_0 !a))
                   /\
                   (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker/strspn.c" 19 21 32#
                    ((<=) (sub_pointer accept_0 !a) (0)))
                   /\
                   (#"/home/work/workspace/self/verker/strspn.c" 19 21 59#
                   ((#"/home/work/workspace/self/verker/strspn.c" 19 31 59#
                    (same_block !a
                    (shift accept_0
                    (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))))
                   /\
                   (#"/home/work/workspace/self/verker/strspn.c" 19 31 59#
                   ((<=)
                   (sub_pointer !a
                   (shift accept_0
                   (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                   (0))))))))))
                  &&
                  ((#"/home/work/workspace/self/verker/strspn.c" 20 21 66#
                   (forall c_35 : (pointer voidP).
                    (((same_block accept_0 c_35) /\
                     (((<=) (sub_pointer accept_0 c_35) (0)) /\
                     ((same_block c_35 !a) /\
                     ((<) (sub_pointer c_35 !a) (0))))) ->
                     (Int8.(<>) (select charP_charM_accept_89 c_35)
                     (select charP_charM_s_11_88 !p_2_1)))))
                  &&
                  ((#"/home/work/workspace/self/verker/strspn.c" 21 21 33#
                   (valid_str !a voidP_accept_89_alloc_table
                   charP_charM_accept_89))
                  &&
                  (#"/home/work/workspace/self/verker/strspn.c" 22 21 61#
                  ((in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
                   charP_charM_accept_89) ->
                   (in_array !a (select charP_charM_s_11_88 !p_2_1)
                   charP_charM_accept_89)))))) } 
               begin
               any unit requires { true } ensures { true } ;
                try
                 begin
                 begin
                 (if
                 (#"/home/work/workspace/self/verker/strspn.c" 25 19 29#
                 (Unsafe_int32.(<>) 
                  (#"/home/work/workspace/self/verker/strspn.c" 25 19 21#
                  "expl:Integer cast"
                  (Unsafe_int32_of_Unsafe_int8.cast 
                   (acc  charP_charM_accept_89 !a ) ))
                  (#"whole_program.jc" 5232 38 50# "expl:Integer cast"
                  (Unsafe_int32.of_int (0))) )) then ()
                 else (raise (Goto_while_1_break_2_exc ())));
                  (if
                  (#"/home/work/workspace/self/verker/strspn.c" 26 7 15#
                  (Unsafe_int32.(=) 
                   (#"/home/work/workspace/self/verker/strspn.c" 26 7 9#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_s_11_88 !p_2_1 ) ))
                   (#"/home/work/workspace/self/verker/strspn.c" 26 13 15#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_accept_89 !a ) )) ))
                  then (raise (Goto_while_1_break_2_exc ())) else ());
                  (a :=
                   (shift_  !a
                    (Unsafe_int32.to_int 
                     (#"whole_program.jc" 5239 53 65# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) ) )) end;
                  (raise (Loop_continue_exc ())) end with Loop_continue_exc
                 _jessie_93 -> () end end end;
              (raise (Goto_while_1_break_2_exc ())) end with
             Goto_while_1_break_2_exc _jessie_89 ->
             'While_1_break_2:
             'While_1_break_2:
             begin
             ();
              (if
              (#"/home/work/workspace/self/verker/strspn.c" 29 6 16#
              (Unsafe_int32.(=) 
               (#"/home/work/workspace/self/verker/strspn.c" 29 6 8#
               "expl:Integer cast"
               (Unsafe_int32_of_Unsafe_int8.cast 
                (acc  charP_charM_accept_89 !a ) ))
               (#"whole_program.jc" 5244 32 44# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) ))
              then
               begin
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strspn.c" 30 14 35#
               "expl:Assertion in line 30"
               (not
               (in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
               charP_charM_accept_89))) }); () end;
                begin
                (__retres_16 := !count_6);
                 (raise (Goto_return_label_9_exc ())) end end else ());
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strspn.c" 32 13 33#
              "expl:Assertion in line 32"
              (in_array accept_0 (select charP_charM_s_11_88 !p_2_1)
              charP_charM_accept_89)) }); () end;
              (count_6 :=
               (Unsafe_uint64.(+)  !count_6
                (#"whole_program.jc" 5265 62 75# "expl:Integer cast"
                (Unsafe_uint64.of_int (1))) )) end end;
            (p_2_1 :=
             (shift_  !p_2_1
              (Unsafe_int32.to_int 
               (#"whole_program.jc" 5267 48 60# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) ) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_95 -> () end end end;
        (raise (Goto_while_0_break_19_exc ())) end end with
      Goto_while_0_break_19_exc _jessie_90 ->
      'While_0_break_19:
      'While_0_break_19: begin (); (__retres_16 := !count_6) end end;
      (raise (Goto_return_label_9_exc ())) end with Goto_return_label_9_exc
     _jessie_91 ->
     'Return_label_9:
     'Return_label_9: begin (return := !__retres_16); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct__BoolP

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function _BoolP_tag  : (tag_id _BoolP)
  
  axiom U__BoolP_parenttag_bottom :
  (parenttag _BoolP_tag bottom_tag)
  
  axiom U__BoolP_is_final :
  (forall _BoolP_tag_table : (tag_table _BoolP).
   (forall p : (pointer _BoolP).
    ((instanceof _BoolP_tag_table p _BoolP_tag) ->
     ((=) (typeof _BoolP_tag_table p) _BoolP_tag))))
  
  predicate frame_tag_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_tag_table : (tag_table _BoolP)) (_BoolP_tag_table : (tag_table
  _BoolP))
  =
     ((tag_extends old__BoolP_tag_table _BoolP_tag_table) /\
     (alloc_tag_block old__BoolP_tag_table _BoolP_tag_table p))
  
  predicate frame_free_struct__BoolP (p : (pointer _BoolP))
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((free_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (free_block old__BoolP_alloc_table _BoolP_alloc_table p))
  
  predicate frame_alloc_struct__BoolP (p : (pointer _BoolP)) (n : int)
  (old__BoolP_alloc_table : (alloc_table _BoolP)) (_BoolP_alloc_table :
  (alloc_table _BoolP))
  =
     ((alloc_extends old__BoolP_alloc_table _BoolP_alloc_table) /\
     (alloc_block old__BoolP_alloc_table _BoolP_alloc_table p n))
  
  predicate fresh_tag_struct__BoolP (p : (pointer _BoolP)) (_BoolP_tag_table
  : (tag_table _BoolP)) = (tag_fresh _BoolP_tag_table p)
  
  predicate fresh_alloc_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = (alloc_fresh _BoolP_alloc_table p)
  
  predicate container_of_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate container_of_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP)) = true
  
  predicate typeof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = ((=) (typeof _BoolP_tag_table p) _BoolP_tag)
  
  predicate typeof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r : int)
  (_BoolP_tag_table : (tag_table _BoolP))
  =
     (((=) (typeof _BoolP_tag_table p) _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof _BoolP_tag_table (shift p i)) _BoolP_tag))))
  
  predicate instanceof_singleton_struct__BoolP (p : (pointer _BoolP))
  (_BoolP_tag_table : (tag_table _BoolP))
  = (instanceof _BoolP_tag_table p _BoolP_tag)
  
  predicate instanceof_struct__BoolP (p : (pointer _BoolP)) (l : int) (r :
  int) (_BoolP_tag_table : (tag_table _BoolP))
  =
     ((instanceof _BoolP_tag_table p _BoolP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof _BoolP_tag_table (shift p i) _BoolP_tag))))
  
  predicate right_valid_struct__BoolP (p : (pointer _BoolP)) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((>=) (offset_max _BoolP_alloc_table p) b)
  
  predicate left_valid_struct__BoolP (p : (pointer _BoolP)) (a : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  = ((<=) (offset_min _BoolP_alloc_table p) a)
  
  predicate valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b : int)
  (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((<=) (offset_min _BoolP_alloc_table p) a) /\
     ((>=) (offset_max _BoolP_alloc_table p) b))
  
  predicate strict_valid_struct__BoolP (p : (pointer _BoolP)) (a : int) (b :
  int) (_BoolP_alloc_table : (alloc_table _BoolP))
  =
     (((=) (offset_min _BoolP_alloc_table p) a) /\
     ((=) (offset_max _BoolP_alloc_table p) b))
  
  axiom U__BoolP_int : ((=) (int_of_tag _BoolP_tag) (4))
  
end

module Struct__BoolP_unsafe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !_BoolP_alloc_table p)) }
    writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP_requires
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { ((>=) n (0)) } writes { _BoolP_alloc_table, _BoolP_tag_table
     }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
end

module Struct__BoolP_safe

  use import Struct__BoolP 
  
  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct__BoolP
  (p : (pointer _BoolP)) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) : unit
    requires { true } writes { _BoolP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !_BoolP_alloc_table (old !_BoolP_alloc_table)))
      \/
      ((frame_free_struct__BoolP p (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\ (fresh_alloc_struct__BoolP p !_BoolP_alloc_table))) }
  
  val allocate_struct__BoolP
  (n : int) 
   (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
    (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
     requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
     ensures {
       ((strict_valid_struct__BoolP result (0) (Int.(-) n (1))
        !_BoolP_alloc_table)
       /\
       ((frame_alloc_struct__BoolP result n (old !_BoolP_alloc_table)
        !_BoolP_alloc_table)
       /\
       ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
        !_BoolP_tag_table)
       /\
       ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
       ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
       ((typeof_struct__BoolP result (0) n !_BoolP_tag_table) /\
       (container_of_struct__BoolP result (0) n !_BoolP_tag_table))))))) }
  
  val allocate_singleton_struct__BoolP
  (_BoolP_alloc_table : ref (alloc_table _BoolP)) 
   (_BoolP_tag_table : ref (tag_table _BoolP)) : (pointer _BoolP)
    requires { true } writes { _BoolP_alloc_table, _BoolP_tag_table }
    ensures {
      ((strict_valid_struct__BoolP result (0) (0) !_BoolP_alloc_table) /\
      ((frame_alloc_struct__BoolP result (1) (old !_BoolP_alloc_table)
       !_BoolP_alloc_table)
      /\
      ((frame_tag_struct__BoolP result (old !_BoolP_tag_table)
       !_BoolP_tag_table)
      /\
      ((fresh_alloc_struct__BoolP result (old !_BoolP_alloc_table)) /\
      ((fresh_tag_struct__BoolP result (old !_BoolP_tag_table)) /\
      ((typeof_singleton_struct__BoolP result !_BoolP_tag_table) /\
      (container_of_singleton_struct__BoolP result !_BoolP_tag_table))))))) }
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

theory Struct_char_xP

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function char_xP_tag  : (tag_id char_xP)
  
  axiom Char_xP_parenttag_bottom :
  (parenttag char_xP_tag bottom_tag)
  
  axiom Char_xP_is_final :
  (forall char_xP_tag_table : (tag_table char_xP).
   (forall p : (pointer char_xP).
    ((instanceof char_xP_tag_table p char_xP_tag) ->
     ((=) (typeof char_xP_tag_table p) char_xP_tag))))
  
  predicate frame_tag_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_tag_table : (tag_table char_xP)) (char_xP_tag_table :
  (tag_table char_xP))
  =
     ((tag_extends old_char_xP_tag_table char_xP_tag_table) /\
     (alloc_tag_block old_char_xP_tag_table char_xP_tag_table p))
  
  predicate frame_free_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((free_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (free_block old_char_xP_alloc_table char_xP_alloc_table p))
  
  predicate frame_alloc_struct_char_xP (p : (pointer char_xP)) (n : int)
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((alloc_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (alloc_block old_char_xP_alloc_table char_xP_alloc_table p n))
  
  predicate fresh_tag_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (tag_fresh char_xP_tag_table p)
  
  predicate fresh_alloc_struct_char_xP (p : (pointer char_xP))
  (char_xP_alloc_table : (alloc_table char_xP))
  = (alloc_fresh char_xP_alloc_table p)
  
  predicate container_of_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate container_of_struct_char_xP (p : (pointer char_xP)) (l : int) (r
  : int) (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate typeof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = ((=) (typeof char_xP_tag_table p) char_xP_tag)
  
  predicate typeof_struct_char_xP (p : (pointer char_xP)) (l : int) (r : int)
  (char_xP_tag_table : (tag_table char_xP))
  =
     (((=) (typeof char_xP_tag_table p) char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof char_xP_tag_table (shift p i)) char_xP_tag))))
  
  predicate instanceof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (instanceof char_xP_tag_table p char_xP_tag)
  
  predicate instanceof_struct_char_xP (p : (pointer char_xP)) (l : int) (r :
  int) (char_xP_tag_table : (tag_table char_xP))
  =
     ((instanceof char_xP_tag_table p char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof char_xP_tag_table (shift p i) char_xP_tag))))
  
  predicate right_valid_struct_char_xP (p : (pointer char_xP)) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((>=) (offset_max char_xP_alloc_table p) b)
  
  predicate left_valid_struct_char_xP (p : (pointer char_xP)) (a : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((<=) (offset_min char_xP_alloc_table p) a)
  
  predicate valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((<=) (offset_min char_xP_alloc_table p) a) /\
     ((>=) (offset_max char_xP_alloc_table p) b))
  
  predicate strict_valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b
  : int) (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((=) (offset_min char_xP_alloc_table p) a) /\
     ((=) (offset_max char_xP_alloc_table p) b))
  
  axiom Char_xP_int : ((=) (int_of_tag char_xP_tag) (5))
  
end

module Struct_char_xP_unsafe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !char_xP_alloc_table p)) }
    writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP_requires
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { ((>=) n (0)) } writes { char_xP_alloc_table,
     char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
end

module Struct_char_xP_safe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires { true } writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
  val allocate_singleton_struct_char_xP
  (char_xP_alloc_table : ref (alloc_table char_xP)) 
   (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
    requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
    ensures {
      ((strict_valid_struct_char_xP result (0) (0) !char_xP_alloc_table) /\
      ((frame_alloc_struct_char_xP result (1) (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\
      ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
       !char_xP_tag_table)
      /\
      ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
      ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
      ((typeof_singleton_struct_char_xP result !char_xP_tag_table) /\
      (container_of_singleton_struct_char_xP result !char_xP_tag_table)))))))
      }
  
end

module Struct_unsigned_charP_unsafe

  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_unsigned_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_unsigned_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !voidP_alloc_table))) }
  
  val allocate_struct_unsigned_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_unsigned_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_unsigned_charP result (0) n !voidP_tag_table)))))))
       }
  
end

module Struct_unsigned_charP_safe

  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_unsigned_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_unsigned_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !voidP_alloc_table))) }
  
  val allocate_struct_unsigned_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_unsigned_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_unsigned_charP result (0) n !voidP_tag_table)))))))
       }
  
  val allocate_singleton_struct_unsigned_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_unsigned_charP result (0) (0) !voidP_alloc_table)
      /\
      ((frame_alloc_struct_unsigned_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_unsigned_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_unsigned_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_unsigned_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_unsigned_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_unsigned_charP result !voidP_tag_table)))))))
      }
  
end

theory Struct_unsigned_intP

  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function unsigned_intP_tag  : (tag_id
  unsigned_intP)
  
  axiom Unsigned_intP_parenttag_bottom :
  (parenttag unsigned_intP_tag bottom_tag)
  
  axiom Unsigned_intP_is_final :
  (forall unsigned_intP_tag_table : (tag_table unsigned_intP).
   (forall p : (pointer unsigned_intP).
    ((instanceof unsigned_intP_tag_table p unsigned_intP_tag) ->
     ((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag))))
  
  predicate frame_tag_struct_unsigned_intP (p : (pointer unsigned_intP))
  (old_unsigned_intP_tag_table : (tag_table unsigned_intP))
  (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     ((tag_extends old_unsigned_intP_tag_table unsigned_intP_tag_table) /\
     (alloc_tag_block old_unsigned_intP_tag_table unsigned_intP_tag_table p))
  
  predicate frame_free_struct_unsigned_intP (p : (pointer unsigned_intP))
  (old_unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     ((free_extends old_unsigned_intP_alloc_table unsigned_intP_alloc_table)
     /\
     (free_block old_unsigned_intP_alloc_table unsigned_intP_alloc_table p))
  
  predicate frame_alloc_struct_unsigned_intP (p : (pointer unsigned_intP)) (n
  : int) (old_unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     ((alloc_extends old_unsigned_intP_alloc_table unsigned_intP_alloc_table)
     /\
     (alloc_block old_unsigned_intP_alloc_table unsigned_intP_alloc_table p
     n))
  
  predicate fresh_tag_struct_unsigned_intP (p : (pointer unsigned_intP))
  (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = (tag_fresh unsigned_intP_tag_table p)
  
  predicate fresh_alloc_struct_unsigned_intP (p : (pointer unsigned_intP))
  (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = (alloc_fresh unsigned_intP_alloc_table p)
  
  predicate container_of_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = true
  
  predicate container_of_struct_unsigned_intP (p : (pointer unsigned_intP))
  (l : int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = true
  
  predicate typeof_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = ((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag)
  
  predicate typeof_struct_unsigned_intP (p : (pointer unsigned_intP)) (l :
  int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     (((=) (typeof unsigned_intP_tag_table p) unsigned_intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof unsigned_intP_tag_table (shift p i)) unsigned_intP_tag))))
  
  predicate instanceof_singleton_struct_unsigned_intP (p : (pointer
  unsigned_intP)) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  = (instanceof unsigned_intP_tag_table p unsigned_intP_tag)
  
  predicate instanceof_struct_unsigned_intP (p : (pointer unsigned_intP)) (l
  : int) (r : int) (unsigned_intP_tag_table : (tag_table unsigned_intP))
  =
     ((instanceof unsigned_intP_tag_table p unsigned_intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof unsigned_intP_tag_table (shift p i) unsigned_intP_tag))))
  
  predicate right_valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (b
  : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = ((>=) (offset_max unsigned_intP_alloc_table p) b)
  
  predicate left_valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (a
  : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  = ((<=) (offset_min unsigned_intP_alloc_table p) a)
  
  predicate valid_struct_unsigned_intP (p : (pointer unsigned_intP)) (a :
  int) (b : int) (unsigned_intP_alloc_table : (alloc_table unsigned_intP))
  =
     (((<=) (offset_min unsigned_intP_alloc_table p) a) /\
     ((>=) (offset_max unsigned_intP_alloc_table p) b))
  
  predicate strict_valid_struct_unsigned_intP (p : (pointer unsigned_intP))
  (a : int) (b : int) (unsigned_intP_alloc_table : (alloc_table
  unsigned_intP))
  =
     (((=) (offset_min unsigned_intP_alloc_table p) a) /\
     ((=) (offset_max unsigned_intP_alloc_table p) b))
  
  axiom Unsigned_intP_int : ((=) (int_of_tag unsigned_intP_tag) (7))
  
end

module Struct_unsigned_intP_unsafe

  use import Struct_unsigned_intP 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_unsigned_intP
  (p : (pointer unsigned_intP)) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !unsigned_intP_alloc_table p)) }
    writes { unsigned_intP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_intP_alloc_table (old !unsigned_intP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_intP p (old !unsigned_intP_alloc_table)
       !unsigned_intP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_intP p !unsigned_intP_alloc_table))) }
  
  val allocate_struct_unsigned_intP_requires
  (n : int) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
    (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
     unsigned_intP)
     requires { ((>=) n (0)) } writes { unsigned_intP_alloc_table,
     unsigned_intP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_intP result (0) (Int.(-) n (1))
        !unsigned_intP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_intP result n (old
        !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
        !unsigned_intP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_intP result (old
        !unsigned_intP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_intP result (old
        !unsigned_intP_tag_table))
       /\
       ((typeof_struct_unsigned_intP result (0) n !unsigned_intP_tag_table)
       /\
       (container_of_struct_unsigned_intP result (0) n
       !unsigned_intP_tag_table))))))) }
  
end

module Struct_unsigned_intP_safe

  use import Struct_unsigned_intP 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_unsigned_intP
  (p : (pointer unsigned_intP)) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) : unit
    requires { true } writes { unsigned_intP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_intP_alloc_table (old !unsigned_intP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_intP p (old !unsigned_intP_alloc_table)
       !unsigned_intP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_intP p !unsigned_intP_alloc_table))) }
  
  val allocate_struct_unsigned_intP
  (n : int) 
   (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
    (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
     unsigned_intP)
     requires { true } writes { unsigned_intP_alloc_table,
     unsigned_intP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_intP result (0) (Int.(-) n (1))
        !unsigned_intP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_intP result n (old
        !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
        !unsigned_intP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_intP result (old
        !unsigned_intP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_intP result (old
        !unsigned_intP_tag_table))
       /\
       ((typeof_struct_unsigned_intP result (0) n !unsigned_intP_tag_table)
       /\
       (container_of_struct_unsigned_intP result (0) n
       !unsigned_intP_tag_table))))))) }
  
  val allocate_singleton_struct_unsigned_intP
  (unsigned_intP_alloc_table : ref (alloc_table unsigned_intP)) 
   (unsigned_intP_tag_table : ref (tag_table unsigned_intP)) : (pointer
    unsigned_intP)
    requires { true } writes { unsigned_intP_alloc_table,
    unsigned_intP_tag_table }
    ensures {
      ((strict_valid_struct_unsigned_intP result (0) (0)
       !unsigned_intP_alloc_table)
      /\
      ((frame_alloc_struct_unsigned_intP result (1) (old
       !unsigned_intP_alloc_table) !unsigned_intP_alloc_table)
      /\
      ((frame_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table)
       !unsigned_intP_tag_table)
      /\
      ((fresh_alloc_struct_unsigned_intP result (old
       !unsigned_intP_alloc_table))
      /\
      ((fresh_tag_struct_unsigned_intP result (old !unsigned_intP_tag_table))
      /\
      ((typeof_singleton_struct_unsigned_intP result
       !unsigned_intP_tag_table)
      /\
      (container_of_singleton_struct_unsigned_intP result
      !unsigned_intP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

theory Enum__bool_of_Uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint8.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

theory Enum__bool_of_Uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint64.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

theory Enum__bool_of_Uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint32.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

theory Enum__bool_of_Uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint16.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

theory Enum__bool_of_Int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Enum__bool.t
  = (Enum__bool.of_int (Int8.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

theory Enum__bool_of_Int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Enum__bool.t
  = (Enum__bool.of_int (Int64.to_int n))
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

theory Enum__bool_of_Int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Enum__bool.t
  = (Enum__bool.of_int (Int32.to_int n))
  
end

module Safe_enum__bool_of_Safe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

theory Enum__bool_of_Int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Enum__bool.t
  = (Enum__bool.of_int (Int16.to_int n))
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint8_of_Safe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint8_of_Enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint8.t
  = (Uint8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint64_of_Safe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint64_of_Enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint64.t
  = (Uint64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint32_of_Safe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint32_of_Enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint32.t
  = (Uint32.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint16_of_Safe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint16_of_Enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint16.t
  = (Uint16.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_int8_of_Safe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int8_of_Enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int8.t
  = (Int8.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_int64_of_Safe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int64_of_Enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int64.t
  = (Int64.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Safe_int32_of_Safe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int32_of_Enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int32.t
  = (Int32.of_int (Enum__bool.to_int n))
  
end

module Safe_int16_of_Safe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int16_of_Enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int16.t
  = (Int16.of_int (Enum__bool.to_int n))
  
end

theory Axiomatic_Jessie_memory_reinterpretation_predicates

  use Uint8_of_Int8 
  
  use enum.Uint8 
  
  use enum.Int8 
  
  use import int.Int 
  
  use enum.Bit_uint8_of_bit_int8 
  
  use enum.Bit_int8_of_bit_uint8 
  
  use why3.Bool.Bool 
  
  predicate uint8_as_uint8 (d0 : Uint8.t) (a0 : Uint8.t)
  = ((Uint8.(=) d0 a0) /\ ((=) d0 a0))
  
  
  function complement_to_uint8 (v : Int8.t) : Uint8.t
  =
     (if ((>=) (Int8.to_int v) (0)) then (#"whole_program.jc" 16 20 32#
      "expl:Integer cast" (Uint8_of_Int8.cast v)) else
      (#"whole_program.jc" 16 38 71# "expl:Integer cast"
      (Uint8.of_int (Int.(+) (Int8.to_int v) (256)))))
  
  
  predicate int8_as_uint8 (d0_1 : Int8.t) (a0_1 : Uint8.t)
  =
     ((uint8_as_uint8 (complement_to_uint8 d0_1) a0_1) /\
     (Bit_uint8_of_bit_int8.bit_int8_as_bit_uint8 d0_1 a0_1))
  
  
  predicate uint8_as_int8 (d0_0 : Int8.t) (a0_0 : Uint8.t)
  =
     ((uint8_as_uint8 (complement_to_uint8 d0_0) a0_0) /\
     (Bit_int8_of_bit_uint8.bit_uint8_as_bit_int8 d0_0 a0_0))
  
  
end

module Function_isalnum_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalnum_0
  (c_2_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 77 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalnum (Int8.to_int c_2_0)))) }
  
end

module Function_isalnum_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalnum_0
  (c_2_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 77 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalnum (Int8.to_int c_2_0)))) }
  
end

module Function_isalpha_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalpha_0
  (c_3_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 79 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalpha (Int8.to_int c_3_0)))) }
  
end

module Function_isalpha_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isalpha_0
  (c_3_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 79 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (isalpha (Int8.to_int c_3_0)))) }
  
end

module Function_islower_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val islower_0
  (c_6_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 83 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (islower (Int8.to_int c_6_0)))) }
  
end

module Function_islower_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val islower_0
  (c_6_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 83 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     (islower (Int8.to_int c_6_0)))) }
  
end

module Function_isupper_0

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isupper_0
  (c_9 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 89 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <-> (isupper (Int8.to_int c_9))))
     }
  
end

module Function_isupper_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isupper_0
  (c_9 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 89 12 35#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <-> (isupper (Int8.to_int c_9))))
     }
  
end

module Function_isascii

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val isascii
  (c_4_0 : Int8.t) : Enum__bool.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 94 12 40#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     ((Int8.(<=) (#"whole_program.jc" 232 23 34# "expl:Integer cast"
      (Int8.of_int (0))) c_4_0)
     /\
     (Int8.(<=) c_4_0 (#"whole_program.jc" 233 40 53# "expl:Integer cast"
     (Int8.of_int (127))))))) }
  
end

module Function_isascii_safe

  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val isascii
  (c_4_0 : Int8.t) : Enum__bool.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 94 12 40#
     "expl:Ensures clause"
     (((<>) (Enum__bool.to_int result) (0)) <->
     ((Int8.(<=) (#"whole_program.jc" 232 23 34# "expl:Integer cast"
      (Int8.of_int (0))) c_4_0)
     /\
     (Int8.(<=) c_4_0 (#"whole_program.jc" 233 40 53# "expl:Integer cast"
     (Int8.of_int (127))))))) }
  
end

module Function_isdigit_0

  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isdigit_0
  (c_5_0 : Int32.t) : Int32.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 99 12 35#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isdigit (Int32.to_int c_5_0)))) }
  
end

module Function_isdigit_0_safe

  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isdigit_0
  (c_5_0 : Int32.t) : Int32.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 99 12 35#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isdigit (Int32.to_int c_5_0)))) }
  
end

module Function___tolower

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __tolower
  (c_11 : Uint8.t) : Uint8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 102 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (tolower (Uint8.to_int c_11)))) }
  
end

module Function___tolower_safe

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __tolower
  (c_11 : Uint8.t) : Uint8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 102 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (tolower (Uint8.to_int c_11)))) }
  
end

module Function___toupper

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __toupper
  (c_0_0 : Uint8.t) : Uint8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 105 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (toupper (Uint8.to_int c_0_0)))) }
  
end

module Function___toupper_safe

  use enum.Uint8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val __toupper
  (c_0_0 : Uint8.t) : Uint8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 105 12 33#
     "expl:Ensures clause"
     ((=) (Uint8.to_int result) (toupper (Uint8.to_int c_0_0)))) }
  
end

module Function_toupper_0

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val toupper_0
  (c_19 : Int8.t) : Int8.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 114 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (toupper (Int8.to_int c_19)))) }
  
end

module Function_toupper_0_safe

  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val toupper_0
  (c_19 : Int8.t) : Int8.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 114 12 33#
     "expl:Ensures clause"
     ((=) (Int8.to_int result) (toupper (Int8.to_int c_19)))) }
  
end

module Function_isodigit_0

  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isodigit_0
  (c_7_0 : Int8.t) : Int32.t
   requires { true }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 126 12 36#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isodigit (Int8.to_int c_7_0)))) }
  
end

module Function_isodigit_0_safe

  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val isodigit_0
  (c_7_0 : Int8.t) : Int32.t
   requires { (true) }
   ensures {
     (#"/home/work/workspace/self/verker/ctype.h" 126 12 36#
     "expl:Ensures clause"
     (((<>) (Int32.to_int result) (0)) <-> (isodigit (Int8.to_int c_7_0)))) }
  
end

module Function__parse_integer_fixup_radix

  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _parse_integer_fixup_radix
  (s_2 : (pointer voidP)) 
   (base : (pointer unsigned_intP)) 
    (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP
     Uint32.t)) 
     (voidP_s_5_alloc_table : (alloc_table voidP)) 
      (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP)) 
       (voidP_s_5_tag_table : (tag_table voidP)) 
        (charP_charM_s_5 : (memory voidP Int8.t)) : (pointer voidP)
         requires { true } reads { unsigned_intP_unsigned_intM_base_6 }
         writes { unsigned_intP_unsigned_intM_base_6 }
         ensures {
           (((allocated voidP_s_5_alloc_table result) ->
             (((=) (typeof voidP_s_5_tag_table result) charP_tag) /\
             (forall i : int.
              ((((<=) (offset_min voidP_s_5_alloc_table result) i) /\
               ((<) i (offset_max voidP_s_5_alloc_table result))) ->
               ((=) (typeof voidP_s_5_tag_table (shift result i)) charP_tag)))))
           /\
           ((((Uint32.(=)
              (select (old !unsigned_intP_unsigned_intM_base_6) base)
              (#"whole_program.jc" 324 35 49# "expl:Integer cast"
              (Uint32.of_int (16))))
             /\
             ((Int8.(=) (select charP_charM_s_5 (shift s_2 (0)))
              (#"whole_program.jc" 325 31 43# "expl:Integer cast"
              (Int8.of_int (48))))
             /\
             ((=)
             (tolower (Int8.to_int (select charP_charM_s_5 (shift s_2 (1)))))
             (Int8.to_int (#"whole_program.jc" 327 15 28# "expl:Integer cast"
             (Int8.of_int (120))))))) ->
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 26 15 37#
             "expl:Ensures clause" ((=) result (shift s_2 (2)))))
           /\
           (((Uint32.(=)
             (select (old !unsigned_intP_unsigned_intM_base_6) base)
             (#"whole_program.jc" 308 33 46# "expl:Integer cast"
             (Uint32.of_int (0)))) ->
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
              "expl:Ensures clause"
              ((is_hex s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 311 33 47# "expl:Integer cast"
               (Uint32.of_int (16))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 20 15 39#
              "expl:Ensures clause"
              ((is_oct s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 314 35 48# "expl:Integer cast"
               (Uint32.of_int (8))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 21 15 40#
              "expl:Ensures clause"
              ((is_dec s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 317 37 51# "expl:Integer cast"
               (Uint32.of_int (10))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 22 15 45#
              "expl:Ensures clause"
              ((is_hex s_2 charP_charM_s_5) -> ((=) result (shift s_2 (2)))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 23 15 54#
             "expl:Ensures clause"
             (((is_oct s_2 charP_charM_s_5) \/ (is_dec s_2 charP_charM_s_5))
              -> ((=) result s_2)))))))))))))
           /\
           ((#"whole_program.jc" 305 10 28# "expl:Assigns clause"
            (not_assigns unsigned_intP_base_6_alloc_table
            unsigned_intP_base_6_alloc_table (old
            !unsigned_intP_unsigned_intM_base_6)
            !unsigned_intP_unsigned_intM_base_6 (pset_singleton base)))
           /\
           (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 16 12 44#
           "expl:Ensures clause"
           (((=) result s_2) \/ ((=) result (shift s_2 (2))))))))) }
  
end

module Function__parse_integer_fixup_radix_safe

  use enum.Uint32 
  
  use import Root_unsigned_intP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_IntBase 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val _parse_integer_fixup_radix
  (s_2 : (pointer voidP)) 
   (base : (pointer unsigned_intP)) 
    (unsigned_intP_unsigned_intM_base_6 : ref (memory unsigned_intP
     Uint32.t)) 
     (voidP_s_5_alloc_table : (alloc_table voidP)) 
      (unsigned_intP_base_6_alloc_table : (alloc_table unsigned_intP)) 
       (voidP_s_5_tag_table : (tag_table voidP)) 
        (charP_charM_s_5 : (memory voidP Int8.t)) : (pointer voidP)
         requires {
           ("expl:Internal"
           (#"whole_program.jc" 298 12 409# "expl:Requires clause"
           ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 13 13 29#
            "expl:Requires clause"
            (#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
             ((<=) (offset_min voidP_s_5_alloc_table s_2) (0)))
            /\
            (#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
             ((>=) (offset_max voidP_s_5_alloc_table s_2) (2)))
            /\
            (#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
             ((=) true true))
            /\
            (#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
             ((=) true true))
            /\
            (#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((=) true true)))))))))))
           /\
           (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 14 13 25#
           "expl:Requires clause"
           (#"whole_program.jc" 298 12 409# "expl:Requires clause"
           ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((<=) (offset_min unsigned_intP_base_6_alloc_table base) (0)))
           /\
           (#"whole_program.jc" 298 12 409# "expl:Requires clause"
           ((#"whole_program.jc" 298 12 409# "expl:Requires clause"
            ((>=) (offset_max unsigned_intP_base_6_alloc_table base) (0)))
           /\
           (#"whole_program.jc" 298 12 409# "expl:Requires clause"
           ((=) true true)))))))))) }
         reads { unsigned_intP_unsigned_intM_base_6 } writes {
         unsigned_intP_unsigned_intM_base_6 }
         ensures {
           (((allocated voidP_s_5_alloc_table result) ->
             (((=) (typeof voidP_s_5_tag_table result) charP_tag) /\
             (forall i : int.
              ((((<=) (offset_min voidP_s_5_alloc_table result) i) /\
               ((<) i (offset_max voidP_s_5_alloc_table result))) ->
               ((=) (typeof voidP_s_5_tag_table (shift result i)) charP_tag)))))
           /\
           ((((Uint32.(=)
              (select (old !unsigned_intP_unsigned_intM_base_6) base)
              (#"whole_program.jc" 324 35 49# "expl:Integer cast"
              (Uint32.of_int (16))))
             /\
             ((Int8.(=) (select charP_charM_s_5 (shift s_2 (0)))
              (#"whole_program.jc" 325 31 43# "expl:Integer cast"
              (Int8.of_int (48))))
             /\
             ((=)
             (tolower (Int8.to_int (select charP_charM_s_5 (shift s_2 (1)))))
             (Int8.to_int (#"whole_program.jc" 327 15 28# "expl:Integer cast"
             (Int8.of_int (120))))))) ->
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 26 15 37#
             "expl:Ensures clause" ((=) result (shift s_2 (2)))))
           /\
           (((Uint32.(=)
             (select (old !unsigned_intP_unsigned_intM_base_6) base)
             (#"whole_program.jc" 308 33 46# "expl:Integer cast"
             (Uint32.of_int (0)))) ->
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
              "expl:Ensures clause"
              ((is_hex s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 311 33 47# "expl:Integer cast"
               (Uint32.of_int (16))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 20 15 39#
              "expl:Ensures clause"
              ((is_oct s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 314 35 48# "expl:Integer cast"
               (Uint32.of_int (8))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 21 15 40#
              "expl:Ensures clause"
              ((is_dec s_2 charP_charM_s_5) ->
               (Uint32.(=) (select !unsigned_intP_unsigned_intM_base_6 base)
               (#"whole_program.jc" 317 37 51# "expl:Integer cast"
               (Uint32.of_int (10))))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 19 15 40#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 22 15 45#
              "expl:Ensures clause"
              ((is_hex s_2 charP_charM_s_5) -> ((=) result (shift s_2 (2)))))
             /\
             (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 23 15 54#
             "expl:Ensures clause"
             (((is_oct s_2 charP_charM_s_5) \/ (is_dec s_2 charP_charM_s_5))
              -> ((=) result s_2)))))))))))))
           /\
           ((#"whole_program.jc" 305 10 28# "expl:Assigns clause"
            (not_assigns unsigned_intP_base_6_alloc_table
            unsigned_intP_base_6_alloc_table (old
            !unsigned_intP_unsigned_intM_base_6)
            !unsigned_intP_unsigned_intM_base_6 (pset_singleton base)))
           /\
           (#"/home/work/workspace/self/verker/_parse_integer_fixup_radix.h" 16 12 44#
           "expl:Ensures clause"
           (((=) result s_2) \/ ((=) result (shift s_2 (2))))))))) }
  
end

module Function_check_bytes8_0

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  val check_bytes8_0
  (start_1 : (pointer voidP)) 
   (value_0 : Uint8.t) 
    (bytes_0 : Uint32.t) 
     (voidP_start_10_alloc_table : (alloc_table voidP)) 
      (voidP_start_10_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_start_10_alloc_table result) ->
            ((instanceof voidP_start_10_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_start_10_alloc_table result) i) /\
              ((<) i (offset_max voidP_start_10_alloc_table result))) ->
              (instanceof voidP_start_10_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((forall i : (pointer voidP).
             (((same_block start_1 i) /\
              (((<=) (sub_pointer start_1 i) (0)) /\
              ((same_block i (shift start_1 (Uint32.to_int bytes_0))) /\
              ((<) (sub_pointer i (shift start_1 (Uint32.to_int bytes_0)))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i)
              value_0))) ->
            (#"/home/work/workspace/self/verker/check_bytes8.h" 34 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          (((exists i_0 : (pointer voidP).
             ((same_block start_1 i_0) /\
             (((<=) (sub_pointer start_1 i_0) (0)) /\
             ((same_block i_0 (shift start_1 (Uint32.to_int bytes_0))) /\
             (((<) (sub_pointer i_0 (shift start_1 (Uint32.to_int bytes_0)))
              (0))
             /\
             (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_10 i_0)
             value_0)))))) ->
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             (same_block start_1
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             ((<=)
             (sub_pointer start_1
             (downcast voidP_start_10_tag_table result unsigned_charP_tag))
             (0)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             (same_block
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             ((<)
             (sub_pointer
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))) (0)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 30 15 40#
             "expl:Ensures clause"
             (Uint8.(<>)
             (select unsigned_charP_unsigned_charM_start_10
             (downcast voidP_start_10_tag_table result unsigned_charP_tag))
             value_0))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 31 15 72#
            "expl:Ensures clause"
            (forall j : (pointer voidP).
             (((same_block start_1 j) /\
              (((<=) (sub_pointer start_1 j) (0)) /\
              ((same_block j
               (downcast voidP_start_10_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer j
              (downcast voidP_start_10_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 j)
              value_0))))))))))))))))
          /\
          (#"/home/work/workspace/self/verker/check_bytes8.h" 26 12 56#
          "expl:Ensures clause"
          ((=) result
          (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
          unsigned_charP_unsigned_charM_start_10)))))) }
  
end

module Function_check_bytes8_0_safe

  use enum.Uint8 
  
  use enum.Uint32 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use import Axiomatic_CheckBytes8 
  
  use why3.Bool.Bool 
  
  val check_bytes8_0
  (start_1 : (pointer voidP)) 
   (value_0 : Uint8.t) 
    (bytes_0 : Uint32.t) 
     (voidP_start_10_alloc_table : (alloc_table voidP)) 
      (voidP_start_10_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_start_10 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"/home/work/workspace/self/verker/check_bytes8.h" 24 13 39#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint32.to_int bytes_0) (1))) then
           (((<=) (offset_min voidP_start_10_alloc_table start_1) (0)) /\
           (((>=) (offset_max voidP_start_10_alloc_table start_1)
            (Int.(-) (Uint32.to_int bytes_0) (1)))
           /\
           (forall __framac_tmp5 : int.
            ((((<=) (0) __framac_tmp5) /\
             ((<=) __framac_tmp5 (Int.(-) (Uint32.to_int bytes_0) (1)))) ->
             ((=) true true))))) else ((=) true true)))) }
        ensures {
          (((allocated voidP_start_10_alloc_table result) ->
            ((instanceof voidP_start_10_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_start_10_alloc_table result) i) /\
              ((<) i (offset_max voidP_start_10_alloc_table result))) ->
              (instanceof voidP_start_10_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((forall i : (pointer voidP).
             (((same_block start_1 i) /\
              (((<=) (sub_pointer start_1 i) (0)) /\
              ((same_block i (shift start_1 (Uint32.to_int bytes_0))) /\
              ((<) (sub_pointer i (shift start_1 (Uint32.to_int bytes_0)))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 i)
              value_0))) ->
            (#"/home/work/workspace/self/verker/check_bytes8.h" 34 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          (((exists i_0 : (pointer voidP).
             ((same_block start_1 i_0) /\
             (((<=) (sub_pointer start_1 i_0) (0)) /\
             ((same_block i_0 (shift start_1 (Uint32.to_int bytes_0))) /\
             (((<) (sub_pointer i_0 (shift start_1 (Uint32.to_int bytes_0)))
              (0))
             /\
             (Uint8.(<>) (select unsigned_charP_unsigned_charM_start_10 i_0)
             value_0)))))) ->
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             (same_block start_1
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 37#
             "expl:Ensures clause"
             ((<=)
             (sub_pointer start_1
             (downcast voidP_start_10_tag_table result unsigned_charP_tag))
             (0)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             (same_block
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 29 24 53#
             "expl:Ensures clause"
             ((<)
             (sub_pointer
             (downcast voidP_start_10_tag_table result unsigned_charP_tag)
             (shift start_1 (Uint32.to_int bytes_0))) (0)))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 29 15 53#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/check_bytes8.h" 30 15 40#
             "expl:Ensures clause"
             (Uint8.(<>)
             (select unsigned_charP_unsigned_charM_start_10
             (downcast voidP_start_10_tag_table result unsigned_charP_tag))
             value_0))
            /\
            (#"/home/work/workspace/self/verker/check_bytes8.h" 31 15 72#
            "expl:Ensures clause"
            (forall j : (pointer voidP).
             (((same_block start_1 j) /\
              (((<=) (sub_pointer start_1 j) (0)) /\
              ((same_block j
               (downcast voidP_start_10_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer j
              (downcast voidP_start_10_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Uint8.(=) (select unsigned_charP_unsigned_charM_start_10 j)
              value_0))))))))))))))))
          /\
          (#"/home/work/workspace/self/verker/check_bytes8.h" 26 12 56#
          "expl:Ensures clause"
          ((=) result
          (check_bytes8 start_1 value_0 (Uint32.to_int bytes_0)
          unsigned_charP_unsigned_charM_start_10)))))) }
  
end

module Function_kstrtobool

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_0_0 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_16 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_0_15_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_16_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_0_15_tag_table : (tag_table voidP)) 
        (charP_charM_s_0_15 : (memory voidP Int8.t)) : Int32.t
         requires { true } reads { _BoolP__BoolM_res_16 } writes {
         _BoolP__BoolM_res_16 }
         ensures {
           (((((<>) s_0_0 null) /\ (kstrtobool_fmt s_0_0 charP_charM_s_0_15))
             ->
             ((#"whole_program.jc" 625 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_16_alloc_table
              _BoolP_res_16_alloc_table (old !_BoolP__BoolM_res_16)
              !_BoolP__BoolM_res_16 (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_0_0 charP_charM_s_0_15) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
               (#"whole_program.jc" 627 57 69# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_0_0 charP_charM_s_0_15) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
               (#"whole_program.jc" 629 59 71# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 630 46 58#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_0_0 null) \/
             (not (kstrtobool_fmt s_0_0 charP_charM_s_0_15))) ->
             ((#"whole_program.jc" 621 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_16_alloc_table
              _BoolP_res_16_alloc_table (old !_BoolP__BoolM_res_16)
              !_BoolP__BoolM_res_16 pset_empty))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 622 32 49#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"whole_program.jc" 615 44 56#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"whole_program.jc" 616 45 62#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"whole_program.jc" 617 45 62#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))) ->
            ((=) res res)))))))) }
  
end

module Function_kstrtobool_safe

  use import Root__BoolP 
  
  use import ref.Ref 
  
  use import Logic_kstrtobool_fmt_true 
  
  use import Logic_kstrtobool_fmt_false 
  
  use import Logic_kstrtobool_fmt 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val kstrtobool
  (s_0_0 : (pointer voidP)) 
   (res : (pointer _BoolP)) 
    (_BoolP__BoolM_res_16 : ref (memory _BoolP Enum__bool.t)) 
     (voidP_s_0_15_alloc_table : (alloc_table voidP)) 
      (_BoolP_res_16_alloc_table : (alloc_table _BoolP)) 
       (voidP_s_0_15_tag_table : (tag_table voidP)) 
        (charP_charM_s_0_15 : (memory voidP Int8.t)) : Int32.t
         requires {
           ("expl:Internal"
           (#"whole_program.jc" 607 12 448# "expl:Requires clause"
           ((#"/home/work/workspace/self/verker/kstrtobool.h" 33 13 43#
            "expl:Requires clause"
            (((=) s_0_0 null) \/
            (((<=) (offset_min voidP_s_0_15_alloc_table s_0_0) (0)) /\
            (((>=) (offset_max voidP_s_0_15_alloc_table s_0_0) (1)) /\
            (((=) true true) /\ ((=) true true))))))
           /\
           (#"/home/work/workspace/self/verker/kstrtobool.h" 34 13 24#
           "expl:Requires clause"
           (#"whole_program.jc" 607 12 448# "expl:Requires clause"
           ((#"whole_program.jc" 607 12 448# "expl:Requires clause"
            ((<=) (offset_min _BoolP_res_16_alloc_table res) (0)))
           /\
           (#"whole_program.jc" 607 12 448# "expl:Requires clause"
           ((#"whole_program.jc" 607 12 448# "expl:Requires clause"
            ((>=) (offset_max _BoolP_res_16_alloc_table res) (0)))
           /\
           (#"whole_program.jc" 607 12 448# "expl:Requires clause"
           ((=) true true)))))))))) }
         reads { _BoolP__BoolM_res_16 } writes { _BoolP__BoolM_res_16 }
         ensures {
           (((((<>) s_0_0 null) /\ (kstrtobool_fmt s_0_0 charP_charM_s_0_15))
             ->
             ((#"whole_program.jc" 625 10 20# "expl:Assigns clause"
              (not_assigns _BoolP_res_16_alloc_table
              _BoolP_res_16_alloc_table (old !_BoolP__BoolM_res_16)
              !_BoolP__BoolM_res_16 (pset_singleton res)))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_true s_0_0 charP_charM_s_0_15) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
               (#"whole_program.jc" 627 57 69# "expl:Integer cast"
               (Enum__bool.of_int (1))))))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 44 15 52#
             "expl:Ensures clause"
             ((#"/home/work/workspace/self/verker/kstrtobool.h" 45 15 52#
              "expl:Ensures clause"
              ((kstrtobool_fmt_false s_0_0 charP_charM_s_0_15) ->
               (Enum__bool.(=) (select !_BoolP__BoolM_res_16 res)
               (#"whole_program.jc" 629 59 71# "expl:Integer cast"
               (Enum__bool.of_int (0))))))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 46 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 630 46 58#
             "expl:Integer cast" (Int32.of_int (0))))))))))))
           /\
           (((((=) s_0_0 null) \/
             (not (kstrtobool_fmt s_0_0 charP_charM_s_0_15))) ->
             ((#"whole_program.jc" 621 10 18# "expl:Assigns clause"
              (not_assigns _BoolP_res_16_alloc_table
              _BoolP_res_16_alloc_table (old !_BoolP__BoolM_res_16)
              !_BoolP__BoolM_res_16 pset_empty))
             /\
             (#"/home/work/workspace/self/verker/kstrtobool.h" 40 15 29#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 622 32 49#
             "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))))))
           /\
           (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/kstrtobool.h" 35 12 42#
            "expl:Ensures clause"
            ((Int32.(=) result (#"whole_program.jc" 615 44 56#
             "expl:Integer cast" (Int32.of_int (0))))
            \/
            (Int32.(=) result (#"whole_program.jc" 616 45 62#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22)))))))
           /\
           (#"/home/work/workspace/self/verker/kstrtobool.h" 36 12 47#
           "expl:Ensures clause"
           ((Int32.(=) result (#"whole_program.jc" 617 45 62#
            "expl:Integer cast" (Int32.of_int (Int.(-_) (22))))) ->
            ((=) res res)))))))) }
  
end

module Function_memchr

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val memchr
  (s_1_0 : (pointer voidP)) 
   (c_11_0 : Int32.t) 
    (n : Uint64.t) 
     (voidP_s_1_17_alloc_table : (alloc_table voidP)) 
      (voidP_s_1_17_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_s_1_17_alloc_table result) ->
            ((instanceof voidP_s_1_17_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_1_17_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_1_17_alloc_table result))) ->
              (instanceof voidP_s_1_17_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p)
               (0))
              /\
              ((same_block p
               (shift
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               (Uint64.to_int n)))
              /\
              ((<)
              (sub_pointer p
              (shift
              (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
              (Uint64.to_int n))) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p)
              (#"whole_program.jc" 760 35 51# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))) ->
            (#"/home/work/workspace/self/verker/memchr.h" 26 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0)
            /\
            (((<=)
             (sub_pointer
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0)
             (0))
            /\
            ((same_block p_0
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Uint64.to_int n)))
            /\
            (((<)
             (sub_pointer p_0
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Uint64.to_int n))) (0))
            /\
            (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_17 p_0)
            (#"whole_program.jc" 727 37 53# "expl:Integer cast"
            (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))) ->
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
            "expl:Ensures clause" (same_block s_1_0 result))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_1_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
            "expl:Ensures clause"
            (same_block result (shift s_1_0 (Uint64.to_int n))))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
            "expl:Ensures clause"
            ((<=) (sub_pointer result (shift s_1_0 (Uint64.to_int n))) (0)))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 22 15 77#
            "expl:Ensures clause"
            (forall p_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               p_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               p_1) (0))
              /\
              ((same_block p_1
               (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer p_1
              (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_17 p_1)
              (#"whole_program.jc" 750 39 64# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 23 15 42#
           "expl:Ensures clause"
           (Bit_uint8.(=)
           (select unsigned_charP_unsigned_charM_s_1_17
           (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
           (#"whole_program.jc" 752 36 61# "expl:Integer cast"
           (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))))))))))))) }
  
end

module Function_memchr_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val memchr
  (s_1_0 : (pointer voidP)) 
   (c_11_0 : Int32.t) 
    (n : Uint64.t) 
     (voidP_s_1_17_alloc_table : (alloc_table voidP)) 
      (voidP_s_1_17_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_s_1_17 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 705 12 763# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memchr.h" 16 13 38#
           "expl:Requires clause"
           (instanceof voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
          /\
          (#"/home/work/workspace/self/verker/memchr.h" 17 13 37#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int n) (1))) then
           (((<=)
            (offset_min voidP_s_1_17_alloc_table
            (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_s_1_17_alloc_table
            (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag))
            (Int.(-) (Uint64.to_int n) (1)))
           /\
           (forall __framac_tmp8 : int.
            ((((<=) (0) __framac_tmp8) /\
             ((<=) __framac_tmp8 (Int.(-) (Uint64.to_int n) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        ensures {
          (((allocated voidP_s_1_17_alloc_table result) ->
            ((instanceof voidP_s_1_17_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_1_17_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_1_17_alloc_table result))) ->
              (instanceof voidP_s_1_17_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p)
               (0))
              /\
              ((same_block p
               (shift
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               (Uint64.to_int n)))
              /\
              ((<)
              (sub_pointer p
              (shift
              (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
              (Uint64.to_int n))) (0))))) ->
              (Bit_uint8.(<>) (select unsigned_charP_unsigned_charM_s_1_17 p)
              (#"whole_program.jc" 760 35 51# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))) ->
            (#"/home/work/workspace/self/verker/memchr.h" 26 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0)
            /\
            (((<=)
             (sub_pointer
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag) p_0)
             (0))
            /\
            ((same_block p_0
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Uint64.to_int n)))
            /\
            (((<)
             (sub_pointer p_0
             (shift
             (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
             (Uint64.to_int n))) (0))
            /\
            (Bit_uint8.(=) (select unsigned_charP_unsigned_charM_s_1_17 p_0)
            (#"whole_program.jc" 727 37 53# "expl:Integer cast"
            (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))) ->
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
            "expl:Ensures clause" (same_block s_1_0 result))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_1_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
            "expl:Ensures clause"
            (same_block result (shift s_1_0 (Uint64.to_int n))))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 21 20 36#
            "expl:Ensures clause"
            ((<=) (sub_pointer result (shift s_1_0 (Uint64.to_int n))) (0)))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 21 15 36#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/memchr.h" 22 15 77#
            "expl:Ensures clause"
            (forall p_1 : (pointer voidP).
             (((same_block
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               p_1)
              /\
              (((<=)
               (sub_pointer
               (downcast voidP_s_1_17_tag_table s_1_0 unsigned_charP_tag)
               p_1) (0))
              /\
              ((same_block p_1
               (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
              /\
              ((<)
              (sub_pointer p_1
              (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
              (0))))) ->
              (Bit_uint8.(<>)
              (select unsigned_charP_unsigned_charM_s_1_17 p_1)
              (#"whole_program.jc" 750 39 64# "expl:Integer cast"
              (Bit_uint8_of_Bit_int32.cast_modulo c_11_0))))))
           /\
           (#"/home/work/workspace/self/verker/memchr.h" 23 15 42#
           "expl:Ensures clause"
           (Bit_uint8.(=)
           (select unsigned_charP_unsigned_charM_s_1_17
           (downcast voidP_s_1_17_tag_table result unsigned_charP_tag))
           (#"whole_program.jc" 752 36 61# "expl:Integer cast"
           (Bit_uint8_of_Bit_int32.cast_modulo c_11_0)))))))))))))))))) }
  
end

module Function_memcmp

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcmp
  (cs : (pointer voidP)) 
   (ct : (pointer voidP)) 
    (count : Uint64.t) 
     (voidP_ct_20_alloc_table : (alloc_table voidP)) 
      (voidP_cs_19_alloc_table : (alloc_table voidP)) 
       (voidP_ct_20_tag_table : (tag_table voidP)) 
        (voidP_cs_19_tag_table : (tag_table voidP)) 
         (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
          (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t)) :
           Int32.t
           requires { true }
           ensures {
             (((exists i_1_0 : int.
                (((<=) (0) i_1_0) /\
                (((<) i_1_0 (Uint64.to_int count)) /\
                (Uint8.(<>)
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_1_0))
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_1_0)))))) ->
               (#"/home/work/workspace/self/verker/memcmp.c" 40 15 241#
               "expl:Ensures clause"
               (exists i_2_0 : int.
                (((<=) (0) i_2_0) /\
                (((<) i_2_0 (Uint64.to_int count)) /\
                ((forall j_0 : int.
                  ((((<=) (0) j_0) /\ ((<) j_0 i_2_0)) ->
                   (Uint8.(=)
                   (select unsigned_charP_unsigned_charM_cs_19
                   (shift
                   (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                   j_0))
                   (select unsigned_charP_unsigned_charM_ct_20
                   (shift
                   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                   j_0)))))
                /\
                ((Uint8.(<>)
                 (select unsigned_charP_unsigned_charM_cs_19
                 (shift
                 (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                 i_2_0))
                 (select unsigned_charP_unsigned_charM_ct_20
                 (shift
                 (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                 i_2_0)))
                /\
                ((=) (Int32.to_int result)
                (Int.(-)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_2_0)))
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_2_0))))))))))))
             /\
             ((forall i_3_0 : int.
               ((((<=) (0) i_3_0) /\ ((<) i_3_0 (Uint64.to_int count))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_3_0))
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_3_0))))) ->
              (#"/home/work/workspace/self/verker/memcmp.c" 37 15 27#
              "expl:Ensures clause"
              (Int32.(=) result (#"whole_program.jc" 937 32 44#
              "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_memcmp_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcmp
  (cs : (pointer voidP)) 
   (ct : (pointer voidP)) 
    (count : Uint64.t) 
     (voidP_ct_20_alloc_table : (alloc_table voidP)) 
      (voidP_cs_19_alloc_table : (alloc_table voidP)) 
       (voidP_ct_20_tag_table : (tag_table voidP)) 
        (voidP_cs_19_tag_table : (tag_table voidP)) 
         (unsigned_charP_unsigned_charM_ct_20 : (memory voidP Uint8.t)) 
          (unsigned_charP_unsigned_charM_cs_19 : (memory voidP Uint8.t)) :
           Int32.t
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 897 12 2278# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcmp.c" 25 13 39#
              "expl:Requires clause"
              (instanceof voidP_cs_19_tag_table cs unsigned_charP_tag))
             /\
             (#"whole_program.jc" 897 12 2278# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcmp.c" 26 13 39#
              "expl:Requires clause"
              (instanceof voidP_ct_20_tag_table ct unsigned_charP_tag))
             /\
             (#"whole_program.jc" 897 12 2278# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcmp.c" 27 13 44#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
               (((<=)
                (offset_min voidP_cs_19_alloc_table
                (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_cs_19_alloc_table
                (downcast voidP_cs_19_tag_table cs unsigned_charP_tag))
                (Int.(-) (Uint64.to_int count) (1)))
               /\
               (forall __framac_tmp9 : int.
                ((((<=) (0) __framac_tmp9) /\
                 ((<=) __framac_tmp9 (Int.(-) (Uint64.to_int count) (1)))) ->
                 ((=) true true))))) else ((=) true true)))
             /\
             (#"whole_program.jc" 897 12 2278# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcmp.c" 28 13 44#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
               (((<=)
                (offset_min voidP_ct_20_alloc_table
                (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_ct_20_alloc_table
                (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
                (Int.(-) (Uint64.to_int count) (1)))
               /\
               (forall __framac_tmp10 : int.
                ((((<=) (0) __framac_tmp10) /\
                 ((<=) __framac_tmp10 (Int.(-) (Uint64.to_int count) (1))))
                 -> ((=) true true))))) else ((=) true true)))
             /\
             (#"/home/work/workspace/self/verker/memcmp.c" 29 13 118#
             "expl:Requires clause"
             (((same_block
               (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
               (downcast voidP_ct_20_tag_table ct unsigned_charP_tag))
              /\
              (not
              (not
              (same_block
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))
             \/
             ((not
              (same_block
              (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
              (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))
             /\
             (not
             (same_block
             (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
             (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)))))))))))))))
             }
           ensures {
             (((exists i_1_0 : int.
                (((<=) (0) i_1_0) /\
                (((<) i_1_0 (Uint64.to_int count)) /\
                (Uint8.(<>)
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_1_0))
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_1_0)))))) ->
               (#"/home/work/workspace/self/verker/memcmp.c" 40 15 241#
               "expl:Ensures clause"
               (exists i_2_0 : int.
                (((<=) (0) i_2_0) /\
                (((<) i_2_0 (Uint64.to_int count)) /\
                ((forall j_0 : int.
                  ((((<=) (0) j_0) /\ ((<) j_0 i_2_0)) ->
                   (Uint8.(=)
                   (select unsigned_charP_unsigned_charM_cs_19
                   (shift
                   (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                   j_0))
                   (select unsigned_charP_unsigned_charM_ct_20
                   (shift
                   (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                   j_0)))))
                /\
                ((Uint8.(<>)
                 (select unsigned_charP_unsigned_charM_cs_19
                 (shift
                 (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                 i_2_0))
                 (select unsigned_charP_unsigned_charM_ct_20
                 (shift
                 (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                 i_2_0)))
                /\
                ((=) (Int32.to_int result)
                (Int.(-)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_2_0)))
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_2_0))))))))))))
             /\
             ((forall i_3_0 : int.
               ((((<=) (0) i_3_0) /\ ((<) i_3_0 (Uint64.to_int count))) ->
                (Uint8.(=)
                (select unsigned_charP_unsigned_charM_cs_19
                (shift (downcast voidP_cs_19_tag_table cs unsigned_charP_tag)
                i_3_0))
                (select unsigned_charP_unsigned_charM_ct_20
                (shift (downcast voidP_ct_20_tag_table ct unsigned_charP_tag)
                i_3_0))))) ->
              (#"/home/work/workspace/self/verker/memcmp.c" 37 15 27#
              "expl:Ensures clause"
              (Int32.(=) result (#"whole_program.jc" 937 32 44#
              "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_memcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcpy
  (dest_0 : (pointer voidP)) 
   (src_0 : (pointer voidP)) 
    (count_0 : Uint64.t) 
     (charP_charM_dest_0_21 : ref (memory voidP Int8.t)) 
      (voidP_src_0_22_alloc_table : (alloc_table voidP)) 
       (voidP_dest_0_21_alloc_table : (alloc_table voidP)) 
        (voidP_src_0_22_tag_table : (tag_table voidP)) 
         (voidP_dest_0_21_tag_table : (tag_table voidP)) 
          (charP_charM_src_0_22 : (memory voidP Int8.t)) : (pointer voidP)
           requires { true } reads { charP_charM_dest_0_21 } writes {
           charP_charM_dest_0_21 }
           ensures {
             (((allocated voidP_dest_0_21_alloc_table result) ->
               ((instanceof voidP_dest_0_21_tag_table result voidP_tag) /\
               (forall i : int.
                ((((<=) (offset_min voidP_dest_0_21_alloc_table result) i) /\
                 ((<) i (offset_max voidP_dest_0_21_alloc_table result))) ->
                 (instanceof voidP_dest_0_21_tag_table (shift result i)
                 voidP_tag)))))
             /\
             ((#"whole_program.jc" 1083 10 73# "expl:Assigns clause"
              (not_assigns voidP_dest_0_21_alloc_table
              voidP_dest_0_21_alloc_table (old !charP_charM_dest_0_21)
              !charP_charM_dest_0_21
              (pset_range
              (pset_singleton
              (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0)
              (Int.(-) (Uint64.to_int count_0) (1)))))
             /\
             (#"/home/work/workspace/self/verker/memcpy.h" 21 12 99#
             "expl:Ensures clause"
             (forall i_4_0 : int.
              ((((<=) (0) i_4_0) /\ ((<) i_4_0 (Uint64.to_int count_0))) ->
               (Int8.(=)
               (select !charP_charM_dest_0_21
               (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               i_4_0))
               (select charP_charM_src_0_22
               (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
               i_4_0)))))))) }
  
end

module Function_memcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memcpy
  (dest_0 : (pointer voidP)) 
   (src_0 : (pointer voidP)) 
    (count_0 : Uint64.t) 
     (charP_charM_dest_0_21 : ref (memory voidP Int8.t)) 
      (voidP_src_0_22_alloc_table : (alloc_table voidP)) 
       (voidP_dest_0_21_alloc_table : (alloc_table voidP)) 
        (voidP_src_0_22_tag_table : (tag_table voidP)) 
         (voidP_dest_0_21_tag_table : (tag_table voidP)) 
          (charP_charM_src_0_22 : (memory voidP Int8.t)) : (pointer voidP)
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 1058 12 1614# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcpy.h" 16 13 42#
              "expl:Requires clause"
              (instanceof voidP_src_0_22_tag_table src_0 charP_tag))
             /\
             (#"whole_program.jc" 1058 12 1614# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcpy.h" 17 13 43#
              "expl:Requires clause"
              (instanceof voidP_dest_0_21_tag_table dest_0 charP_tag))
             /\
             (#"whole_program.jc" 1058 12 1614# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/memcpy.h" 18 13 45#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int count_0) (1))) then
               (((<=)
                (offset_min voidP_src_0_22_alloc_table
                (downcast voidP_src_0_22_tag_table src_0 charP_tag)) (0))
               /\
               (((>=)
                (offset_max voidP_src_0_22_alloc_table
                (downcast voidP_src_0_22_tag_table src_0 charP_tag))
                (Int.(-) (Uint64.to_int count_0) (1)))
               /\
               (forall __framac_tmp11 : int.
                ((((<=) (0) __framac_tmp11) /\
                 ((<=) __framac_tmp11 (Int.(-) (Uint64.to_int count_0) (1))))
                 -> ((=) true true))))) else ((=) true true)))
             /\
             (#"/home/work/workspace/self/verker/memcpy.h" 19 13 46#
             "expl:Requires clause"
             (if ((<=) (0) (Int.(-) (Uint64.to_int count_0) (1))) then
              (((<=)
               (offset_min voidP_dest_0_21_alloc_table
               (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0))
              /\
              (((>=)
               (offset_max voidP_dest_0_21_alloc_table
               (downcast voidP_dest_0_21_tag_table dest_0 charP_tag))
               (Int.(-) (Uint64.to_int count_0) (1)))
              /\
              (forall __framac_tmp12 : int.
               ((((<=) (0) __framac_tmp12) /\
                ((<=) __framac_tmp12 (Int.(-) (Uint64.to_int count_0) (1))))
                -> ((=) true true))))) else ((=) true true)))))))))) }
           reads { charP_charM_dest_0_21 } writes { charP_charM_dest_0_21 }
           ensures {
             (((allocated voidP_dest_0_21_alloc_table result) ->
               ((instanceof voidP_dest_0_21_tag_table result voidP_tag) /\
               (forall i : int.
                ((((<=) (offset_min voidP_dest_0_21_alloc_table result) i) /\
                 ((<) i (offset_max voidP_dest_0_21_alloc_table result))) ->
                 (instanceof voidP_dest_0_21_tag_table (shift result i)
                 voidP_tag)))))
             /\
             ((#"whole_program.jc" 1083 10 73# "expl:Assigns clause"
              (not_assigns voidP_dest_0_21_alloc_table
              voidP_dest_0_21_alloc_table (old !charP_charM_dest_0_21)
              !charP_charM_dest_0_21
              (pset_range
              (pset_singleton
              (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)) (0)
              (Int.(-) (Uint64.to_int count_0) (1)))))
             /\
             (#"/home/work/workspace/self/verker/memcpy.h" 21 12 99#
             "expl:Ensures clause"
             (forall i_4_0 : int.
              ((((<=) (0) i_4_0) /\ ((<) i_4_0 (Uint64.to_int count_0))) ->
               (Int8.(=)
               (select !charP_charM_dest_0_21
               (shift (downcast voidP_dest_0_21_tag_table dest_0 charP_tag)
               i_4_0))
               (select charP_charM_src_0_22
               (shift (downcast voidP_src_0_22_tag_table src_0 charP_tag)
               i_4_0)))))))) }
  
end

module Function_memmove

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_3 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count_1 : Uint64.t) 
     (charP_charM_dest_3_24 : ref (memory voidP Int8.t)) 
      (voidP_dest_3_24_alloc_table : (alloc_table voidP)) 
       (voidP_dest_3_24_tag_table : (tag_table voidP)) : (pointer voidP)
        requires { true } reads { charP_charM_dest_3_24 } writes {
        charP_charM_dest_3_24 }
        ensures {
          (((allocated voidP_dest_3_24_alloc_table result) ->
            ((instanceof voidP_dest_3_24_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_3_24_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_3_24_alloc_table result))) ->
              (instanceof voidP_dest_3_24_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_3 src_3)) ->
            (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i_5_0 : int.
             ((((<=) (0) i_5_0) /\ ((<) i_5_0 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              i_5_0))
              (select (old !charP_charM_dest_3_24)
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              i_5_0)))))))
          /\
          (((same_block dest_3 src_3) ->
            (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_6 : int.
             ((((<=) (0) i_6) /\ ((<) i_6 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              i_6))
              (select (old !charP_charM_dest_3_24)
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              i_6)))))))
          /\
          (#"whole_program.jc" 1210 10 73# "expl:Assigns clause"
          (not_assigns voidP_dest_3_24_alloc_table
          voidP_dest_3_24_alloc_table (old !charP_charM_dest_3_24)
          !charP_charM_dest_3_24
          (pset_range
          (pset_singleton
          (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count_1) (1)))))))) }
  
end

module Function_memmove_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_3 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count_1 : Uint64.t) 
     (charP_charM_dest_3_24 : ref (memory voidP Int8.t)) 
      (voidP_dest_3_24_alloc_table : (alloc_table voidP)) 
       (voidP_dest_3_24_tag_table : (tag_table voidP)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 1179 12 2029# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
           "expl:Requires clause"
           (instanceof voidP_dest_3_24_tag_table dest_3 charP_tag))
          /\
          (#"whole_program.jc" 1179 12 2029# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
           "expl:Requires clause"
           (instanceof voidP_dest_3_24_tag_table src_3 charP_tag))
          /\
          (#"whole_program.jc" 1179 12 2029# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count_1) (1))) then
            (((<=)
             (offset_min voidP_dest_3_24_alloc_table
             (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_3_24_alloc_table
             (downcast voidP_dest_3_24_tag_table dest_3 charP_tag))
             (Int.(-) (Uint64.to_int count_1) (1)))
            /\
            (forall __framac_tmp13 : int.
             ((((<=) (0) __framac_tmp13) /\
              ((<=) __framac_tmp13 (Int.(-) (Uint64.to_int count_1) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"whole_program.jc" 1179 12 2029# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count_1) (1))) then
            (((<=)
             (offset_min voidP_dest_3_24_alloc_table
             (downcast voidP_dest_3_24_tag_table src_3 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_3_24_alloc_table
             (downcast voidP_dest_3_24_tag_table src_3 charP_tag))
             (Int.(-) (Uint64.to_int count_1) (1)))
            /\
            (forall __framac_tmp14 : int.
             ((((<=) (0) __framac_tmp14) /\
              ((<=) __framac_tmp14 (Int.(-) (Uint64.to_int count_1) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
          "expl:Requires clause"
          (((same_block dest_3 src_3) /\
           (not (not (same_block dest_3 src_3))))
          \/
          ((not (same_block dest_3 src_3)) /\
          (not (same_block dest_3 src_3)))))))))))))) }
        reads { charP_charM_dest_3_24 } writes { charP_charM_dest_3_24 }
        ensures {
          (((allocated voidP_dest_3_24_alloc_table result) ->
            ((instanceof voidP_dest_3_24_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_3_24_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_3_24_alloc_table result))) ->
              (instanceof voidP_dest_3_24_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_3 src_3)) ->
            (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i_5_0 : int.
             ((((<=) (0) i_5_0) /\ ((<) i_5_0 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              i_5_0))
              (select (old !charP_charM_dest_3_24)
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              i_5_0)))))))
          /\
          (((same_block dest_3 src_3) ->
            (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_6 : int.
             ((((<=) (0) i_6) /\ ((<) i_6 (Uint64.to_int count_1))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_24
              (shift (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)
              i_6))
              (select (old !charP_charM_dest_3_24)
              (shift (downcast voidP_dest_3_24_tag_table src_3 charP_tag)
              i_6)))))))
          /\
          (#"whole_program.jc" 1210 10 73# "expl:Assigns clause"
          (not_assigns voidP_dest_3_24_alloc_table
          voidP_dest_3_24_alloc_table (old !charP_charM_dest_3_24)
          !charP_charM_dest_3_24
          (pset_range
          (pset_singleton
          (downcast voidP_dest_3_24_tag_table dest_3 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count_1) (1)))))))) }
  
end

module Function_memscan

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memscan
  (addr : (pointer voidP)) 
   (c_12 : Int32.t) 
    (size_1 : Uint64.t) 
     (voidP_addr_27_alloc_table : (alloc_table voidP)) 
      (voidP_addr_27_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_addr_27 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_addr_27_alloc_table result) ->
            ((instanceof voidP_addr_27_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_addr_27_alloc_table result) i) /\
              ((<) i (offset_max voidP_addr_27_alloc_table result))) ->
              (instanceof voidP_addr_27_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_7_0 : int.
             ((((<=) (0) i_7_0) /\ ((<) i_7_0 (Uint64.to_int size_1))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_7_0))) (Int32.to_int c_12)))) ->
            (#"/home/work/workspace/self/verker/memscan.h" 29 15 37#
            "expl:Ensures clause"
            ((=) result (shift addr (Uint64.to_int size_1)))))
          /\
          (((exists i_8_0 : int.
             (((<=) (0) i_8_0) /\
             (((<) i_8_0 (Uint64.to_int size_1)) /\
             ((=)
             (Uint8.to_int
             (select unsigned_charP_unsigned_charM_addr_27
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             i_8_0))) (Int32.to_int c_12))))) ->
            (#"/home/work/workspace/self/verker/memscan.h" 23 15 199#
            "expl:Ensures clause"
            (exists i_9_0 : int.
             (((<=) (0) i_9_0) /\
             (((<) i_9_0 (Uint64.to_int size_1)) /\
             ((forall j_1 : int.
               ((((<=) (0) j_1) /\ ((<) j_1 i_9_0)) ->
                ((<>)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_addr_27
                (shift
                (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
                j_1))) (Int32.to_int c_12))))
             /\
             (((=)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_9_0))) (Int32.to_int c_12))
             /\ ((=) result (shift addr i_9_0)))))))))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
           "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
           "expl:Ensures clause"
           (same_block result (shift addr (Uint64.to_int size_1))))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
          "expl:Ensures clause"
          ((<=) (sub_pointer result (shift addr (Uint64.to_int size_1))) (0)))))))))))))))
          }
  
end

module Function_memscan_safe

  use enum.Uint8 
  
  use enum.Uint64 
  
  use import Struct_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memscan
  (addr : (pointer voidP)) 
   (c_12 : Int32.t) 
    (size_1 : Uint64.t) 
     (voidP_addr_27_alloc_table : (alloc_table voidP)) 
      (voidP_addr_27_tag_table : (tag_table voidP)) 
       (unsigned_charP_unsigned_charM_addr_27 : (memory voidP Uint8.t)) :
        (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 1424 12 784# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 16 13 41#
           "expl:Requires clause"
           (instanceof voidP_addr_27_tag_table addr unsigned_charP_tag))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 17 13 43#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int size_1) (1))) then
           (((<=)
            (offset_min voidP_addr_27_alloc_table
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_addr_27_alloc_table
            (downcast voidP_addr_27_tag_table addr unsigned_charP_tag))
            (Int.(-) (Uint64.to_int size_1) (1)))
           /\
           (forall __framac_tmp15 : int.
            ((((<=) (0) __framac_tmp15) /\
             ((<=) __framac_tmp15 (Int.(-) (Uint64.to_int size_1) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        ensures {
          (((allocated voidP_addr_27_alloc_table result) ->
            ((instanceof voidP_addr_27_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_addr_27_alloc_table result) i) /\
              ((<) i (offset_max voidP_addr_27_alloc_table result))) ->
              (instanceof voidP_addr_27_tag_table (shift result i) voidP_tag)))))
          /\
          (((forall i_7_0 : int.
             ((((<=) (0) i_7_0) /\ ((<) i_7_0 (Uint64.to_int size_1))) ->
              ((<>)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_7_0))) (Int32.to_int c_12)))) ->
            (#"/home/work/workspace/self/verker/memscan.h" 29 15 37#
            "expl:Ensures clause"
            ((=) result (shift addr (Uint64.to_int size_1)))))
          /\
          (((exists i_8_0 : int.
             (((<=) (0) i_8_0) /\
             (((<) i_8_0 (Uint64.to_int size_1)) /\
             ((=)
             (Uint8.to_int
             (select unsigned_charP_unsigned_charM_addr_27
             (shift
             (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
             i_8_0))) (Int32.to_int c_12))))) ->
            (#"/home/work/workspace/self/verker/memscan.h" 23 15 199#
            "expl:Ensures clause"
            (exists i_9_0 : int.
             (((<=) (0) i_9_0) /\
             (((<) i_9_0 (Uint64.to_int size_1)) /\
             ((forall j_1 : int.
               ((((<=) (0) j_1) /\ ((<) j_1 i_9_0)) ->
                ((<>)
                (Uint8.to_int
                (select unsigned_charP_unsigned_charM_addr_27
                (shift
                (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
                j_1))) (Int32.to_int c_12))))
             /\
             (((=)
              (Uint8.to_int
              (select unsigned_charP_unsigned_charM_addr_27
              (shift
              (downcast voidP_addr_27_tag_table addr unsigned_charP_tag)
              i_9_0))) (Int32.to_int c_12))
             /\ ((=) result (shift addr i_9_0)))))))))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
           "expl:Ensures clause" (same_block addr result))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 12 27#
           "expl:Ensures clause" ((<=) (sub_pointer addr result) (0)))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 19 12 51#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
           "expl:Ensures clause"
           (same_block result (shift addr (Uint64.to_int size_1))))
          /\
          (#"/home/work/workspace/self/verker/memscan.h" 20 20 42#
          "expl:Ensures clause"
          ((<=) (sub_pointer result (shift addr (Uint64.to_int size_1))) (0)))))))))))))))
          }
  
end

module Function_memset

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val memset
  (s_2_1 : (pointer voidP)) 
   (c_13 : Int32.t) 
    (count_2 : Uint64.t) 
     (charP_charM_s_2_29 : ref (memory voidP Int8.t)) 
      (voidP_s_2_29_alloc_table : (alloc_table voidP)) 
       (voidP_s_2_29_tag_table : (tag_table voidP)) : (pointer voidP)
        requires { true } reads { charP_charM_s_2_29 } writes {
        charP_charM_s_2_29 }
        ensures {
          (((allocated voidP_s_2_29_alloc_table result) ->
            ((instanceof voidP_s_2_29_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_2_29_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_2_29_alloc_table result))) ->
              (instanceof voidP_s_2_29_tag_table (shift result i) voidP_tag)))))
          /\
          ((#"whole_program.jc" 1573 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_29_alloc_table voidP_s_2_29_alloc_table
           (old !charP_charM_s_2_29) !charP_charM_s_2_29
           (pset_range
           (pset_singleton (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
           (0) (Int.(-) (Uint64.to_int count_2) (1)))))
          /\
          (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memset.h" 18 12 95#
           "expl:Ensures clause"
           (forall p_2_0 : (pointer voidP).
            (((same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_2_0)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_2_0) (0))
             /\
             ((same_block p_2_0
              (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              (Uint64.to_int count_2)))
             /\
             ((<)
             (sub_pointer p_2_0
             (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
             (Uint64.to_int count_2))) (0))))) ->
             (Bit_int8.(=) (select !charP_charM_s_2_29 p_2_0)
             (#"whole_program.jc" 1586 49 73# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13))))))
          /\
          (#"/home/work/workspace/self/verker/memset.h" 20 12 24#
          "expl:Ensures clause" ((=) result s_2_1))))))) }
  
end

module Function_memset_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val memset
  (s_2_1 : (pointer voidP)) 
   (c_13 : Int32.t) 
    (count_2 : Uint64.t) 
     (charP_charM_s_2_29 : ref (memory voidP Int8.t)) 
      (voidP_s_2_29_alloc_table : (alloc_table voidP)) 
       (voidP_s_2_29_tag_table : (tag_table voidP)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"whole_program.jc" 1560 12 757# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memset.h" 15 13 40#
           "expl:Requires clause"
           (instanceof voidP_s_2_29_tag_table s_2_1 charP_tag))
          /\
          (#"/home/work/workspace/self/verker/memset.h" 16 13 43#
          "expl:Requires clause"
          (if ((<=) (0) (Int.(-) (Uint64.to_int count_2) (1))) then
           (((<=)
            (offset_min voidP_s_2_29_alloc_table
            (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)) (0))
           /\
           (((>=)
            (offset_max voidP_s_2_29_alloc_table
            (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
            (Int.(-) (Uint64.to_int count_2) (1)))
           /\
           (forall __framac_tmp16 : int.
            ((((<=) (0) __framac_tmp16) /\
             ((<=) __framac_tmp16 (Int.(-) (Uint64.to_int count_2) (1)))) ->
             ((=) true true))))) else ((=) true true)))))) }
        reads { charP_charM_s_2_29 } writes { charP_charM_s_2_29 }
        ensures {
          (((allocated voidP_s_2_29_alloc_table result) ->
            ((instanceof voidP_s_2_29_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_2_29_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_2_29_alloc_table result))) ->
              (instanceof voidP_s_2_29_tag_table (shift result i) voidP_tag)))))
          /\
          ((#"whole_program.jc" 1573 10 70# "expl:Assigns clause"
           (not_assigns voidP_s_2_29_alloc_table voidP_s_2_29_alloc_table
           (old !charP_charM_s_2_29) !charP_charM_s_2_29
           (pset_range
           (pset_singleton (downcast voidP_s_2_29_tag_table s_2_1 charP_tag))
           (0) (Int.(-) (Uint64.to_int count_2) (1)))))
          /\
          (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/memset.h" 18 12 95#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/memset.h" 18 12 95#
           "expl:Ensures clause"
           (forall p_2_0 : (pointer voidP).
            (((same_block (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_2_0)
             /\
             (((<=)
              (sub_pointer (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              p_2_0) (0))
             /\
             ((same_block p_2_0
              (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
              (Uint64.to_int count_2)))
             /\
             ((<)
             (sub_pointer p_2_0
             (shift (downcast voidP_s_2_29_tag_table s_2_1 charP_tag)
             (Uint64.to_int count_2))) (0))))) ->
             (Bit_int8.(=) (select !charP_charM_s_2_29 p_2_0)
             (#"whole_program.jc" 1586 49 73# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_13))))))
          /\
          (#"/home/work/workspace/self/verker/memset.h" 20 12 24#
          "expl:Ensures clause" ((=) result s_2_1))))))) }
  
end

module Function_skip_spaces_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val skip_spaces_0
  (str_0 : (pointer voidP)) 
   (voidP_str_35_alloc_table : (alloc_table voidP)) 
    (voidP_str_35_tag_table : (tag_table voidP)) 
     (charP_charM_str_35 : (memory voidP Int8.t)) : (pointer voidP)
      requires { true }
      ensures {
        (((allocated voidP_str_35_alloc_table result) ->
          (((=) (typeof voidP_str_35_tag_table result) charP_tag) /\
          (forall i : int.
           ((((<=) (offset_min voidP_str_35_alloc_table result) i) /\
            ((<) i (offset_max voidP_str_35_alloc_table result))) ->
            ((=) (typeof voidP_str_35_tag_table (shift result i)) charP_tag)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
         "expl:Ensures clause" ((=) result (skip_spaces str_0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 55 12 50#
         "expl:Ensures clause" (same_block result str_0))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" (same_block str_0 result))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         (same_block result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35))))
         (0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 57 12 30#
         "expl:Ensures clause"
         (not (isspace (Int8.to_int (select charP_charM_str_35 result)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 58 12 63#
         "expl:Ensures clause"
         (forall p_3_0 : (pointer voidP).
          (((same_block str_0 p_3_0) /\
           (((<=) (sub_pointer str_0 p_3_0) (0)) /\
           ((same_block p_3_0 result) /\
           ((<) (sub_pointer p_3_0 result) (0))))) ->
           (isspace (Int8.to_int (select charP_charM_str_35 p_3_0))))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 59 12 30#
        "expl:Ensures clause"
        (valid_str result voidP_str_35_alloc_table charP_charM_str_35))))))))))))))))))))
        }
  
end

module Function_skip_spaces_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_SkipSpaces 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val skip_spaces_0
  (str_0 : (pointer voidP)) 
   (voidP_str_35_alloc_table : (alloc_table voidP)) 
    (voidP_str_35_tag_table : (tag_table voidP)) 
     (charP_charM_str_35 : (memory voidP Int8.t)) : (pointer voidP)
      requires {
        ("expl:Internal"
        (#"/home/work/workspace/self/verker/skip_spaces.h" 52 13 27#
        "expl:Requires clause"
        (valid_str str_0 voidP_str_35_alloc_table charP_charM_str_35))) }
      ensures {
        (((allocated voidP_str_35_alloc_table result) ->
          (((=) (typeof voidP_str_35_tag_table result) charP_tag) /\
          (forall i : int.
           ((((<=) (offset_min voidP_str_35_alloc_table result) i) /\
            ((<) i (offset_max voidP_str_35_alloc_table result))) ->
            ((=) (typeof voidP_str_35_tag_table (shift result i)) charP_tag)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
         "expl:Ensures clause" ((=) result (skip_spaces str_0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 55 12 50#
         "expl:Ensures clause" (same_block result str_0))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" (same_block str_0 result))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 12 26#
         "expl:Ensures clause" ((<=) (sub_pointer str_0 result) (0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         (same_block result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 56 19 47#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift str_0 (Uint64.to_int (strlen str_0 charP_charM_str_35))))
         (0)))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 57 12 30#
         "expl:Ensures clause"
         (not (isspace (Int8.to_int (select charP_charM_str_35 result)))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 54 12 39#
        "expl:Ensures clause"
        ((#"/home/work/workspace/self/verker/skip_spaces.h" 58 12 63#
         "expl:Ensures clause"
         (forall p_3_0 : (pointer voidP).
          (((same_block str_0 p_3_0) /\
           (((<=) (sub_pointer str_0 p_3_0) (0)) /\
           ((same_block p_3_0 result) /\
           ((<) (sub_pointer p_3_0 result) (0))))) ->
           (isspace (Int8.to_int (select charP_charM_str_35 p_3_0))))))
        /\
        (#"/home/work/workspace/self/verker/skip_spaces.h" 59 12 30#
        "expl:Ensures clause"
        (valid_str result voidP_str_35_alloc_table charP_charM_str_35))))))))))))))))))))
        }
  
end

module Function_strcasecmp

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val strcasecmp
  (s1 : (pointer voidP)) 
   (s2 : (pointer voidP)) 
    (voidP_s2_38_alloc_table : (alloc_table voidP)) 
     (voidP_s1_37_alloc_table : (alloc_table voidP)) 
      (voidP_s2_38_tag_table : (tag_table voidP)) 
       (voidP_s1_37_tag_table : (tag_table voidP)) 
        (charP_charM_s2_38 : (memory voidP Int8.t)) 
         (charP_charM_s1_37 : (memory voidP Int8.t)) : Int32.t
          requires { true }
          ensures {
            (((exists i_18 : int.
               (((<=) (0) i_18) /\
               (((<=) i_18 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
               ((<>)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_18))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_18))))))))
              ->
              (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
               "expl:Ensures clause"
               (Int32.(<>) result (#"whole_program.jc" 1900 43 55#
               "expl:Integer cast" (Int32.of_int (0)))))
              /\
              (#"/home/work/workspace/self/verker/strcasecmp.h" 17 15 253#
              "expl:Ensures clause"
              (exists i_19 : int.
               (((<=) (0) i_19) /\
               (((<=) i_19 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
               ((forall j_3 : int.
                 ((((<=) (0) j_3) /\ ((<) j_3 i_19)) ->
                  ((=)
                  (tolower
                  (Int8.to_int (select charP_charM_s1_37 (shift s1 j_3))))
                  (tolower
                  (Int8.to_int (select charP_charM_s2_38 (shift s2 j_3)))))))
               /\
               (((<>)
                (tolower
                (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
                (tolower
                (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19)))))
               /\
               ((=) (Int32.to_int result)
               (Int.(-)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19))))))))))))))))
            /\
            ((forall i_20 : int.
              ((((<=) (0) i_20) /\
               ((<=) i_20 (Uint64.to_int (strlen s1 charP_charM_s1_37)))) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_20))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_20)))))))
             ->
             (#"/home/work/workspace/self/verker/strcasecmp.h" 13 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 1894 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcasecmp_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Ctype 
  
  use why3.Bool.Bool 
  
  val strcasecmp
  (s1 : (pointer voidP)) 
   (s2 : (pointer voidP)) 
    (voidP_s2_38_alloc_table : (alloc_table voidP)) 
     (voidP_s1_37_alloc_table : (alloc_table voidP)) 
      (voidP_s2_38_tag_table : (tag_table voidP)) 
       (voidP_s1_37_tag_table : (tag_table voidP)) 
        (charP_charM_s2_38 : (memory voidP Int8.t)) 
         (charP_charM_s1_37 : (memory voidP Int8.t)) : Int32.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 1885 12 76# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcasecmp.h" 8 13 26#
             "expl:Requires clause"
             (valid_str s1 voidP_s1_37_alloc_table charP_charM_s1_37))
            /\
            (#"/home/work/workspace/self/verker/strcasecmp.h" 9 13 26#
            "expl:Requires clause"
            (valid_str s2 voidP_s2_38_alloc_table charP_charM_s2_38))))) }
          ensures {
            (((exists i_18 : int.
               (((<=) (0) i_18) /\
               (((<=) i_18 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
               ((<>)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_18))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_18))))))))
              ->
              (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strcasecmp.h" 16 15 27#
               "expl:Ensures clause"
               (Int32.(<>) result (#"whole_program.jc" 1900 43 55#
               "expl:Integer cast" (Int32.of_int (0)))))
              /\
              (#"/home/work/workspace/self/verker/strcasecmp.h" 17 15 253#
              "expl:Ensures clause"
              (exists i_19 : int.
               (((<=) (0) i_19) /\
               (((<=) i_19 (Uint64.to_int (strlen s1 charP_charM_s1_37))) /\
               ((forall j_3 : int.
                 ((((<=) (0) j_3) /\ ((<) j_3 i_19)) ->
                  ((=)
                  (tolower
                  (Int8.to_int (select charP_charM_s1_37 (shift s1 j_3))))
                  (tolower
                  (Int8.to_int (select charP_charM_s2_38 (shift s2 j_3)))))))
               /\
               (((<>)
                (tolower
                (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
                (tolower
                (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19)))))
               /\
               ((=) (Int32.to_int result)
               (Int.(-)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_19))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_19))))))))))))))))
            /\
            ((forall i_20 : int.
              ((((<=) (0) i_20) /\
               ((<=) i_20 (Uint64.to_int (strlen s1 charP_charM_s1_37)))) ->
               ((=)
               (tolower
               (Int8.to_int (select charP_charM_s1_37 (shift s1 i_20))))
               (tolower
               (Int8.to_int (select charP_charM_s2_38 (shift s2 i_20)))))))
             ->
             (#"/home/work/workspace/self/verker/strcasecmp.h" 13 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 1894 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcat

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcat
  (dest_6 : (pointer voidP)) 
   (src_5 : (pointer voidP)) 
    (charP_charM_dest_6_39 : ref (memory voidP Int8.t)) 
     (voidP_src_5_40_alloc_table : (alloc_table voidP)) 
      (voidP_dest_6_39_alloc_table : (alloc_table voidP)) 
       (voidP_src_5_40_tag_table : (tag_table voidP)) 
        (voidP_dest_6_39_tag_table : (tag_table voidP)) 
         (charP_charM_src_5_40 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true } reads { charP_charM_dest_6_39 } writes {
          charP_charM_dest_6_39 }
          ensures {
            (((allocated voidP_dest_6_39_alloc_table result) ->
              (((=) (typeof voidP_dest_6_39_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_6_39_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_6_39_alloc_table result))) ->
                ((=) (typeof voidP_dest_6_39_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 2093 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_6_39_alloc_table
             voidP_dest_6_39_alloc_table (old !charP_charM_dest_6_39)
             !charP_charM_dest_6_39
             (pset_range (pset_singleton dest_6)
             (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
             (Int.(+)
             (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
             "expl:Ensures clause" ((=) result dest_6))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 19 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_6_39_alloc_table
             !charP_charM_dest_6_39))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 20 12 101#
             "expl:Ensures clause"
             (forall i_21_0 : int.
              ((((<=) (0) i_21_0) /\
               ((<) i_21_0
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))))
               ->
               (Int8.(=)
               (select (old !charP_charM_dest_6_39) (shift dest_6 i_21_0))
               (select !charP_charM_dest_6_39 (shift result i_21_0))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 22 12 156#
             "expl:Ensures clause"
             (forall i_22_0 : int.
              ((((<=)
                (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
                i_22_0)
               /\
               ((<) i_22_0
               (Int.(+)
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
               (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
               (Int8.(=)
               (select charP_charM_src_5_40
               (shift src_5
               (Int.(-) i_22_0
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39))))))
               (select !charP_charM_dest_6_39 (shift result i_22_0))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 25 12 62#
            "expl:Ensures clause"
            ((=) (Uint64.to_int (strlen result !charP_charM_dest_6_39))
            (Int.(+)
            (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
            (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))))))))))))))
            }
  
end

module Function_strcat_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcat
  (dest_6 : (pointer voidP)) 
   (src_5 : (pointer voidP)) 
    (charP_charM_dest_6_39 : ref (memory voidP Int8.t)) 
     (voidP_src_5_40_alloc_table : (alloc_table voidP)) 
      (voidP_dest_6_39_alloc_table : (alloc_table voidP)) 
       (voidP_src_5_40_tag_table : (tag_table voidP)) 
        (voidP_dest_6_39_tag_table : (tag_table voidP)) 
         (charP_charM_src_5_40 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 2073 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 12 13 27#
             "expl:Requires clause"
             (valid_str src_5 voidP_src_5_40_alloc_table
             charP_charM_src_5_40))
            /\
            (#"whole_program.jc" 2073 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 13 13 28#
             "expl:Requires clause"
             (valid_str dest_6 voidP_dest_6_39_alloc_table
             !charP_charM_dest_6_39))
            /\
            (#"whole_program.jc" 2073 12 1288# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 14 13 63#
             "expl:Requires clause"
             ((<=)
             (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))
             (18446744073709551615)))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 16 13 55#
            "expl:Requires clause"
            (if
             ((<=) (0)
             (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_40)))) then
             (((<=) (offset_min voidP_dest_6_39_alloc_table dest_6) (0)) /\
             (((>=) (offset_max voidP_dest_6_39_alloc_table dest_6)
              (Int.(+) (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
              (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))
             /\
             (forall __framac_tmp21 : int.
              ((((<=) (0) __framac_tmp21) /\
               ((<=) __framac_tmp21
               (Int.(+)
               (Uint64.to_int (strlen dest_6 !charP_charM_dest_6_39))
               (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
               ((=) true true))))) else ((=) true true)))))))))) }
          reads { charP_charM_dest_6_39 } writes { charP_charM_dest_6_39 }
          ensures {
            (((allocated voidP_dest_6_39_alloc_table result) ->
              (((=) (typeof voidP_dest_6_39_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_6_39_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_6_39_alloc_table result))) ->
                ((=) (typeof voidP_dest_6_39_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 2093 10 192# "expl:Assigns clause"
             (not_assigns voidP_dest_6_39_alloc_table
             voidP_dest_6_39_alloc_table (old !charP_charM_dest_6_39)
             !charP_charM_dest_6_39
             (pset_range (pset_singleton dest_6)
             (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
             (Int.(+)
             (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
             (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
             "expl:Ensures clause" ((=) result dest_6))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 19 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_6_39_alloc_table
             !charP_charM_dest_6_39))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 20 12 101#
             "expl:Ensures clause"
             (forall i_21_0 : int.
              ((((<=) (0) i_21_0) /\
               ((<) i_21_0
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))))
               ->
               (Int8.(=)
               (select (old !charP_charM_dest_6_39) (shift dest_6 i_21_0))
               (select !charP_charM_dest_6_39 (shift result i_21_0))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 18 12 27#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcat.h" 22 12 156#
             "expl:Ensures clause"
             (forall i_22_0 : int.
              ((((<=)
                (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
                i_22_0)
               /\
               ((<) i_22_0
               (Int.(+)
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
               (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))) ->
               (Int8.(=)
               (select charP_charM_src_5_40
               (shift src_5
               (Int.(-) i_22_0
               (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39))))))
               (select !charP_charM_dest_6_39 (shift result i_22_0))))))
            /\
            (#"/home/work/workspace/self/verker/strcat.h" 25 12 62#
            "expl:Ensures clause"
            ((=) (Uint64.to_int (strlen result !charP_charM_dest_6_39))
            (Int.(+)
            (Uint64.to_int (strlen dest_6 (old !charP_charM_dest_6_39)))
            (Uint64.to_int (strlen src_5 charP_charM_src_5_40))))))))))))))))
            }
  
end

module Function_strchr_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  val strchr_0
  (s_3_0 : (pointer voidP)) 
   (c_14 : Int32.t) 
    (voidP_s_3_44_alloc_table : (alloc_table voidP)) 
     (voidP_s_3_44_tag_table : (tag_table voidP)) 
      (charP_charM_s_3_44 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_3_44_alloc_table result) ->
           (((=) (typeof voidP_s_3_44_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_3_44_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_3_44_alloc_table result))) ->
             ((=) (typeof voidP_s_3_44_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists p_4_0 : (pointer voidP).
            ((same_block s_3_0 p_4_0) /\
            (((<=) (sub_pointer s_3_0 p_4_0) (0)) /\
            ((same_block p_4_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
            /\
            (((<=)
             (sub_pointer p_4_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_3_44 p_4_0)
            (#"whole_program.jc" 2438 28 43# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))) ->
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
            "expl:Ensures clause" (same_block s_3_0 result))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_3_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
            "expl:Ensures clause"
            (same_block result
            (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
            (0)))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 62 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_3_44 result)
            (#"whole_program.jc" 2449 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14))))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 63 15 69#
           "expl:Ensures clause"
           (forall p_5_0 : (pointer voidP).
            (((same_block s_3_0 p_5_0) /\
             (((<=) (sub_pointer s_3_0 p_5_0) (0)) /\
             ((same_block p_5_0 result) /\
             ((<) (sub_pointer p_5_0 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_44 p_5_0)
             (#"whole_program.jc" 2457 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))))))))))
         /\
         (((forall p_6_0 : (pointer voidP).
            (((same_block s_3_0 p_6_0) /\
             (((<=) (sub_pointer s_3_0 p_6_0) (0)) /\
             ((same_block p_6_0
              (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             /\
             ((<=)
             (sub_pointer p_6_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_44 p_6_0)
             (#"whole_program.jc" 2430 28 43# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))) ->
           (#"/home/work/workspace/self/verker/strchr.h" 58 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         (#"/home/work/workspace/self/verker/strchr.h" 55 12 44#
         "expl:Ensures clause"
         ((=) result
         (strchr s_3_0 (#"whole_program.jc" 2423 49 73# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))))) }
  
end

module Function_strchr_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchr 
  
  use why3.Bool.Bool 
  
  val strchr_0
  (s_3_0 : (pointer voidP)) 
   (c_14 : Int32.t) 
    (voidP_s_3_44_alloc_table : (alloc_table voidP)) 
     (voidP_s_3_44_tag_table : (tag_table voidP)) 
      (charP_charM_s_3_44 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker/strchr.h" 53 13 25#
         "expl:Requires clause"
         (valid_str s_3_0 voidP_s_3_44_alloc_table charP_charM_s_3_44))) }
       ensures {
         (((allocated voidP_s_3_44_alloc_table result) ->
           (((=) (typeof voidP_s_3_44_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_3_44_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_3_44_alloc_table result))) ->
             ((=) (typeof voidP_s_3_44_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists p_4_0 : (pointer voidP).
            ((same_block s_3_0 p_4_0) /\
            (((<=) (sub_pointer s_3_0 p_4_0) (0)) /\
            ((same_block p_4_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
            /\
            (((<=)
             (sub_pointer p_4_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_3_44 p_4_0)
            (#"whole_program.jc" 2438 28 43# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14)))))))) ->
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
            "expl:Ensures clause" (same_block s_3_0 result))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_3_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
            "expl:Ensures clause"
            (same_block result
            (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44)))))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 61 20 44#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
            (0)))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 61 15 44#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchr.h" 62 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_3_44 result)
            (#"whole_program.jc" 2449 51 75# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_14))))
           /\
           (#"/home/work/workspace/self/verker/strchr.h" 63 15 69#
           "expl:Ensures clause"
           (forall p_5_0 : (pointer voidP).
            (((same_block s_3_0 p_5_0) /\
             (((<=) (sub_pointer s_3_0 p_5_0) (0)) /\
             ((same_block p_5_0 result) /\
             ((<) (sub_pointer p_5_0 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_44 p_5_0)
             (#"whole_program.jc" 2457 52 76# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))))))))))))))))
         /\
         (((forall p_6_0 : (pointer voidP).
            (((same_block s_3_0 p_6_0) /\
             (((<=) (sub_pointer s_3_0 p_6_0) (0)) /\
             ((same_block p_6_0
              (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             /\
             ((<=)
             (sub_pointer p_6_0
             (shift s_3_0 (Uint64.to_int (strlen s_3_0 charP_charM_s_3_44))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_3_44 p_6_0)
             (#"whole_program.jc" 2430 28 43# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_14))))) ->
           (#"/home/work/workspace/self/verker/strchr.h" 58 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         (#"/home/work/workspace/self/verker/strchr.h" 55 12 44#
         "expl:Ensures clause"
         ((=) result
         (strchr s_3_0 (#"whole_program.jc" 2423 49 73# "expl:Integer cast"
         (Bit_int8_of_Bit_int32.cast_modulo c_14)) charP_charM_s_3_44)))))) }
  
end

module Function_strchrnul_0

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnul 
  
  use why3.Bool.Bool 
  
  val strchrnul_0
  (s_4_0 : (pointer voidP)) 
   (c_15 : Int32.t) 
    (voidP_s_4_48_alloc_table : (alloc_table voidP)) 
     (voidP_s_4_48_tag_table : (tag_table voidP)) 
      (charP_charM_s_4_48 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_4_48_alloc_table result) ->
           (((=) (typeof voidP_s_4_48_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_4_48_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_4_48_alloc_table result))) ->
             ((=) (typeof voidP_s_4_48_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists i_27_0 : int.
            (((<=) (0) i_27_0) /\
            (((<) i_27_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))
            /\
            (Bit_int8.(=) (select charP_charM_s_4_48 (shift s_4_0 i_27_0))
            (#"whole_program.jc" 2694 37 52# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15)))))) ->
           (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_4_48 result)
            (#"whole_program.jc" 2695 49 73# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.h" 66 15 69#
           "expl:Ensures clause"
           (forall p_7_0 : (pointer voidP).
            (((same_block s_4_0 p_7_0) /\
             (((<=) (sub_pointer s_4_0 p_7_0) (0)) /\
             ((same_block p_7_0 result) /\
             ((<) (sub_pointer p_7_0 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 p_7_0)
             (#"whole_program.jc" 2703 50 74# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))))
         /\
         (((forall i_28 : int.
            ((((<=) (0) i_28) /\
             ((<) i_28 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 (shift s_4_0 i_28))
             (#"whole_program.jc" 2686 37 52# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))) ->
           (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
            "expl:Ensures clause"
            ((=) result
            (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.h" 62 15 31#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_4_48 result)
           (#"whole_program.jc" 2690 50 61# "expl:Integer cast"
           (Bit_int8.of_int_const 0))))))))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
          "expl:Ensures clause" (same_block result s_4_0))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 57 12 47#
          "expl:Ensures clause"
          ((=) result
          (strchrnul s_4_0 (#"whole_program.jc" 2672 51 75#
          "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
          charP_charM_s_4_48)))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
          "expl:Ensures clause" (same_block s_4_0 result))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
          "expl:Ensures clause" ((<=) (sub_pointer s_4_0 result) (0)))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
          "expl:Ensures clause"
          (same_block result
          (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48))))
         (0))))))))))))))))) }
  
end

module Function_strchrnul_0_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_Strchrnul 
  
  use why3.Bool.Bool 
  
  val strchrnul_0
  (s_4_0 : (pointer voidP)) 
   (c_15 : Int32.t) 
    (voidP_s_4_48_alloc_table : (alloc_table voidP)) 
     (voidP_s_4_48_tag_table : (tag_table voidP)) 
      (charP_charM_s_4_48 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker/strchrnul.h" 54 13 25#
         "expl:Requires clause"
         (valid_str s_4_0 voidP_s_4_48_alloc_table charP_charM_s_4_48))) }
       ensures {
         (((allocated voidP_s_4_48_alloc_table result) ->
           (((=) (typeof voidP_s_4_48_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_4_48_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_4_48_alloc_table result))) ->
             ((=) (typeof voidP_s_4_48_tag_table (shift result i)) charP_tag)))))
         /\
         (((exists i_27_0 : int.
            (((<=) (0) i_27_0) /\
            (((<) i_27_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))
            /\
            (Bit_int8.(=) (select charP_charM_s_4_48 (shift s_4_0 i_27_0))
            (#"whole_program.jc" 2694 37 52# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15)))))) ->
           (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchrnul.h" 65 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_4_48 result)
            (#"whole_program.jc" 2695 49 73# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_15))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.h" 66 15 69#
           "expl:Ensures clause"
           (forall p_7_0 : (pointer voidP).
            (((same_block s_4_0 p_7_0) /\
             (((<=) (sub_pointer s_4_0 p_7_0) (0)) /\
             ((same_block p_7_0 result) /\
             ((<) (sub_pointer p_7_0 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 p_7_0)
             (#"whole_program.jc" 2703 50 74# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))))))))
         /\
         (((forall i_28 : int.
            ((((<=) (0) i_28) /\
             ((<) i_28 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))) ->
             (Bit_int8.(<>) (select charP_charM_s_4_48 (shift s_4_0 i_28))
             (#"whole_program.jc" 2686 37 52# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_15))))) ->
           (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strchrnul.h" 61 15 39#
            "expl:Ensures clause"
            ((=) result
            (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
           /\
           (#"/home/work/workspace/self/verker/strchrnul.h" 62 15 31#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_4_48 result)
           (#"whole_program.jc" 2690 50 61# "expl:Integer cast"
           (Bit_int8.of_int_const 0))))))))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
          "expl:Ensures clause" (same_block result s_4_0))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 57 12 47#
          "expl:Ensures clause"
          ((=) result
          (strchrnul s_4_0 (#"whole_program.jc" 2672 51 75#
          "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c_15))
          charP_charM_s_4_48)))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
          "expl:Ensures clause" (same_block s_4_0 result))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 12 24#
          "expl:Ensures clause" ((<=) (sub_pointer s_4_0 result) (0)))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 56 12 48#
         "expl:Ensures clause"
         ((#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
          "expl:Ensures clause"
          (same_block result
          (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48)))))
         /\
         (#"/home/work/workspace/self/verker/strchrnul.h" 58 17 41#
         "expl:Ensures clause"
         ((<=)
         (sub_pointer result
         (shift s_4_0 (Uint64.to_int (strlen s_4_0 charP_charM_s_4_48))))
         (0))))))))))))))))) }
  
end

module Function_strcmp

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcmp
  (cs_0 : (pointer voidP)) 
   (ct_0 : (pointer voidP)) 
    (voidP_ct_0_51_alloc_table : (alloc_table voidP)) 
     (voidP_cs_0_50_alloc_table : (alloc_table voidP)) 
      (voidP_ct_0_51_tag_table : (tag_table voidP)) 
       (voidP_cs_0_50_tag_table : (tag_table voidP)) 
        (charP_charM_ct_0_51 : (memory voidP Int8.t)) 
         (charP_charM_cs_0_50 : (memory voidP Int8.t)) : Int32.t
          requires { true }
          ensures {
            (((exists i_29 : int.
               (((<=) (0) i_29) /\
               (((<=) i_29 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50)))
               /\
               (Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_29))
               (select charP_charM_ct_0_51 (shift ct_0 i_29)))))) ->
              (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 2807 44 60#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1)))))
               \/
               (Int32.(=) result (#"whole_program.jc" 2808 45 57#
               "expl:Integer cast" (Int32.of_int (1))))))
              /\
              (#"/home/work/workspace/self/verker/strcmp.h" 67 15 235#
              "expl:Ensures clause"
              (exists i_30 : int.
               (((<=) (0) i_30) /\
               (((<=) i_30 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50)))
               /\
               ((forall j_6 : int.
                 ((((<=) (0) j_6) /\ ((<) j_6 i_30)) ->
                  (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 j_6))
                  (select charP_charM_ct_0_51 (shift ct_0 j_6)))))
               /\
               ((Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_30))
                (select charP_charM_ct_0_51 (shift ct_0 i_30)))
               /\
               (if
                (Bit_uint8.(<) (#"whole_program.jc" 2819 41 81#
                "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_cs_0_50 (shift cs_0 i_30))))
                (#"whole_program.jc" 2820 42 82# "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_ct_0_51 (shift ct_0 i_30))))) then
                (Int32.(=) result (#"whole_program.jc" 2822 38 54#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1))))) else
                (Int32.(=) result (#"whole_program.jc" 2823 63 75#
                "expl:Integer cast" (Int32.of_int (1)))))))))))))))
            /\
            ((forall i_31 : int.
              ((((<=) (0) i_31) /\
               ((<=) i_31 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50))))
               ->
               (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 i_31))
               (select charP_charM_ct_0_51 (shift ct_0 i_31))))) ->
             (#"/home/work/workspace/self/verker/strcmp.h" 63 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 2802 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcmp_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcmp
  (cs_0 : (pointer voidP)) 
   (ct_0 : (pointer voidP)) 
    (voidP_ct_0_51_alloc_table : (alloc_table voidP)) 
     (voidP_cs_0_50_alloc_table : (alloc_table voidP)) 
      (voidP_ct_0_51_tag_table : (tag_table voidP)) 
       (voidP_cs_0_50_tag_table : (tag_table voidP)) 
        (charP_charM_ct_0_51 : (memory voidP Int8.t)) 
         (charP_charM_cs_0_50 : (memory voidP Int8.t)) : Int32.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 2793 12 93# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcmp.h" 57 13 26#
             "expl:Requires clause"
             (valid_str cs_0 voidP_cs_0_50_alloc_table charP_charM_cs_0_50))
            /\
            (#"/home/work/workspace/self/verker/strcmp.h" 58 13 26#
            "expl:Requires clause"
            (valid_str ct_0 voidP_ct_0_51_alloc_table charP_charM_ct_0_51)))))
            }
          ensures {
            (((exists i_29 : int.
               (((<=) (0) i_29) /\
               (((<=) i_29 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50)))
               /\
               (Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_29))
               (select charP_charM_ct_0_51 (shift ct_0 i_29)))))) ->
              (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strcmp.h" 66 15 44#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 2807 44 60#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1)))))
               \/
               (Int32.(=) result (#"whole_program.jc" 2808 45 57#
               "expl:Integer cast" (Int32.of_int (1))))))
              /\
              (#"/home/work/workspace/self/verker/strcmp.h" 67 15 235#
              "expl:Ensures clause"
              (exists i_30 : int.
               (((<=) (0) i_30) /\
               (((<=) i_30 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50)))
               /\
               ((forall j_6 : int.
                 ((((<=) (0) j_6) /\ ((<) j_6 i_30)) ->
                  (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 j_6))
                  (select charP_charM_ct_0_51 (shift ct_0 j_6)))))
               /\
               ((Bit_int8.(<>) (select charP_charM_cs_0_50 (shift cs_0 i_30))
                (select charP_charM_ct_0_51 (shift ct_0 i_30)))
               /\
               (if
                (Bit_uint8.(<) (#"whole_program.jc" 2819 41 81#
                "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_cs_0_50 (shift cs_0 i_30))))
                (#"whole_program.jc" 2820 42 82# "expl:Integer cast"
                (Bit_uint8_of_Bit_int8.cast_modulo
                (select charP_charM_ct_0_51 (shift ct_0 i_30))))) then
                (Int32.(=) result (#"whole_program.jc" 2822 38 54#
                "expl:Integer cast" (Int32.of_int (Int.(-_) (1))))) else
                (Int32.(=) result (#"whole_program.jc" 2823 63 75#
                "expl:Integer cast" (Int32.of_int (1)))))))))))))))
            /\
            ((forall i_31 : int.
              ((((<=) (0) i_31) /\
               ((<=) i_31 (Uint64.to_int (strlen cs_0 charP_charM_cs_0_50))))
               ->
               (Bit_int8.(=) (select charP_charM_cs_0_50 (shift cs_0 i_31))
               (select charP_charM_ct_0_51 (shift ct_0 i_31))))) ->
             (#"/home/work/workspace/self/verker/strcmp.h" 63 15 27#
             "expl:Ensures clause"
             (Int32.(=) result (#"whole_program.jc" 2802 32 44#
             "expl:Integer cast" (Int32.of_int (0))))))) }
  
end

module Function_strcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcpy
  (dest_7 : (pointer voidP)) 
   (src_6 : (pointer voidP)) 
    (charP_charM_dest_7_52 : ref (memory voidP Int8.t)) 
     (voidP_src_6_53_alloc_table : (alloc_table voidP)) 
      (voidP_dest_7_52_alloc_table : (alloc_table voidP)) 
       (voidP_src_6_53_tag_table : (tag_table voidP)) 
        (voidP_dest_7_52_tag_table : (tag_table voidP)) 
         (charP_charM_src_6_53 : (memory voidP Int8.t)) : (pointer voidP)
          requires { true } reads { charP_charM_dest_7_52 } writes {
          charP_charM_dest_7_52 }
          ensures {
            (((allocated voidP_dest_7_52_alloc_table result) ->
              (((=) (typeof voidP_dest_7_52_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_7_52_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_7_52_alloc_table result))) ->
                ((=) (typeof voidP_dest_7_52_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 3025 10 63# "expl:Assigns clause"
             (not_assigns voidP_dest_7_52_alloc_table
             voidP_dest_7_52_alloc_table (old !charP_charM_dest_7_52)
             !charP_charM_dest_7_52
             (pset_range (pset_singleton dest_7) (0)
             (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_7_52_alloc_table
             !charP_charM_dest_7_52))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_7))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 18 12 77#
            "expl:Ensures clause"
            (forall i_32_0 : int.
             ((((<=) (0) i_32_0) /\
              ((<=) i_32_0
              (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
              (Int8.(=) (select !charP_charM_dest_7_52 (shift result i_32_0))
              (select charP_charM_src_6_53 (shift src_6 i_32_0))))))))))))) }
  
end

module Function_strcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strcpy
  (dest_7 : (pointer voidP)) 
   (src_6 : (pointer voidP)) 
    (charP_charM_dest_7_52 : ref (memory voidP Int8.t)) 
     (voidP_src_6_53_alloc_table : (alloc_table voidP)) 
      (voidP_dest_7_52_alloc_table : (alloc_table voidP)) 
       (voidP_src_6_53_tag_table : (tag_table voidP)) 
        (voidP_dest_7_52_tag_table : (tag_table voidP)) 
         (charP_charM_src_6_53 : (memory voidP Int8.t)) : (pointer voidP)
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 3012 12 773# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 12 13 27#
             "expl:Requires clause"
             (valid_str src_6 voidP_src_6_53_alloc_table
             charP_charM_src_6_53))
            /\
            (#"whole_program.jc" 3012 12 773# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 13 13 42#
             "expl:Requires clause"
             (if
              ((<=) (0) (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))
              then
              (((<=) (offset_min voidP_dest_7_52_alloc_table dest_7) (0)) /\
              (((>=) (offset_max voidP_dest_7_52_alloc_table dest_7)
               (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))
              /\
              (forall __framac_tmp25 : int.
               ((((<=) (0) __framac_tmp25) /\
                ((<=) __framac_tmp25
                (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
                ((=) true true))))) else ((=) true true)))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 14 13 48#
            "expl:Requires clause" (not (same_block dest_7 src_6)))))))) }
          reads { charP_charM_dest_7_52 } writes { charP_charM_dest_7_52 }
          ensures {
            (((allocated voidP_dest_7_52_alloc_table result) ->
              (((=) (typeof voidP_dest_7_52_tag_table result) charP_tag) /\
              (forall i : int.
               ((((<=) (offset_min voidP_dest_7_52_alloc_table result) i) /\
                ((<) i (offset_max voidP_dest_7_52_alloc_table result))) ->
                ((=) (typeof voidP_dest_7_52_tag_table (shift result i))
                charP_tag)))))
            /\
            ((#"whole_program.jc" 3025 10 63# "expl:Assigns clause"
             (not_assigns voidP_dest_7_52_alloc_table
             voidP_dest_7_52_alloc_table (old !charP_charM_dest_7_52)
             !charP_charM_dest_7_52
             (pset_range (pset_singleton dest_7) (0)
             (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
             "expl:Ensures clause"
             (valid_str result voidP_dest_7_52_alloc_table
             !charP_charM_dest_7_52))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 16 12 30#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcpy.h" 17 12 27#
             "expl:Ensures clause" ((=) result dest_7))
            /\
            (#"/home/work/workspace/self/verker/strcpy.h" 18 12 77#
            "expl:Ensures clause"
            (forall i_32_0 : int.
             ((((<=) (0) i_32_0) /\
              ((<=) i_32_0
              (Uint64.to_int (strlen src_6 charP_charM_src_6_53)))) ->
              (Int8.(=) (select !charP_charM_dest_7_52 (shift result i_32_0))
              (select charP_charM_src_6_53 (shift src_6 i_32_0))))))))))))) }
  
end

module Function_strcspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_5_0 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_61_alloc_table : (alloc_table voidP)) 
     (voidP_s_5_60_alloc_table : (alloc_table voidP)) 
      (voidP_reject_61_tag_table : (tag_table voidP)) 
       (voidP_s_5_60_tag_table : (tag_table voidP)) 
        (charP_charM_reject_61 : (memory voidP Int8.t)) 
         (charP_charM_s_5_60 : (memory voidP Int8.t)) : Uint64.t
          requires { true }
          ensures {
            (((forall p_9 : (pointer voidP).
               (forall t : (pointer voidP).
                (((same_block s_5_0 p_9) /\
                 (((<=) (sub_pointer s_5_0 p_9) (0)) /\
                 ((same_block p_9
                  (shift s_5_0
                  (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
                 /\
                 (((<)
                  (sub_pointer p_9
                  (shift s_5_0
                  (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
                 /\
                 ((same_block reject_0 t) /\
                 (((<=) (sub_pointer reject_0 t) (0)) /\
                 ((same_block t
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 /\
                 ((<)
                 (sub_pointer t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_60 p_9)
                 (select charP_charM_reject_61 t))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_5_0 charP_charM_s_5_60))))
            /\
            (((exists p_10 : (pointer voidP).
               (exists t_0 : (pointer voidP).
                ((same_block s_5_0 p_10) /\
                (((<=) (sub_pointer s_5_0 p_10) (0)) /\
                ((same_block p_10
                 (shift s_5_0
                 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
                /\
                (((<)
                 (sub_pointer p_10
                 (shift s_5_0
                 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
                /\
                ((same_block reject_0 t_0) /\
                (((<=) (sub_pointer reject_0 t_0) (0)) /\
                ((same_block t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                /\
                (((<)
                 (sub_pointer t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_5_60 p_10)
                (select charP_charM_reject_61 t_0)))))))))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_1 : (pointer voidP).
               ((same_block reject_0 t_1) /\
               (((<=) (sub_pointer reject_0 t_1) (0)) /\
               ((same_block t_1
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
               /\
               (((<)
                (sub_pointer t_1
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_5_60
               (shift s_5_0 (Uint64.to_int result)))
               (select charP_charM_reject_61 t_1)))))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_5_0 reject_0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 3255 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_5_0 charP_charM_s_5_60)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_11 : (pointer voidP).
             (forall t_2 : (pointer voidP).
              (((same_block s_5_0 p_11) /\
               (((<=) (sub_pointer s_5_0 p_11) (0)) /\
               ((same_block p_11 (shift s_5_0 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_11 (shift s_5_0 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_2) /\
               (((<=) (sub_pointer reject_0 t_2) (0)) /\
               ((same_block t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
               /\
               ((<)
               (sub_pointer t_2
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_5_60 p_11)
               (select charP_charM_reject_61 t_2))))))))))))))) }
  
end

module Function_strcspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_5_0 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_61_alloc_table : (alloc_table voidP)) 
     (voidP_s_5_60_alloc_table : (alloc_table voidP)) 
      (voidP_reject_61_tag_table : (tag_table voidP)) 
       (voidP_s_5_60_tag_table : (tag_table voidP)) 
        (charP_charM_reject_61 : (memory voidP Int8.t)) 
         (charP_charM_s_5_60 : (memory voidP Int8.t)) : Uint64.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 3249 12 94# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
             "expl:Requires clause"
             (valid_str s_5_0 voidP_s_5_60_alloc_table charP_charM_s_5_60))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
            "expl:Requires clause"
            (valid_str reject_0 voidP_reject_61_alloc_table
            charP_charM_reject_61))))) }
          ensures {
            (((forall p_9 : (pointer voidP).
               (forall t : (pointer voidP).
                (((same_block s_5_0 p_9) /\
                 (((<=) (sub_pointer s_5_0 p_9) (0)) /\
                 ((same_block p_9
                  (shift s_5_0
                  (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
                 /\
                 (((<)
                  (sub_pointer p_9
                  (shift s_5_0
                  (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
                 /\
                 ((same_block reject_0 t) /\
                 (((<=) (sub_pointer reject_0 t) (0)) /\
                 ((same_block t
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 /\
                 ((<)
                 (sub_pointer t
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_5_60 p_9)
                 (select charP_charM_reject_61 t))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_5_0 charP_charM_s_5_60))))
            /\
            (((exists p_10 : (pointer voidP).
               (exists t_0 : (pointer voidP).
                ((same_block s_5_0 p_10) /\
                (((<=) (sub_pointer s_5_0 p_10) (0)) /\
                ((same_block p_10
                 (shift s_5_0
                 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60))))
                /\
                (((<)
                 (sub_pointer p_10
                 (shift s_5_0
                 (Uint64.to_int (strlen s_5_0 charP_charM_s_5_60)))) (0))
                /\
                ((same_block reject_0 t_0) /\
                (((<=) (sub_pointer reject_0 t_0) (0)) /\
                ((same_block t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                /\
                (((<)
                 (sub_pointer t_0
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_5_60 p_10)
                (select charP_charM_reject_61 t_0)))))))))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_1 : (pointer voidP).
               ((same_block reject_0 t_1) /\
               (((<=) (sub_pointer reject_0 t_1) (0)) /\
               ((same_block t_1
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
               /\
               (((<)
                (sub_pointer t_1
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_5_60
               (shift s_5_0 (Uint64.to_int result)))
               (select charP_charM_reject_61 t_1)))))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_5_0 reject_0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 3255 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_5_0 charP_charM_s_5_60)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_11 : (pointer voidP).
             (forall t_2 : (pointer voidP).
              (((same_block s_5_0 p_11) /\
               (((<=) (sub_pointer s_5_0 p_11) (0)) /\
               ((same_block p_11 (shift s_5_0 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_11 (shift s_5_0 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_2) /\
               (((<=) (sub_pointer reject_0 t_2) (0)) /\
               ((same_block t_2
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_61))))
               /\
               ((<)
               (sub_pointer t_2
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_61)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_5_60 p_11)
               (select charP_charM_reject_61 t_2))))))))))))))) }
  
end

module Function_strlcpy

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlcpy
  (dest_8 : (pointer voidP)) 
   (src_7 : (pointer voidP)) 
    (size_2 : Uint64.t) 
     (charP_charM_dest_8_69 : ref (memory voidP Int8.t)) 
      (voidP_src_7_70_alloc_table : (alloc_table voidP)) 
       (voidP_dest_8_69_alloc_table : (alloc_table voidP)) 
        (voidP_src_7_70_tag_table : (tag_table voidP)) 
         (voidP_dest_8_69_tag_table : (tag_table voidP)) 
          (charP_charM_src_7_70 : (memory voidP Int8.t)) : Uint64.t
           requires { true } reads { charP_charM_dest_8_69 } writes {
           charP_charM_dest_8_69 }
           ensures {
             (((Uint64.(=) size_2 (#"whole_program.jc" 3707 21 34#
               "expl:Integer cast" (Uint64.of_int (0)))) ->
               (#"whole_program.jc" 3708 10 18# "expl:Assigns clause"
               (not_assigns voidP_dest_8_69_alloc_table
               voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
               !charP_charM_dest_8_69 pset_empty)))
             /\
             (((Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)) ->
               ((#"whole_program.jc" 3698 10 63# "expl:Assigns clause"
                (not_assigns voidP_dest_8_69_alloc_table
                voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
                !charP_charM_dest_8_69
                (pset_range (pset_singleton dest_8) (0)
                (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
               /\
               (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               ((#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
                "expl:Ensures clause"
                (forall i_33_0 : int.
                 ((((<=) (0) i_33_0) /\
                  ((<) i_33_0
                  (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
                  (Int8.(=)
                  (select charP_charM_src_7_70 (shift src_7 i_33_0))
                  (select !charP_charM_dest_8_69 (shift dest_8 i_33_0))))))
               /\
               (#"/home/work/workspace/self/verker/strlcpy.h" 32 15 30#
               "expl:Ensures clause"
               (valid_str dest_8 voidP_dest_8_69_alloc_table
               !charP_charM_dest_8_69)))))))
             /\
             (((Uint64.(<) (#"whole_program.jc" 3687 12 25#
               "expl:Integer cast" (Uint64.of_int (0))) size_2)
              /\ (Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70))) ->
              ((#"whole_program.jc" 3688 10 57# "expl:Assigns clause"
               (not_assigns voidP_dest_8_69_alloc_table
               voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
               !charP_charM_dest_8_69
               (pset_range (pset_singleton dest_8) (0)
               (Int.(-) (Uint64.to_int size_2) (1)))))
              /\
              (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
               "expl:Ensures clause"
               (forall i_34_0 : int.
                ((((<=) (0) i_34_0) /\
                 ((<) i_34_0 (Int.(-) (Uint64.to_int size_2) (1)))) ->
                 (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_34_0))
                 (select !charP_charM_dest_8_69 (shift dest_8 i_34_0))))))
              /\
              (#"/home/work/workspace/self/verker/strlcpy.h" 27 15 30#
              "expl:Ensures clause"
              (valid_str dest_8 voidP_dest_8_69_alloc_table
              !charP_charM_dest_8_69))))))))) }
  
end

module Function_strlcpy_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlcpy
  (dest_8 : (pointer voidP)) 
   (src_7 : (pointer voidP)) 
    (size_2 : Uint64.t) 
     (charP_charM_dest_8_69 : ref (memory voidP Int8.t)) 
      (voidP_src_7_70_alloc_table : (alloc_table voidP)) 
       (voidP_dest_8_69_alloc_table : (alloc_table voidP)) 
        (voidP_src_7_70_tag_table : (tag_table voidP)) 
         (voidP_dest_8_69_tag_table : (tag_table voidP)) 
          (charP_charM_src_7_70 : (memory voidP Int8.t)) : Uint64.t
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 3672 12 785# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/strlcpy.h" 20 13 39#
              "expl:Requires clause"
              (if ((<=) (0) (Int.(-) (Uint64.to_int size_2) (1))) then
               (((<=) (offset_min voidP_dest_8_69_alloc_table dest_8) (0)) /\
               (((>=) (offset_max voidP_dest_8_69_alloc_table dest_8)
                (Int.(-) (Uint64.to_int size_2) (1)))
               /\
               (forall __framac_tmp35 : int.
                ((((<=) (0) __framac_tmp35) /\
                 ((<=) __framac_tmp35 (Int.(-) (Uint64.to_int size_2) (1))))
                 -> ((=) true true))))) else ((=) true true)))
             /\
             (#"whole_program.jc" 3672 12 785# "expl:Requires clause"
             ((#"/home/work/workspace/self/verker/strlcpy.h" 21 13 27#
              "expl:Requires clause"
              (valid_str src_7 voidP_src_7_70_alloc_table
              charP_charM_src_7_70))
             /\
             (#"/home/work/workspace/self/verker/strlcpy.h" 22 13 48#
             "expl:Requires clause" (not (same_block dest_8 src_7)))))))) }
           reads { charP_charM_dest_8_69 } writes { charP_charM_dest_8_69 }
           ensures {
             (((Uint64.(=) size_2 (#"whole_program.jc" 3707 21 34#
               "expl:Integer cast" (Uint64.of_int (0)))) ->
               (#"whole_program.jc" 3708 10 18# "expl:Assigns clause"
               (not_assigns voidP_dest_8_69_alloc_table
               voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
               !charP_charM_dest_8_69 pset_empty)))
             /\
             (((Uint64.(>) size_2 (strlen src_7 charP_charM_src_7_70)) ->
               ((#"whole_program.jc" 3698 10 63# "expl:Assigns clause"
                (not_assigns voidP_dest_8_69_alloc_table
                voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
                !charP_charM_dest_8_69
                (pset_range (pset_singleton dest_8) (0)
                (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))))
               /\
               (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               (#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
               "expl:Ensures clause"
               ((#"/home/work/workspace/self/verker/strlcpy.h" 31 15 76#
                "expl:Ensures clause"
                (forall i_33_0 : int.
                 ((((<=) (0) i_33_0) /\
                  ((<) i_33_0
                  (Uint64.to_int (strlen src_7 charP_charM_src_7_70)))) ->
                  (Int8.(=)
                  (select charP_charM_src_7_70 (shift src_7 i_33_0))
                  (select !charP_charM_dest_8_69 (shift dest_8 i_33_0))))))
               /\
               (#"/home/work/workspace/self/verker/strlcpy.h" 32 15 30#
               "expl:Ensures clause"
               (valid_str dest_8 voidP_dest_8_69_alloc_table
               !charP_charM_dest_8_69)))))))
             /\
             (((Uint64.(<) (#"whole_program.jc" 3687 12 25#
               "expl:Integer cast" (Uint64.of_int (0))) size_2)
              /\ (Uint64.(<=) size_2 (strlen src_7 charP_charM_src_7_70))) ->
              ((#"whole_program.jc" 3688 10 57# "expl:Assigns clause"
               (not_assigns voidP_dest_8_69_alloc_table
               voidP_dest_8_69_alloc_table (old !charP_charM_dest_8_69)
               !charP_charM_dest_8_69
               (pset_range (pset_singleton dest_8) (0)
               (Int.(-) (Uint64.to_int size_2) (1)))))
              /\
              (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              (#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
              "expl:Ensures clause"
              ((#"/home/work/workspace/self/verker/strlcpy.h" 26 15 73#
               "expl:Ensures clause"
               (forall i_34_0 : int.
                ((((<=) (0) i_34_0) /\
                 ((<) i_34_0 (Int.(-) (Uint64.to_int size_2) (1)))) ->
                 (Int8.(=) (select charP_charM_src_7_70 (shift src_7 i_34_0))
                 (select !charP_charM_dest_8_69 (shift dest_8 i_34_0))))))
              /\
              (#"/home/work/workspace/self/verker/strlcpy.h" 27 15 30#
              "expl:Ensures clause"
              (valid_str dest_8 voidP_dest_8_69_alloc_table
              !charP_charM_dest_8_69))))))))) }
  
end

module Function_strnchr

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_7 : (pointer voidP)) 
   (count_3 : Uint64.t) 
    (c_16 : Int32.t) 
     (voidP_s_7_74_alloc_table : (alloc_table voidP)) 
      (voidP_s_7_74_tag_table : (tag_table voidP)) 
       (charP_charM_s_7_74 : (memory voidP Int8.t)) : (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_s_7_74_alloc_table result) ->
            (((=) (typeof voidP_s_7_74_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_7_74_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_7_74_alloc_table result))) ->
              ((=) (typeof voidP_s_7_74_tag_table (shift result i))
              charP_tag)))))
          /\
          (((forall p_12 : (pointer voidP).
             (((same_block s_7 p_12) /\
              (((<=) (sub_pointer s_7 p_12) (0)) /\
              ((same_block p_12
               (shift s_7
               (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
              /\
              ((<)
              (sub_pointer p_12
              (shift s_7
              (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_7_74 p_12)
              (#"whole_program.jc" 4055 29 44# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_16))))) ->
            (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_13 : (pointer voidP).
            ((same_block s_7 p_13) /\
            (((<=) (sub_pointer s_7 p_13) (0)) /\
            ((same_block p_13
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
            /\
            (((<)
             (sub_pointer p_13
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_7_74 p_13)
            (#"whole_program.jc" 4022 29 44# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) ->
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_7 result))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_7_74 result)
            (#"whole_program.jc" 4036 37 61# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_14 : (pointer voidP).
            (((same_block s_7 p_14) /\
             (((<=) (sub_pointer s_7 p_14) (0)) /\
             ((same_block p_14 result) /\
             ((<) (sub_pointer p_14 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_7_74 p_14)
             (#"whole_program.jc" 4045 42 66# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))))) }
  
end

module Function_strnchr_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_7 : (pointer voidP)) 
   (count_3 : Uint64.t) 
    (c_16 : Int32.t) 
     (voidP_s_7_74_alloc_table : (alloc_table voidP)) 
      (voidP_s_7_74_tag_table : (tag_table voidP)) 
       (charP_charM_s_7_74 : (memory voidP Int8.t)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
          "expl:Requires clause"
          (valid_strn s_7 count_3 voidP_s_7_74_alloc_table
          charP_charM_s_7_74))) }
        ensures {
          (((allocated voidP_s_7_74_alloc_table result) ->
            (((=) (typeof voidP_s_7_74_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_7_74_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_7_74_alloc_table result))) ->
              ((=) (typeof voidP_s_7_74_tag_table (shift result i))
              charP_tag)))))
          /\
          (((forall p_12 : (pointer voidP).
             (((same_block s_7 p_12) /\
              (((<=) (sub_pointer s_7 p_12) (0)) /\
              ((same_block p_12
               (shift s_7
               (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
              /\
              ((<)
              (sub_pointer p_12
              (shift s_7
              (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_7_74 p_12)
              (#"whole_program.jc" 4055 29 44# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c_16))))) ->
            (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_13 : (pointer voidP).
            ((same_block s_7 p_13) /\
            (((<=) (sub_pointer s_7 p_13) (0)) /\
            ((same_block p_13
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74))))
            /\
            (((<)
             (sub_pointer p_13
             (shift s_7
             (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_7_74 p_13)
            (#"whole_program.jc" 4022 29 44# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))) ->
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_7 result))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_7 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_7
            (Uint64.to_int (strnlen s_7 count_3 charP_charM_s_7_74)))) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_7_74 result)
            (#"whole_program.jc" 4036 37 61# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_16))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_14 : (pointer voidP).
            (((same_block s_7 p_14) /\
             (((<=) (sub_pointer s_7 p_14) (0)) /\
             ((same_block p_14 result) /\
             ((<) (sub_pointer p_14 result) (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_7_74 p_14)
             (#"whole_program.jc" 4045 42 66# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_16)))))))))))))))))))) }
  
end

module Function_strnlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_8_0 : (pointer voidP)) 
   (count_4 : Uint64.t) 
    (voidP_s_8_76_alloc_table : (alloc_table voidP)) 
     (voidP_s_8_76_tag_table : (tag_table voidP)) 
      (charP_charM_s_8_76 : (memory voidP Int8.t)) : Uint64.t
       requires { true }
       ensures {
         (((forall i_42 : int.
            ((((<=) (0) i_42) /\ ((<=) i_42 (Uint64.to_int count_4))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_42))
             (#"whole_program.jc" 4205 37 48# "expl:Integer cast"
             (Int8.of_int (0)))))) ->
           (#"/home/work/workspace/self/verker/strnlen.h" 122 15 31#
           "expl:Ensures clause" (Uint64.(=) result count_4)))
         /\
         (((exists i_43 : int.
            (((<=) (0) i_43) /\
            (((<=) i_43 (Uint64.to_int count_4)) /\
            (Int8.(=) (select charP_charM_s_8_76 (shift s_8_0 i_43))
            (#"whole_program.jc" 4194 37 48# "expl:Integer cast" (Int8.of_int
            (0))))))) ->
           (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
            "expl:Ensures clause"
            (Int8.(=)
            (select charP_charM_s_8_76 (shift s_8_0 (Uint64.to_int result)))
            (#"whole_program.jc" 4196 35 46# "expl:Integer cast" (Int8.of_int
            (0)))))
           /\
           (#"/home/work/workspace/self/verker/strnlen.h" 119 15 67#
           "expl:Ensures clause"
           (forall i_44 : int.
            ((((<=) (0) i_44) /\ ((<) i_44 (Uint64.to_int result))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_44))
             (#"whole_program.jc" 4201 40 51# "expl:Integer cast"
             (Int8.of_int (0)))))))))))
         /\
         (#"/home/work/workspace/self/verker/strnlen.h" 115 12 40#
         "expl:Ensures clause"
         (Uint64.(=) result (strnlen s_8_0 count_4 charP_charM_s_8_76))))) }
  
end

module Function_strnlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_8_0 : (pointer voidP)) 
   (count_4 : Uint64.t) 
    (voidP_s_8_76_alloc_table : (alloc_table voidP)) 
     (voidP_s_8_76_tag_table : (tag_table voidP)) 
      (charP_charM_s_8_76 : (memory voidP Int8.t)) : Uint64.t
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
         "expl:Requires clause"
         (valid_strn s_8_0 count_4 voidP_s_8_76_alloc_table
         charP_charM_s_8_76))) }
       ensures {
         (((forall i_42 : int.
            ((((<=) (0) i_42) /\ ((<=) i_42 (Uint64.to_int count_4))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_42))
             (#"whole_program.jc" 4205 37 48# "expl:Integer cast"
             (Int8.of_int (0)))))) ->
           (#"/home/work/workspace/self/verker/strnlen.h" 122 15 31#
           "expl:Ensures clause" (Uint64.(=) result count_4)))
         /\
         (((exists i_43 : int.
            (((<=) (0) i_43) /\
            (((<=) i_43 (Uint64.to_int count_4)) /\
            (Int8.(=) (select charP_charM_s_8_76 (shift s_8_0 i_43))
            (#"whole_program.jc" 4194 37 48# "expl:Integer cast" (Int8.of_int
            (0))))))) ->
           (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
            "expl:Ensures clause"
            (Int8.(=)
            (select charP_charM_s_8_76 (shift s_8_0 (Uint64.to_int result)))
            (#"whole_program.jc" 4196 35 46# "expl:Integer cast" (Int8.of_int
            (0)))))
           /\
           (#"/home/work/workspace/self/verker/strnlen.h" 119 15 67#
           "expl:Ensures clause"
           (forall i_44 : int.
            ((((<=) (0) i_44) /\ ((<) i_44 (Uint64.to_int result))) ->
             (Int8.(<>) (select charP_charM_s_8_76 (shift s_8_0 i_44))
             (#"whole_program.jc" 4201 40 51# "expl:Integer cast"
             (Int8.of_int (0)))))))))))
         /\
         (#"/home/work/workspace/self/verker/strnlen.h" 115 12 40#
         "expl:Ensures clause"
         (Uint64.(=) result (strnlen s_8_0 count_4 charP_charM_s_8_76))))) }
  
end

module Function_strrchr

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strrchr
  (s_9 : (pointer voidP)) 
   (c_17 : Int32.t) 
    (voidP_s_9_83_alloc_table : (alloc_table voidP)) 
     (voidP_s_9_83_tag_table : (tag_table voidP)) 
      (charP_charM_s_9_83 : (memory voidP Int8.t)) : (pointer voidP)
       requires { true }
       ensures {
         (((allocated voidP_s_9_83_alloc_table result) ->
           (((=) (typeof voidP_s_9_83_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_9_83_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_9_83_alloc_table result))) ->
             ((=) (typeof voidP_s_9_83_tag_table (shift result i)) charP_tag)))))
         /\
         (((forall p_18_0 : (pointer voidP).
            (((same_block s_9 p_18_0) /\
             (((<=) (sub_pointer s_9 p_18_0) (0)) /\
             ((same_block p_18_0
              (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
             /\
             ((<=)
             (sub_pointer p_18_0
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_9_83 p_18_0)
             (#"whole_program.jc" 4821 29 44# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))) ->
           (#"/home/work/workspace/self/verker/strrchr.h" 71 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         ((exists p_19_0 : (pointer voidP).
           ((same_block s_9 p_19_0) /\
           (((<=) (sub_pointer s_9 p_19_0) (0)) /\
           ((same_block p_19_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
           /\
           (((<=)
            (sub_pointer p_19_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_83 p_19_0)
           (#"whole_program.jc" 4787 29 44# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
           "expl:Ensures clause" (same_block s_9 result))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
           "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
           "expl:Ensures clause"
           (same_block result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
           "expl:Ensures clause"
           ((<=)
           (sub_pointer result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 66 15 36#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_9_83 result)
           (#"whole_program.jc" 4799 37 61# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17))))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 67 15 95#
          "expl:Ensures clause"
          (forall p_20_0 : (pointer voidP).
           (((same_block result p_20_0) /\
            (((<) (sub_pointer result p_20_0) (0)) /\
            ((same_block p_20_0
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
            /\
            ((<=)
            (sub_pointer p_20_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))))
            ->
            (Bit_int8.(<>) (select charP_charM_s_9_83 p_20_0)
            (#"whole_program.jc" 4813 42 66# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))))) }
  
end

module Function_strrchr_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strrchr
  (s_9 : (pointer voidP)) 
   (c_17 : Int32.t) 
    (voidP_s_9_83_alloc_table : (alloc_table voidP)) 
     (voidP_s_9_83_tag_table : (tag_table voidP)) 
      (charP_charM_s_9_83 : (memory voidP Int8.t)) : (pointer voidP)
       requires {
         ("expl:Internal"
         (#"/home/work/workspace/self/verker/strrchr.h" 60 13 25#
         "expl:Requires clause"
         (valid_str s_9 voidP_s_9_83_alloc_table charP_charM_s_9_83))) }
       ensures {
         (((allocated voidP_s_9_83_alloc_table result) ->
           (((=) (typeof voidP_s_9_83_tag_table result) charP_tag) /\
           (forall i : int.
            ((((<=) (offset_min voidP_s_9_83_alloc_table result) i) /\
             ((<) i (offset_max voidP_s_9_83_alloc_table result))) ->
             ((=) (typeof voidP_s_9_83_tag_table (shift result i)) charP_tag)))))
         /\
         (((forall p_18_0 : (pointer voidP).
            (((same_block s_9 p_18_0) /\
             (((<=) (sub_pointer s_9 p_18_0) (0)) /\
             ((same_block p_18_0
              (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
             /\
             ((<=)
             (sub_pointer p_18_0
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
             (0))))) ->
             (Bit_int8.(<>) (select charP_charM_s_9_83 p_18_0)
             (#"whole_program.jc" 4821 29 44# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c_17))))) ->
           (#"/home/work/workspace/self/verker/strrchr.h" 71 15 31#
           "expl:Ensures clause" ((=) result null)))
         /\
         ((exists p_19_0 : (pointer voidP).
           ((same_block s_9 p_19_0) /\
           (((<=) (sub_pointer s_9 p_19_0) (0)) /\
           ((same_block p_19_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
           /\
           (((<=)
            (sub_pointer p_19_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0))
           /\
           (Bit_int8.(=) (select charP_charM_s_9_83 p_19_0)
           (#"whole_program.jc" 4787 29 44# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))) ->
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
           "expl:Ensures clause" (same_block s_9 result))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 15 27#
           "expl:Ensures clause" ((<=) (sub_pointer s_9 result) (0)))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
           "expl:Ensures clause"
           (same_block result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 65 20 44#
           "expl:Ensures clause"
           ((<=)
           (sub_pointer result
           (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 65 15 44#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strrchr.h" 66 15 36#
           "expl:Ensures clause"
           (Bit_int8.(=) (select charP_charM_s_9_83 result)
           (#"whole_program.jc" 4799 37 61# "expl:Integer cast"
           (Bit_int8_of_Bit_int32.cast_modulo c_17))))
          /\
          (#"/home/work/workspace/self/verker/strrchr.h" 67 15 95#
          "expl:Ensures clause"
          (forall p_20_0 : (pointer voidP).
           (((same_block result p_20_0) /\
            (((<) (sub_pointer result p_20_0) (0)) /\
            ((same_block p_20_0
             (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83))))
            /\
            ((<=)
            (sub_pointer p_20_0
            (shift s_9 (Uint64.to_int (strlen s_9 charP_charM_s_9_83)))) (0)))))
            ->
            (Bit_int8.(<>) (select charP_charM_s_9_83 p_20_0)
            (#"whole_program.jc" 4813 42 66# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c_17)))))))))))))))))))) }
  
end

module Function_strsep

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strsep
  (s_10 : (pointer char_xP)) 
   (ct_2 : (pointer voidP)) 
    (char_xP_char_xM_s_10_85 : ref (memory char_xP (pointer voidP))) 
     (charP_charM_result_87 : ref (memory voidP Int8.t)) 
      (voidP_result_87_alloc_table : (alloc_table voidP)) 
       (voidP_ct_2_86_alloc_table : (alloc_table voidP)) 
        (char_xP_s_10_85_alloc_table : (alloc_table char_xP)) 
         (voidP_result_87_tag_table : (tag_table voidP)) 
          (voidP_ct_2_86_tag_table : (tag_table voidP)) 
           (charP_charM_ct_2_86 : (memory voidP Int8.t)) : (pointer voidP)
            requires { true } reads { charP_charM_result_87,
            char_xP_char_xM_s_10_85 } writes { charP_charM_result_87,
            char_xP_char_xM_s_10_85 }
            ensures {
              (((allocated voidP_result_87_alloc_table result) ->
                (((=) (typeof voidP_result_87_tag_table result) charP_tag) /\
                (forall i : int.
                 ((((<=) (offset_min voidP_result_87_alloc_table result) i)
                  /\ ((<) i (offset_max voidP_result_87_alloc_table result)))
                  ->
                  ((=) (typeof voidP_result_87_tag_table (shift result i))
                  charP_tag)))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_85) s_10)
                 voidP_result_87_alloc_table (old !charP_charM_result_87))
                /\
                ((<>)
                (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
                  (not_assigns voidP_result_87_alloc_table
                  voidP_result_87_alloc_table (old !charP_charM_result_87)
                  !charP_charM_result_87
                  (pset_singleton
                  (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))))
                 /\
                 (#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_85_alloc_table
                 char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                 !char_xP_char_xM_s_10_85 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 38 15 46#
                 "expl:Ensures clause"
                 ((=) (select !char_xP_char_xM_s_10_85 s_10)
                 (shift
                 (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                 (1))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 39 15 45#
                 "expl:Ensures clause"
                 (Int8.(=)
                 (select !charP_charM_result_87
                 (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))
                 (#"whole_program.jc" 5034 39 50# "expl:Integer cast"
                 (Int8.of_int (0)))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 40 15 33#
                "expl:Ensures clause"
                (valid_str result voidP_result_87_alloc_table
                !charP_charM_result_87)))))))))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_85) s_10)
                 voidP_result_87_alloc_table (old !charP_charM_result_87))
                /\
                ((=)
                (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
                  (not_assigns voidP_result_87_alloc_table
                  voidP_result_87_alloc_table (old !charP_charM_result_87)
                  !charP_charM_result_87 pset_empty))
                 /\
                 (#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_85_alloc_table
                 char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                 !char_xP_char_xM_s_10_85 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 31 15 26#
                "expl:Ensures clause"
                ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))))))
              /\
              (((=) (select (old !char_xP_char_xM_s_10_85) s_10) null) ->
               (((#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
                 (not_assigns voidP_result_87_alloc_table
                 voidP_result_87_alloc_table (old !charP_charM_result_87)
                 !charP_charM_result_87 pset_empty))
                /\
                (#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
                (not_assigns char_xP_s_10_85_alloc_table
                char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                !char_xP_char_xM_s_10_85 pset_empty)))
               /\
               (#"/home/work/workspace/self/verker/strsep.h" 25 15 31#
               "expl:Ensures clause" ((=) result null))))))) }
  
end

module Function_strsep_safe

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrPBrk 
  
  use why3.Bool.Bool 
  
  val strsep
  (s_10 : (pointer char_xP)) 
   (ct_2 : (pointer voidP)) 
    (char_xP_char_xM_s_10_85 : ref (memory char_xP (pointer voidP))) 
     (charP_charM_result_87 : ref (memory voidP Int8.t)) 
      (voidP_result_87_alloc_table : (alloc_table voidP)) 
       (voidP_ct_2_86_alloc_table : (alloc_table voidP)) 
        (char_xP_s_10_85_alloc_table : (alloc_table char_xP)) 
         (voidP_result_87_tag_table : (tag_table voidP)) 
          (voidP_ct_2_86_tag_table : (tag_table voidP)) 
           (charP_charM_ct_2_86 : (memory voidP Int8.t)) : (pointer voidP)
            requires {
              ("expl:Internal"
              (#"whole_program.jc" 5002 12 499# "expl:Requires clause"
              ((#"/home/work/workspace/self/verker/strsep.h" 19 13 26#
               "expl:Requires clause"
               (valid_str ct_2 voidP_ct_2_86_alloc_table charP_charM_ct_2_86))
              /\
              (#"whole_program.jc" 5002 12 499# "expl:Requires clause"
              ((#"/home/work/workspace/self/verker/strsep.h" 20 13 22#
               "expl:Requires clause"
               (#"whole_program.jc" 5002 12 499# "expl:Requires clause"
               ((#"whole_program.jc" 5002 12 499# "expl:Requires clause"
                ((<=) (offset_min char_xP_s_10_85_alloc_table s_10) (0)))
               /\
               (#"whole_program.jc" 5002 12 499# "expl:Requires clause"
               ((#"whole_program.jc" 5002 12 499# "expl:Requires clause"
                ((>=) (offset_max char_xP_s_10_85_alloc_table s_10) (0)))
               /\
               (#"whole_program.jc" 5002 12 499# "expl:Requires clause"
               ((=) true true)))))))
              /\
              (#"/home/work/workspace/self/verker/strsep.h" 21 13 41#
              "expl:Requires clause"
              (((valid_str (select !char_xP_char_xM_s_10_85 s_10)
                voidP_result_87_alloc_table !charP_charM_result_87)
               /\ (not ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))
              \/
              (((=) (select !char_xP_char_xM_s_10_85 s_10) null) /\
              (not
              (valid_str (select !char_xP_char_xM_s_10_85 s_10)
              voidP_result_87_alloc_table !charP_charM_result_87)))))))))) }
            reads { charP_charM_result_87, char_xP_char_xM_s_10_85 } writes {
            charP_charM_result_87, char_xP_char_xM_s_10_85 }
            ensures {
              (((allocated voidP_result_87_alloc_table result) ->
                (((=) (typeof voidP_result_87_tag_table result) charP_tag) /\
                (forall i : int.
                 ((((<=) (offset_min voidP_result_87_alloc_table result) i)
                  /\ ((<) i (offset_max voidP_result_87_alloc_table result)))
                  ->
                  ((=) (typeof voidP_result_87_tag_table (shift result i))
                  charP_tag)))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_85) s_10)
                 voidP_result_87_alloc_table (old !charP_charM_result_87))
                /\
                ((<>)
                (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
                  (not_assigns voidP_result_87_alloc_table
                  voidP_result_87_alloc_table (old !charP_charM_result_87)
                  !charP_charM_result_87
                  (pset_singleton
                  (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))))
                 /\
                 (#"whole_program.jc" 5025 10 68# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_85_alloc_table
                 char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                 !char_xP_char_xM_s_10_85 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 38 15 46#
                 "expl:Ensures clause"
                 ((=) (select !char_xP_char_xM_s_10_85 s_10)
                 (shift
                 (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                 (1))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 37 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 39 15 45#
                 "expl:Ensures clause"
                 (Int8.(=)
                 (select !charP_charM_result_87
                 (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2))
                 (#"whole_program.jc" 5034 39 50# "expl:Integer cast"
                 (Int8.of_int (0)))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 40 15 33#
                "expl:Ensures clause"
                (valid_str result voidP_result_87_alloc_table
                !charP_charM_result_87)))))))))))
              /\
              ((((valid_str (select (old !char_xP_char_xM_s_10_85) s_10)
                 voidP_result_87_alloc_table (old !charP_charM_result_87))
                /\
                ((=)
                (strpbrk (select (old !char_xP_char_xM_s_10_85) s_10) ct_2)
                null)) ->
                (((#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
                  (not_assigns voidP_result_87_alloc_table
                  voidP_result_87_alloc_table (old !charP_charM_result_87)
                  !charP_charM_result_87 pset_empty))
                 /\
                 (#"whole_program.jc" 5019 10 22# "expl:Assigns clause"
                 (not_assigns char_xP_s_10_85_alloc_table
                 char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                 !char_xP_char_xM_s_10_85 (pset_singleton s_10))))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                "expl:Ensures clause"
                (#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                "expl:Ensures clause"
                ((#"/home/work/workspace/self/verker/strsep.h" 30 15 34#
                 "expl:Ensures clause"
                 ((=) result (select (old !char_xP_char_xM_s_10_85) s_10)))
                /\
                (#"/home/work/workspace/self/verker/strsep.h" 31 15 26#
                "expl:Ensures clause"
                ((=) (select !char_xP_char_xM_s_10_85 s_10) null)))))))
              /\
              (((=) (select (old !char_xP_char_xM_s_10_85) s_10) null) ->
               (((#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
                 (not_assigns voidP_result_87_alloc_table
                 voidP_result_87_alloc_table (old !charP_charM_result_87)
                 !charP_charM_result_87 pset_empty))
                /\
                (#"whole_program.jc" 5014 10 18# "expl:Assigns clause"
                (not_assigns char_xP_s_10_85_alloc_table
                char_xP_s_10_85_alloc_table (old !char_xP_char_xM_s_10_85)
                !char_xP_char_xM_s_10_85 pset_empty)))
               /\
               (#"/home/work/workspace/self/verker/strsep.h" 25 15 31#
               "expl:Ensures clause" ((=) result null))))))) }
  
end

module Function_strspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_11 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_89_alloc_table : (alloc_table voidP)) 
     (voidP_s_11_88_alloc_table : (alloc_table voidP)) 
      (voidP_accept_89_tag_table : (tag_table voidP)) 
       (voidP_s_11_88_tag_table : (tag_table voidP)) 
        (charP_charM_accept_89 : (memory voidP Int8.t)) 
         (charP_charM_s_11_88 : (memory voidP Int8.t)) : Uint64.t
          requires { true }
          ensures {
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 63 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 5094 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 63 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_11 charP_charM_s_11_88)))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 64 12 87#
             "expl:Ensures clause"
             (forall t_7_0 : (pointer voidP).
              (((same_block accept_0 t_7_0) /\
               (((<=) (sub_pointer accept_0 t_7_0) (0)) /\
               ((same_block t_7_0
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
               /\
               ((<)
               (sub_pointer t_7_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))) (0)))))
               ->
               (Int8.(<>)
               (select charP_charM_s_11_88
               (shift s_11 (Uint64.to_int result)))
               (select charP_charM_accept_89 t_7_0)))))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 65 12 134#
             "expl:Ensures clause"
             (forall p_21_0 : (pointer voidP).
              (((same_block s_11 p_21_0) /\
               (((<=) (sub_pointer s_11 p_21_0) (0)) /\
               ((same_block p_21_0 (shift s_11 (Uint64.to_int result))) /\
               ((<) (sub_pointer p_21_0 (shift s_11 (Uint64.to_int result)))
               (0))))) ->
               (exists t_8_0 : (pointer voidP).
                ((same_block accept_0 t_8_0) /\
                (((<=) (sub_pointer accept_0 t_8_0) (0)) /\
                ((same_block t_8_0
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                /\
                (((<)
                 (sub_pointer t_8_0
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_88 p_21_0)
                (select charP_charM_accept_89 t_8_0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 67 12 40#
            "expl:Ensures clause"
            ((=) (Uint64.to_int result) (strspn s_11 accept_0)))))))))))) }
  
end

module Function_strspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_11 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_89_alloc_table : (alloc_table voidP)) 
     (voidP_s_11_88_alloc_table : (alloc_table voidP)) 
      (voidP_accept_89_tag_table : (tag_table voidP)) 
       (voidP_s_11_88_tag_table : (tag_table voidP)) 
        (charP_charM_accept_89 : (memory voidP Int8.t)) 
         (charP_charM_s_11_88 : (memory voidP Int8.t)) : Uint64.t
          requires {
            ("expl:Internal"
            (#"whole_program.jc" 5090 12 97# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 60 13 25#
             "expl:Requires clause"
             (valid_str s_11 voidP_s_11_88_alloc_table charP_charM_s_11_88))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 61 13 30#
            "expl:Requires clause"
            (valid_str accept_0 voidP_accept_89_alloc_table
            charP_charM_accept_89))))) }
          ensures {
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 63 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"whole_program.jc" 5094 35 48#
             "expl:Integer cast" (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 63 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_11 charP_charM_s_11_88)))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 64 12 87#
             "expl:Ensures clause"
             (forall t_7_0 : (pointer voidP).
              (((same_block accept_0 t_7_0) /\
               (((<=) (sub_pointer accept_0 t_7_0) (0)) /\
               ((same_block t_7_0
                (shift accept_0
                (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
               /\
               ((<)
               (sub_pointer t_7_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_89)))) (0)))))
               ->
               (Int8.(<>)
               (select charP_charM_s_11_88
               (shift s_11 (Uint64.to_int result)))
               (select charP_charM_accept_89 t_7_0)))))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strspn.h" 65 12 134#
             "expl:Ensures clause"
             (forall p_21_0 : (pointer voidP).
              (((same_block s_11 p_21_0) /\
               (((<=) (sub_pointer s_11 p_21_0) (0)) /\
               ((same_block p_21_0 (shift s_11 (Uint64.to_int result))) /\
               ((<) (sub_pointer p_21_0 (shift s_11 (Uint64.to_int result)))
               (0))))) ->
               (exists t_8_0 : (pointer voidP).
                ((same_block accept_0 t_8_0) /\
                (((<=) (sub_pointer accept_0 t_8_0) (0)) /\
                ((same_block t_8_0
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                /\
                (((<)
                 (sub_pointer t_8_0
                 (shift accept_0
                 (Uint64.to_int (strlen accept_0 charP_charM_accept_89))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_11_88 p_21_0)
                (select charP_charM_accept_89 t_8_0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strspn.h" 67 12 40#
            "expl:Ensures clause"
            ((=) (Uint64.to_int result) (strspn s_11 accept_0)))))))))))) }
  
end
