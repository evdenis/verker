
axiomatic Padding {

  logic type padding
  
}

axiomatic Jessie_memory_reinterpretation_predicates {

  predicate uint8_as_uint8(uint8 d0, uint8 a0) =
  ((d0 == a0) && \uint8_as_uint8(d0, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate uint8_as_int8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \uint8_as_int8(d0, a0))
   
  predicate int8_as_uint8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \int8_as_uint8(d0, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = voidP with {
  uint8 unsigned_charM: 8;
}

axiomatic CheckBytes8 {

  logic unsigned_charP[..] check_bytes8{L}(unsigned_charP[..] start,
                                           uint8 value, integer bytes) =
  \at((if (bytes == 0) then null else (if (start.unsigned_charM != value) then start else check_bytes8{L}(
                                      (start + 1), value, (bytes - 1)))),L)
   
  lemma check_bytes8_shift1{L} :
  (_C_1 : (\forall unsigned_charP[..] start_0;
            (\forall uint8 value_0;
              (\forall integer bytes_0;
                ((((bytes_0 > 0) &&
                    \at((if (\at(0,L) <= \at((bytes_0 - 1),L)) then (((\offset_min(
                                                                    \at(start_0,L)) <=
                                                                    \at(0,L)) &&
                                                                    (\offset_max(
                                                                    \at(start_0,L)) >=
                                                                    \at(
                                                                    (bytes_0 -
                                                                    1),L))) &&
                                                                    (\forall integer __framac_tmp1;
                                                                    (((\at(0,L) <=
                                                                    __framac_tmp1) &&
                                                                    (__framac_tmp1 <=
                                                                    \at(
                                                                    (bytes_0 -
                                                                    1),L))) ==>
                                                                    true))) else true),L)) &&
                   (start_0.unsigned_charM == value_0)) ==>
                  (check_bytes8{L}(start_0, value_0, bytes_0) ==
                    check_bytes8{L}((start_0 + 1), value_0, (bytes_0 - 1))))))))
   
  lemma check_bytes8_stop{L} :
  (_C_2 : (\forall unsigned_charP[..] start_1;
            (\forall uint8 value_1;
              (\forall integer bytes_1;
                ((((bytes_1 > 0) &&
                    \at((if (\at(0,L) <= \at((bytes_1 - 1),L)) then (((\offset_min(
                                                                    \at(start_1,L)) <=
                                                                    \at(0,L)) &&
                                                                    (\offset_max(
                                                                    \at(start_1,L)) >=
                                                                    \at(
                                                                    (bytes_1 -
                                                                    1),L))) &&
                                                                    (\forall integer __framac_tmp2;
                                                                    (((\at(0,L) <=
                                                                    __framac_tmp2) &&
                                                                    (__framac_tmp2 <=
                                                                    \at(
                                                                    (bytes_1 -
                                                                    1),L))) ==>
                                                                    true))) else true),L)) &&
                   (start_1.unsigned_charM != value_1)) ==>
                  (check_bytes8{L}(start_1, value_1, bytes_1) == start_1))))))
   
  lemma check_bytes8_stop_bytes_zero{L} :
  (_C_3 : (\forall unsigned_charP[..] start_2;
            (\forall uint8 value_2;
              (check_bytes8{L}(start_2, value_2, 0) == null))))
  
}

voidP[..] check_bytes8(unsigned_charP[..] start, uint8 value, uint32 bytes)
  requires (_C_50 : \at((if (\at(0,Here) <=
                              \at(((bytes :> integer) - 1),Here)) then 
                        (((\offset_min(\at(start,Here)) <= \at(0,Here)) &&
                           (\offset_max(\at(start,Here)) >=
                             \at(((bytes :> integer) - 1),Here))) &&
                          (\forall integer __framac_tmp3;
                            (((\at(0,Here) <= __framac_tmp3) &&
                               (__framac_tmp3 <=
                                 \at(((bytes :> integer) - 1),Here))) ==>
                              true))) else true),Here));
behavior default:
  assigns \nothing;
  ensures (_C_35 : (\result ==
                     check_bytes8{Here}(\at(start,Old), \at(value,Old),
                                        (\at(bytes,Old) :> integer))));
behavior found:
  assumes (\exists unsigned_charP[..] i_0;
            ((((\base_block(start) == \base_block(i_0)) &&
                ((start - i_0) <= 0)) &&
               ((\base_block(i_0) ==
                  \base_block((start + (bytes :> integer)))) &&
                 ((i_0 - (start + (bytes :> integer))) < 0))) &&
              (i_0.unsigned_charM != value)));
  ensures (_C_36 : ((((_C_39 : (\base_block(\at(start,Old)) ==
                                 \base_block((\result :> unsigned_charP[..])))) &&
                       (_C_40 : ((\at(start,Old) -
                                   (\result :> unsigned_charP[..])) <=
                                  0))) &&
                      ((_C_42 : (\base_block((\result :> unsigned_charP[..])) ==
                                  \base_block((\at(start,Old) +
                                                (\at(bytes,Old) :> integer))))) &&
                        (_C_43 : (((\result :> unsigned_charP[..]) -
                                    (\at(start,Old) +
                                      (\at(bytes,Old) :> integer))) <
                                   0)))) &&
                     ((_C_45 : ((\result :> unsigned_charP[..]).unsigned_charM !=
                                 \at(value,Old))) &&
                       (_C_46 : (\forall unsigned_charP[..] j;
                                  ((((\base_block(\at(start,Old)) ==
                                       \base_block(j)) &&
                                      ((\at(start,Old) - j) <= 0)) &&
                                     ((\base_block(j) ==
                                        \base_block((\result :> unsigned_charP[..]))) &&
                                       ((j - (\result :> unsigned_charP[..])) <
                                         0))) ==>
                                    (j.unsigned_charM == \at(value,Old))))))));
behavior not_exists:
  assumes (\forall unsigned_charP[..] i;
            ((((\base_block(start) == \base_block(i)) && ((start - i) <= 0)) &&
               ((\base_block(i) == \base_block((start + (bytes :> integer)))) &&
                 ((i - (start + (bytes :> integer))) < 0))) ==>
              (i.unsigned_charM == value)));
  ensures (_C_47 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists unsigned_charP[..] i_0;
                                      ((((\base_block(start) ==
                                           \base_block(i_0)) &&
                                          ((start - i_0) <= 0)) &&
                                         ((\base_block(i_0) ==
                                            \base_block((start +
                                                          (bytes :> integer)))) &&
                                           ((i_0 -
                                              (start + (bytes :> integer))) <
                                             0))) &&
                                        (i_0.unsigned_charM != value))) &&
                                     (\forall unsigned_charP[..] i;
                                       ((((\base_block(start) ==
                                            \base_block(i)) &&
                                           ((start - i) <= 0)) &&
                                          ((\base_block(i) ==
                                             \base_block((start +
                                                           (bytes :> integer)))) &&
                                            ((i -
                                               (start + (bytes :> integer))) <
                                              0))) ==>
                                         (i.unsigned_charM == value)))))));
   
   (check (complete_behaviors : ((\forall unsigned_charP[..] i;
                                   ((((\base_block(start) == \base_block(i)) &&
                                       ((start - i) <= 0)) &&
                                      ((\base_block(i) ==
                                         \base_block((start +
                                                       (bytes :> integer)))) &&
                                        ((i - (start + (bytes :> integer))) <
                                          0))) ==>
                                     (i.unsigned_charM == value))) ||
                                  (\exists unsigned_charP[..] i_0;
                                    ((((\base_block(start) ==
                                         \base_block(i_0)) &&
                                        ((start - i_0) <= 0)) &&
                                       ((\base_block(i_0) ==
                                          \base_block((start +
                                                        (bytes :> integer)))) &&
                                         ((i_0 -
                                            (start + (bytes :> integer))) <
                                           0))) &&
                                      (i_0.unsigned_charM != value))))));
   
   (var unsigned_charP[..] ostart);
   
   (var uint32 obytes);
   
   (var voidP[..] __retres);
   
   {  (_C_4 : (ostart = start));
      (_C_5 : (obytes = bytes));
      
      loop 
      behavior default:
        invariant (_C_17 : ((_C_18 : ((0 :> uint32) <= bytes)) &&
                             (_C_19 : (bytes <= obytes))));
      behavior default:
        invariant (_C_10 : (((_C_12 : (\base_block(ostart) ==
                                        \base_block(start))) &&
                              (_C_13 : ((ostart - start) <= 0))) &&
                             ((_C_15 : (\base_block(start) ==
                                         \base_block((ostart +
                                                       (obytes :> integer))))) &&
                               (_C_16 : ((start -
                                           (ostart + (obytes :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_9 : ((start - ostart) ==
                            ((obytes :> integer) - (bytes :> integer))));
      behavior default:
        invariant (_C_8 : (\forall unsigned_charP[..] i;
                            ((((\base_block(ostart) == \base_block(i)) &&
                                ((ostart - i) <= 0)) &&
                               ((\base_block(i) == \base_block(start)) &&
                                 ((i - start) < 0))) ==>
                              (i.unsigned_charM == value))));
      behavior default:
        invariant (_C_7 : (check_bytes8{Here}(ostart, value,
                                              (obytes :> integer)) ==
                            check_bytes8{Here}(start, value,
                                               (bytes :> integer))));
      variant (_C_6 : bytes);
      while (true)
      {  
         {  (if (_C_20 : ((bytes :> uint32) != (0 :> uint32))) then () else 
            (goto while_0_break));
            
            {  (if (_C_26 : ((_C_25 : ((_C_24 : start.unsigned_charM) :> int32)) !=
                              (_C_23 : (value :> int32)))) then 
               {  (_C_22 : (__retres = (_C_21 : (start :> voidP[..]))));
                  
                  (goto return_label)
               } else ());
               (_C_28 : (start = (_C_27 : (start + (1 :> int32)))));
               (_C_31 : (bytes = (_C_30 : ((_C_29 : (bytes - (1 :> uint32))) :> uint32))))
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_32 : (jessie : (bytes == (0 :> uint32)))));
         ()
      };
      
      {  
         (assert for default: (_C_33 : (jessie : (check_bytes8{Here}(
                                                   ostart, value,
                                                   (obytes :> integer)) ==
                                                   null))));
         ()
      };
      (_C_34 : (__retres = null));
      (return_label : 
      (return __retres))
   }
}
