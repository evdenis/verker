
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_memmove_safety
#"/home/work/workspace/self/verker/memmove.c" 3 5 56# "expl:memmove, safety"

  use enum.Uint64 
  
  use Safe_int32 
  
  use Safe_bit_uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_safe 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_safe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove #"/home/work/workspace/self/verker/memmove.c" 3 5 56#
  "expl:Function memmove, safety" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count : Uint64.t)
   (charP_charM_dest_3_2 : ref (memory voidP Int8.t))
   (voidP_dest_3_2_alloc_table : (alloc_table voidP))
   (voidP_dest_3_2_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_3_2_alloc_table src_3) ->
     ((instanceof voidP_dest_3_2_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table src_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_2_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_2_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_2_tag_table dest_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_2_tag_table src_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp1 : int.
      ((((<=) (0) __framac_tmp1) /\
       ((<=) __framac_tmp1 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp2 : int.
      ((((<=) (0) __framac_tmp2) /\
       ((<=) __framac_tmp2 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3)))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Safe_bit_uint64.any_  () ) in
    (let tmp = ref (any_pointer  () : (pointer voidP)) in
    (let s = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Safe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Safe_bit_uint64.any_  () ) in
    begin
    (orig_count :=
     (let _jessie_91 = !mutable_count in
     begin
     (assert {
     (#"/home/work/workspace/self/verker/memmove.c" 5 18 28#
     "expl:Pointer index bounds" true) }); _jessie_91 end));
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"memmove.jc" 78 21 35# (sub_pointer_  dest_3 src_3 )) (0) ))
     then
      try
       begin
       (tmp :=
        (let _jessie_117 =
        (#"/home/work/workspace/self/verker/memmove.c" 10 8 12#
        (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memmove.c" 10 2 12#
        "expl:Pointer index bounds" true) }); _jessie_117 end));
        begin
        (s :=
         (let _jessie_105 =
         (#"/home/work/workspace/self/verker/memmove.c" 11 6 9#
         (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) )) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memmove.c" 11 2 9#
         "expl:Pointer index bounds" true) }); _jessie_105 end));
         'Loop_8:
         loop
         invariant { (#"memmove.jc" 82 9 4682# true) }
           variant { (#"/home/work/workspace/self/verker/memmove.c" 18 19 24#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker/memmove.c" 18 19 24#
             !mutable_count))) }
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_2, dest_3,
          mutable_count, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_2 : int.
              ((((<=) (0) i_2) /\
               ((<) i_2
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               i_2))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_2))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_1 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) i_1)
               /\ ((<) i_1 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              !s))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s
             (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp
             (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count))
             (sub_pointer !s
             (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"memmove.jc" 84 41 54# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2 :=
             (let _jessie_106 = !mutable_count in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             "expl:Pointer index bounds" true) }); _jessie_106 end));
             begin
             (mutable_count :=
              (let _jessie_107 =
              (Safe_bit_uint64.(-%)  !mutable_count
               (#"memmove.jc" 138 57 70# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
              "expl:Pointer index bounds" true) }); _jessie_107 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Safe_bit_uint64.(<>)  !tmp_2
              (#"memmove.jc" 141 50 63# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0 :=
              (let _jessie_108 = !tmp in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 20 4 9#
              "expl:Pointer index bounds" true) }); _jessie_108 end));
              begin
              (tmp :=
               (let _jessie_109 =
               (shift_typesafe  !tmp
                (Safe_int32.to_int 
                 (#"memmove.jc" 146 53 65# "expl:Integer cast"
                 (Safe_int32.of_int (1))) ) ) in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memmove.c" 20 4 9#
               "expl:Pointer index bounds" true) }); _jessie_109 end));
               begin
               (tmp_1 :=
                (let _jessie_110 = !s in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 20 13 16#
                "expl:Pointer index bounds" true) }); _jessie_110 end));
                begin
                (s :=
                 (let _jessie_111 =
                 (shift_typesafe  !s
                  (Safe_int32.to_int 
                   (#"memmove.jc" 148 49 61# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 20 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_111 end));
                 (let _jessie_113 =
                 (let _jessie_112 =
                 (#"/home/work/workspace/self/verker/memmove.c" 20 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_3_2_alloc_table !charP_charM_dest_3_2
                  !tmp_1 )) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 20 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_112 end) in
                 (let _jessie_114 = !tmp_0 in
                 (let _jessie_115 = (0) in
                 (let _jessie_116 = _jessie_114 in
                 (#"/home/work/workspace/self/verker/memmove.c" 20 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_3_2_alloc_table charP_charM_dest_3_2
                  _jessie_114 _jessie_113 )))))) end end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_2, dest_3,
              mutable_count, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1))))
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp :=
        (let _jessie_104 =
        (#"/home/work/workspace/self/verker/memmove.c" 24 8 12#
        (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) )) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/memmove.c" 24 2 12#
        "expl:Pointer index bounds" true) }); _jessie_104 end));
        begin
        (tmp :=
         (let _jessie_103 =
         (shift_typesafe  !tmp (Safe_bit_uint64.to_int  !mutable_count ) ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/memmove.c" 25 2 14#
         "expl:Pointer index bounds" true) }); _jessie_103 end));
         begin
         (s :=
          (let _jessie_102 =
          (#"/home/work/workspace/self/verker/memmove.c" 26 6 9#
          (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) )) in
          begin
          (assert {
          (#"/home/work/workspace/self/verker/memmove.c" 26 2 9#
          "expl:Pointer index bounds" true) }); _jessie_102 end));
          begin
          (s :=
           (let _jessie_92 =
           (shift_typesafe  !s (Safe_bit_uint64.to_int  !mutable_count ) ) in
           begin
           (assert {
           (#"/home/work/workspace/self/verker/memmove.c" 27 2 12#
           "expl:Pointer index bounds" true) }); _jessie_92 end));
           'Loop_7:
           loop
           invariant { (#"memmove.jc" 173 9 3868# true) }
             variant {
               (#"/home/work/workspace/self/verker/memmove.c" 34 19 24#
               (Bit_uint64.to_int
               (#"/home/work/workspace/self/verker/memmove.c" 34 19 24#
               !mutable_count))) }
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_2, dest_3,
            mutable_count, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_4 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count) i_4) /\
                 ((<) i_4 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                 i_4))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_4))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_3 : int.
                ((((<=) (0) i_3) /\
                 ((<) i_3 (Bit_uint64.to_int !mutable_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count)
               (sub_pointer !s
               (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"memmove.jc" 175 41 54# "expl:Integer cast"
               (Bit_uint64.of_int_const 0)) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 :=
               (let _jessie_93 = !mutable_count in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               "expl:Pointer index bounds" true) }); _jessie_93 end));
               begin
               (mutable_count :=
                (let _jessie_94 =
                (Safe_bit_uint64.(-%)  !mutable_count
                 (#"memmove.jc" 222 57 70# "expl:Integer cast"
                 (Safe_bit_uint64.of_int_const 1)) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
                "expl:Pointer index bounds" true) }); _jessie_94 end)); ()
               end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Safe_bit_uint64.(<>)  !tmp_3
                (#"memmove.jc" 225 50 63# "expl:Integer cast"
                (Safe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp :=
                (let _jessie_95 =
                (shift_typesafe  !tmp
                 (Int.(-_) 
                  (Safe_int32.to_int 
                   (#"memmove.jc" 229 53 65# "expl:Integer cast"
                   (Safe_int32.of_int (1))) ) ) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 36 4 9#
                "expl:Pointer index bounds" true) }); _jessie_95 end));
                begin
                (s :=
                 (let _jessie_96 =
                 (shift_typesafe  !s
                  (Int.(-_) 
                   (Safe_int32.to_int 
                    (#"memmove.jc" 230 49 61# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) ) ) in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 36 13 16#
                 "expl:Pointer index bounds" true) }); _jessie_96 end));
                 (let _jessie_98 =
                 (let _jessie_97 =
                 (#"/home/work/workspace/self/verker/memmove.c" 36 12 16#
                 "expl:Pointer dereference"
                 (acc  voidP_dest_3_2_alloc_table !charP_charM_dest_3_2 !s ))
                 in
                 begin
                 (assert {
                 (#"/home/work/workspace/self/verker/memmove.c" 36 3 16#
                 "expl:Pointer index bounds" true) }); _jessie_97 end) in
                 (let _jessie_99 = !tmp in
                 (let _jessie_100 = (0) in
                 (let _jessie_101 = _jessie_99 in
                 (#"/home/work/workspace/self/verker/memmove.c" 36 3 16#
                 "expl:Pointer dereference"
                 (upd  voidP_dest_3_2_alloc_table charP_charM_dest_3_2
                  _jessie_99 _jessie_98 )))))) end end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_2, dest_3,
                mutable_count, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count)))
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_6 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_2 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count (#"memmove.jc" 249 51 69#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end;
     begin
     (return :=
      (let _jessie_118 = dest_3 in
      begin
      (assert { (#"memmove.jc" 253 7 20# "expl:Pointer index bounds" true) });
       _jessie_118 end)); (raise Return) end end))))))); absurd  end with
    Return -> !return end))
  
end

module Function_memmove_behaviors
#"/home/work/workspace/self/verker/memmove.c" 3 5 56#
"expl:memmove, behaviors"

  use Unsafe_int32 
  
  use Unsafe_bit_uint64 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_sub_pointer_unsafe 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_downcast_unsafe 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  let memmove_ensures_default
  #"/home/work/workspace/self/verker/memmove.c" 3 5 56#
  "expl:Function memmove, default behavior" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count : Uint64.t)
   (charP_charM_dest_3_2 : ref (memory voidP Int8.t))
   (voidP_dest_3_2_alloc_table : (alloc_table voidP))
   (voidP_dest_3_2_tag_table : (tag_table voidP)) 
   requires {
   (((allocated voidP_dest_3_2_alloc_table src_3) ->
     ((instanceof voidP_dest_3_2_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table src_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_2_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_2_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_2_tag_table dest_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_2_tag_table src_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp1 : int.
      ((((<=) (0) __framac_tmp1) /\
       ((<=) __framac_tmp1 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp2 : int.
      ((((<=) (0) __framac_tmp2) /\
       ((<=) __framac_tmp2 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"memmove.jc" 48 10 71# "expl:Assigns clause"
     (not_assigns voidP_dest_3_2_alloc_table voidP_dest_3_2_alloc_table (old
     !charP_charM_dest_3_2) !charP_charM_dest_3_2
     (pset_range
     (pset_singleton (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
     (0) (Int.(-) (Bit_uint64.to_int count) (1)))))) } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp = ref (any_pointer  () : (pointer voidP)) in
    (let s = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"memmove.jc" 78 21 35# (sub_pointer_  dest_3 src_3 )) (0) ))
     then
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
         'Loop_2:
         loop
         invariant
           { (((#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
               (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
               ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
                (Bit_uint64.(<=) (#"memmove.jc" 84 41 54# "expl:Integer cast"
                (Bit_uint64.of_int_const 0)) !mutable_count))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
               (Bit_uint64.(<=) !mutable_count !orig_count)))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
               (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
               ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
                ((=)
                (sub_pointer !tmp
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
               ((=)
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count))
               (sub_pointer !s
               (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
                (same_block
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
                (same_block !tmp
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
               ((<=)
               (sub_pointer !tmp
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
                (same_block
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
                (same_block !s
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
               ((<=)
               (sub_pointer !s
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              &&
              ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
               (forall i_1 : int.
                ((((<=)
                  (Int.(-) (Bit_uint64.to_int !orig_count)
                  (Bit_uint64.to_int !mutable_count)) i_1)
                 /\ ((<) i_1 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_1))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_1))))))
              &&
              (#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
              (forall i_2 : int.
               ((((<=) (0) i_2) /\
                ((<) i_2
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)))) ->
                (Int8.(=)
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                i_2))
                (select (at !charP_charM_dest_3_2 'Init)
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                i_2)))))))))))
             /\
             (#"memmove.jc" 48 10 71# "expl:Assigns clause"
             (not_assigns voidP_dest_3_2_alloc_table
             voidP_dest_3_2_alloc_table (at !charP_charM_dest_3_2 'Init)
             !charP_charM_dest_3_2
             (pset_range
             (pset_singleton
             (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0)
             (Int.(-) (Bit_uint64.to_int (at !mutable_count 'Init)) (1)))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp_2 := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"memmove.jc" 138 57 70# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2
              (#"memmove.jc" 141 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0 := !tmp);
              begin
              (tmp :=
               (shift_  !tmp
                (Unsafe_int32.to_int 
                 (#"memmove.jc" 146 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1 := !s);
                begin
                (s :=
                 (shift_  !s
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 148 49 61# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_29 = (acc  !charP_charM_dest_3_2 !tmp_1 ) in
                 (let _jessie_30 = !tmp_0 in
                 (let _jessie_31 = (0) in
                 (let _jessie_32 = _jessie_30 in
                 (upd  charP_charM_dest_3_2 _jessie_32 _jessie_29 ))))) end
               end end end;
              begin
              (assert {
              (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
              "expl:Assertion in line 21"
              (Int8.(=)
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count)) (1))))
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              (Int.(-)
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count)) (1)))))) }); () end end end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp := (shift_  !tmp (Unsafe_bit_uint64.to_int  !mutable_count ) ));
         begin
         (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
          begin
          (s := (shift_  !s (Unsafe_bit_uint64.to_int  !mutable_count ) ));
           'Loop_1:
           loop
           invariant
             { (((#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
                 (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
                 ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
                  (Bit_uint64.(<=) (#"memmove.jc" 175 41 54#
                  "expl:Integer cast" (Bit_uint64.of_int_const 0))
                  !mutable_count))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
                 (Bit_uint64.(<=) !mutable_count !orig_count)))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
                 (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
                 ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                  ((=)
                  (sub_pointer !tmp
                  (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
                  (Bit_uint64.to_int !mutable_count)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
                 ((=) (Bit_uint64.to_int !mutable_count)
                 (sub_pointer !s
                 (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                  (same_block
                  (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp)
                  (0)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
                 ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                  (same_block !tmp
                  (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                 ((<=)
                 (sub_pointer !tmp
                 (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                  (same_block
                  (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                  ((<=)
                  (sub_pointer
                  (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s)
                  (0)))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
                 ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                  (same_block !s
                  (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !orig_count))))
                 /\
                 (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                 ((<=)
                 (sub_pointer !s
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 (Bit_uint64.to_int !orig_count))) (0))))))))))
                &&
                ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
                 (forall i_3 : int.
                  ((((<=) (0) i_3) /\
                   ((<) i_3 (Bit_uint64.to_int !mutable_count))) ->
                   (Int8.(=)
                   (select !charP_charM_dest_3_2
                   (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                   i_3))
                   (select (at !charP_charM_dest_3_2 'Init)
                   (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                   i_3))))))
                &&
                (#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
                (forall i_4 : int.
                 ((((<=) (Bit_uint64.to_int !mutable_count) i_4) /\
                  ((<) i_4 (Bit_uint64.to_int !orig_count))) ->
                  (Int8.(=)
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                  i_4))
                  (select (at !charP_charM_dest_3_2 'Init)
                  (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                  i_4)))))))))))
               /\
               (#"memmove.jc" 48 10 71# "expl:Assigns clause"
               (not_assigns voidP_dest_3_2_alloc_table
               voidP_dest_3_2_alloc_table (at !charP_charM_dest_3_2 'Init)
               !charP_charM_dest_3_2
               (pset_range
               (pset_singleton
               (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0)
               (Int.(-) (Bit_uint64.to_int (at !mutable_count 'Init)) (1)))))) }
             
            begin
            any unit requires { true } ensures { true } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count);
               begin
               (mutable_count :=
                (Unsafe_bit_uint64.(-%)  !mutable_count
                 (#"memmove.jc" 222 57 70# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"memmove.jc" 225 50 63# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp :=
                (shift_  !tmp
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 229 53 65# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s :=
                 (shift_  !s
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"memmove.jc" 230 49 61# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_14 = (acc  !charP_charM_dest_3_2 !s ) in
                 (let _jessie_15 = !tmp in
                 (let _jessie_16 = (0) in
                 (let _jessie_17 = _jessie_15 in
                 (upd  charP_charM_dest_3_2 _jessie_17 _jessie_14 ))))) end
               end;
                begin
                (assert {
                (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                "expl:Assertion in line 37"
                (Int8.(=)
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !mutable_count)))
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !mutable_count))))) }); () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_6 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_2 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     (assert {
     (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
     "expl:Assertion in line 40"
     (Bit_uint64.(=) !mutable_count (#"memmove.jc" 249 51 69#
     "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) }); ()
     end; begin (return := dest_3); (raise Return) end end))))))); absurd 
    end with Return -> !return end))
  
  let memmove_ensures_diff_addr
  #"/home/work/workspace/self/verker/memmove.c" 3 5 56#
  "expl:Function memmove, behavior diff_addr" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count : Uint64.t)
   (charP_charM_dest_3_2 : ref (memory voidP Int8.t))
   (voidP_dest_3_2_alloc_table : (alloc_table voidP))
   (voidP_dest_3_2_tag_table : (tag_table voidP)) 
   requires {
   ((not (same_block dest_3 src_3)) /\
   (((allocated voidP_dest_3_2_alloc_table src_3) ->
     ((instanceof voidP_dest_3_2_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table src_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_2_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_2_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_2_tag_table dest_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_2_tag_table src_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp1 : int.
      ((((<=) (0) __framac_tmp1) /\
       ((<=) __framac_tmp1 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp2 : int.
      ((((<=) (0) __framac_tmp2) /\
       ((<=) __framac_tmp2 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
     "expl:Ensures clause"
     (forall i : int.
      ((((<=) (0) i) /\ ((<) i (Bit_uint64.to_int count))) ->
       (Int8.(=)
       (select !charP_charM_dest_3_2
       (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) i))
       (select (old !charP_charM_dest_3_2)
       (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i))))))) }
   diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp = ref (any_pointer  () : (pointer voidP)) in
    (let s = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"memmove.jc" 78 21 35# (sub_pointer_  dest_3 src_3 )) (0) ))
     then
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
         'Loop_6:
         loop
         invariant { (#"memmove.jc" 82 9 4682# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_2, dest_3,
          mutable_count, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_2 : int.
              ((((<=) (0) i_2) /\
               ((<) i_2
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               i_2))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_2))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_1 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) i_1)
               /\ ((<) i_1 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              !s))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s
             (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp
             (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count))
             (sub_pointer !s
             (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"memmove.jc" 84 41 54# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2 := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"memmove.jc" 138 57 70# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2
              (#"memmove.jc" 141 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0 := !tmp);
              begin
              (tmp :=
               (shift_  !tmp
                (Unsafe_int32.to_int 
                 (#"memmove.jc" 146 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1 := !s);
                begin
                (s :=
                 (shift_  !s
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 148 49 61# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_85 = (acc  !charP_charM_dest_3_2 !tmp_1 ) in
                 (let _jessie_86 = !tmp_0 in
                 (let _jessie_87 = (0) in
                 (let _jessie_88 = _jessie_86 in
                 (upd  charP_charM_dest_3_2 _jessie_88 _jessie_85 ))))) end
               end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_2, dest_3,
              mutable_count, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1))))
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp := (shift_  !tmp (Unsafe_bit_uint64.to_int  !mutable_count ) ));
         begin
         (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
          begin
          (s := (shift_  !s (Unsafe_bit_uint64.to_int  !mutable_count ) ));
           'Loop_5:
           loop
           invariant { (#"memmove.jc" 173 9 3868# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_2, dest_3,
            mutable_count, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_4 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count) i_4) /\
                 ((<) i_4 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                 i_4))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_4))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_3 : int.
                ((((<=) (0) i_3) /\
                 ((<) i_3 (Bit_uint64.to_int !mutable_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count)
               (sub_pointer !s
               (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"memmove.jc" 175 41 54# "expl:Integer cast"
               (Bit_uint64.of_int_const 0)) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count);
               begin
               (mutable_count :=
                (Unsafe_bit_uint64.(-%)  !mutable_count
                 (#"memmove.jc" 222 57 70# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"memmove.jc" 225 50 63# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp :=
                (shift_  !tmp
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 229 53 65# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s :=
                 (shift_  !s
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"memmove.jc" 230 49 61# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_70 = (acc  !charP_charM_dest_3_2 !s ) in
                 (let _jessie_71 = !tmp in
                 (let _jessie_72 = (0) in
                 (let _jessie_73 = _jessie_71 in
                 (upd  charP_charM_dest_3_2 _jessie_73 _jessie_70 ))))) end
               end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_2, dest_3,
                mutable_count, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count)))
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_6 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_2 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count (#"memmove.jc" 249 51 69#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_3); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
  let memmove_ensures_same_addr
  #"/home/work/workspace/self/verker/memmove.c" 3 5 56#
  "expl:Function memmove, behavior same_addr" =
  fun
   (dest_3 : (pointer voidP)) (src_3 : (pointer voidP)) (count : Uint64.t)
   (charP_charM_dest_3_2 : ref (memory voidP Int8.t))
   (voidP_dest_3_2_alloc_table : (alloc_table voidP))
   (voidP_dest_3_2_tag_table : (tag_table voidP)) 
   requires {
   ((same_block dest_3 src_3) /\
   (((allocated voidP_dest_3_2_alloc_table src_3) ->
     ((instanceof voidP_dest_3_2_tag_table src_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table src_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table src_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift src_3 i) voidP_tag)))))
   /\
   (((allocated voidP_dest_3_2_alloc_table dest_3) ->
     ((instanceof voidP_dest_3_2_tag_table dest_3 voidP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_dest_3_2_alloc_table dest_3) i) /\
       ((<) i (offset_max voidP_dest_3_2_alloc_table dest_3))) ->
       (instanceof voidP_dest_3_2_tag_table (shift dest_3 i) voidP_tag)))))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
    (instanceof voidP_dest_3_2_tag_table dest_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
    (instanceof voidP_dest_3_2_tag_table src_3 charP_tag))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp1 : int.
      ((((<=) (0) __framac_tmp1) /\
       ((<=) __framac_tmp1 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"memmove.jc" 18 12 1945#
   ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
    (if ((<=) (0) (Int.(-) (Bit_uint64.to_int count) (1))) then
     (((<=)
      (offset_min voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag)) (0))
     /\
     (((>=)
      (offset_max voidP_dest_3_2_alloc_table
      (downcast voidP_dest_3_2_tag_table src_3 charP_tag))
      (Int.(-) (Bit_uint64.to_int count) (1)))
     /\
     (forall __framac_tmp2 : int.
      ((((<=) (0) __framac_tmp2) /\
       ((<=) __framac_tmp2 (Int.(-) (Bit_uint64.to_int count) (1)))) ->
       ((=) true true))))) else ((=) true true)))
   /\
   (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
   (((same_block dest_3 src_3) /\ (not (not (same_block dest_3 src_3)))) \/
   ((not (same_block dest_3 src_3)) /\ (not (same_block dest_3 src_3))))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
     "expl:Ensures clause"
     (forall i_0 : int.
      ((((<=) (0) i_0) /\ ((<) i_0 (Bit_uint64.to_int count))) ->
       (Int8.(=)
       (select !charP_charM_dest_3_2
       (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) i_0))
       (select (old !charP_charM_dest_3_2)
       (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i_0)))))))
     } diverges  ->
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (let orig_count = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp = ref (any_pointer  () : (pointer voidP)) in
    (let s = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_0 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_1 = ref (any_pointer  () : (pointer voidP)) in
    (let tmp_2 = ref (Unsafe_bit_uint64.any_  () ) in
    (let tmp_3 = ref (Unsafe_bit_uint64.any_  () ) in
    begin
    (orig_count := !mutable_count);
     (if
     (#"/home/work/workspace/self/verker/memmove.c" 9 5 16#
     ((<=)  (#"memmove.jc" 78 21 35# (sub_pointer_  dest_3 src_3 )) (0) ))
     then
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
         'Loop_4:
         loop
         invariant { (#"memmove.jc" 82 9 4682# true) } 
          begin
          any unit
          requires { true } reads { charP_charM_dest_3_2, dest_3,
          mutable_count, src_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/memmove.c" 17 21 119#
             (forall i_2 : int.
              ((((<=) (0) i_2) /\
               ((<) i_2
               (Int.(-) (Bit_uint64.to_int !orig_count)
               (Bit_uint64.to_int !mutable_count)))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               i_2))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_2))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 16 21 127#
             (forall i_1 : int.
              ((((<=)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) i_1)
               /\ ((<) i_1 (Bit_uint64.to_int !orig_count))) ->
               (Int8.(=)
               (select !charP_charM_dest_3_2
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))
               (select (at !charP_charM_dest_3_2 'Init)
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               i_1))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              (same_block (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              !s))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 21 37#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 21 65#
             ((#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
              (same_block !s
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 15 36 65#
             ((<=)
             (sub_pointer !s
             (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              (same_block
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 21 40#
              ((<=)
              (sub_pointer
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp) (0)))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 21 69#
             ((#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
              (same_block !tmp
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              (Bit_uint64.to_int !orig_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 14 37 69#
             ((<=)
             (sub_pointer !tmp
             (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
             (Bit_uint64.to_int !orig_count))) (0))))))))))
            /\
            ((#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             (#"/home/work/workspace/self/verker/memmove.c" 13 21 64#
             ((#"/home/work/workspace/self/verker/memmove.c" 13 21 53#
              ((=)
              (sub_pointer !tmp
              (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
              (Int.(-) (Bit_uint64.to_int !orig_count)
              (Bit_uint64.to_int !mutable_count))))
             /\
             (#"/home/work/workspace/self/verker/memmove.c" 13 35 64#
             ((=)
             (Int.(-) (Bit_uint64.to_int !orig_count)
             (Bit_uint64.to_int !mutable_count))
             (sub_pointer !s
             (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            (#"/home/work/workspace/self/verker/memmove.c" 12 21 45#
            ((#"/home/work/workspace/self/verker/memmove.c" 12 21 31#
             (Bit_uint64.(<=) (#"memmove.jc" 84 41 54# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/memmove.c" 12 26 45#
            (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp_2 := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"memmove.jc" 138 57 70# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/memmove.c" 19 9 20#
             (Unsafe_bit_uint64.(<>)  !tmp_2
              (#"memmove.jc" 141 50 63# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) )) then ()
             else (raise (Goto_while_0_break_exc ())));
             begin
             begin
             (tmp_0 := !tmp);
              begin
              (tmp :=
               (shift_  !tmp
                (Unsafe_int32.to_int 
                 (#"memmove.jc" 146 53 65# "expl:Integer cast"
                 (Unsafe_int32.of_int (1))) ) ));
               begin
               (tmp_1 := !s);
                begin
                (s :=
                 (shift_  !s
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 148 49 61# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ));
                 (let _jessie_57 = (acc  !charP_charM_dest_3_2 !tmp_1 ) in
                 (let _jessie_58 = !tmp_0 in
                 (let _jessie_59 = (0) in
                 (let _jessie_60 = _jessie_58 in
                 (upd  charP_charM_dest_3_2 _jessie_60 _jessie_57 ))))) end
               end end end;
              begin
              any unit
              requires { true } reads { charP_charM_dest_3_2, dest_3,
              mutable_count, src_3 }
              ensures {
                (#"/home/work/workspace/self/verker/memmove.c" 21 14 93#
                (Int8.(=)
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1))))
                (select !charP_charM_dest_3_2
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Int.(-)
                (Int.(-) (Bit_uint64.to_int !orig_count)
                (Bit_uint64.to_int !mutable_count)) (1)))))) } ; () end end
            end; (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: () end
     else
      try
       begin
       (tmp := (downcast_  voidP_dest_3_2_tag_table dest_3 (charP_tag  ) ));
        begin
        (tmp := (shift_  !tmp (Unsafe_bit_uint64.to_int  !mutable_count ) ));
         begin
         (s := (downcast_  voidP_dest_3_2_tag_table src_3 (charP_tag  ) ));
          begin
          (s := (shift_  !s (Unsafe_bit_uint64.to_int  !mutable_count ) ));
           'Loop_3:
           loop
           invariant { (#"memmove.jc" 173 9 3868# true) } 
            begin
            any unit
            requires { true } reads { charP_charM_dest_3_2, dest_3,
            mutable_count, src_3 }
            ensures {
              ((#"/home/work/workspace/self/verker/memmove.c" 33 21 115#
               (forall i_4 : int.
                ((((<=) (Bit_uint64.to_int !mutable_count) i_4) /\
                 ((<) i_4 (Bit_uint64.to_int !orig_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                 i_4))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_4))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 32 21 105#
               (forall i_3 : int.
                ((((<=) (0) i_3) /\
                 ((<) i_3 (Bit_uint64.to_int !mutable_count))) ->
                 (Int8.(=)
                 (select !charP_charM_dest_3_2
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))
                 (select (at !charP_charM_dest_3_2 'Init)
                 (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                 i_3))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                (same_block
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 21 37#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table src_3 charP_tag) !s) (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 21 65#
               ((#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
                (same_block !s
                (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 31 36 65#
               ((<=)
               (sub_pointer !s
               (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                (same_block
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 21 40#
                ((<=)
                (sub_pointer
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) !tmp)
                (0)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 21 69#
               ((#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
                (same_block !tmp
                (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                (Bit_uint64.to_int !orig_count))))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 30 37 69#
               ((<=)
               (sub_pointer !tmp
               (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
               (Bit_uint64.to_int !orig_count))) (0))))))))))
              /\
              ((#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               (#"/home/work/workspace/self/verker/memmove.c" 29 21 51#
               ((#"/home/work/workspace/self/verker/memmove.c" 29 21 40#
                ((=)
                (sub_pointer !tmp
                (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
                (Bit_uint64.to_int !mutable_count)))
               /\
               (#"/home/work/workspace/self/verker/memmove.c" 29 35 51#
               ((=) (Bit_uint64.to_int !mutable_count)
               (sub_pointer !s
               (downcast voidP_dest_3_2_tag_table src_3 charP_tag)))))))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              (#"/home/work/workspace/self/verker/memmove.c" 28 21 45#
              ((#"/home/work/workspace/self/verker/memmove.c" 28 21 31#
               (Bit_uint64.(<=) (#"memmove.jc" 175 41 54# "expl:Integer cast"
               (Bit_uint64.of_int_const 0)) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker/memmove.c" 28 26 45#
              (Bit_uint64.(<=) !mutable_count !orig_count)))))))))) } ;
             try
              begin
              begin
              begin
              (tmp_3 := !mutable_count);
               begin
               (mutable_count :=
                (Unsafe_bit_uint64.(-%)  !mutable_count
                 (#"memmove.jc" 222 57 70# "expl:Integer cast"
                 (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
               (if
               (#"/home/work/workspace/self/verker/memmove.c" 35 9 20#
               (Unsafe_bit_uint64.(<>)  !tmp_3
                (#"memmove.jc" 225 50 63# "expl:Integer cast"
                (Unsafe_bit_uint64.of_int_const 0)) )) then ()
               else (raise (Goto_while_0_break_0_exc ())));
               begin
               begin
               (tmp :=
                (shift_  !tmp
                 (Int.(-_) 
                  (Unsafe_int32.to_int 
                   (#"memmove.jc" 229 53 65# "expl:Integer cast"
                   (Unsafe_int32.of_int (1))) ) ) ));
                begin
                (s :=
                 (shift_  !s
                  (Int.(-_) 
                   (Unsafe_int32.to_int 
                    (#"memmove.jc" 230 49 61# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ) ) ));
                 (let _jessie_42 = (acc  !charP_charM_dest_3_2 !s ) in
                 (let _jessie_43 = !tmp in
                 (let _jessie_44 = (0) in
                 (let _jessie_45 = _jessie_43 in
                 (upd  charP_charM_dest_3_2 _jessie_45 _jessie_42 ))))) end
               end;
                begin
                any unit
                requires { true } reads { charP_charM_dest_3_2, dest_3,
                mutable_count, src_3 }
                ensures {
                  (#"/home/work/workspace/self/verker/memmove.c" 37 14 59#
                  (Int8.(=)
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count)))
                  (select !charP_charM_dest_3_2
                  (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag)
                  (Bit_uint64.to_int !mutable_count))))) } ; () end end end;
               (raise (Loop_continue_exc ())) end with Loop_continue_exc
              _jessie_6 -> () end end end;
           (raise (Goto_while_0_break_0_exc ())) end end end end with
       Goto_while_0_break_0_exc _jessie_2 ->
       'While_0_break_0: 'While_0_break_0: () end);
     begin
     any unit
     requires { true } reads { mutable_count }
     ensures {
       (#"/home/work/workspace/self/verker/memmove.c" 40 12 35#
       (Bit_uint64.(=) !mutable_count (#"memmove.jc" 249 51 69#
       "expl:Integer cast" (Bit_uint64.of_int_modulo (Int.(-_) (1)))))) } ;
      () end; begin (return := dest_3); (raise Return) end end))))))); 
     absurd  end with Return -> !return end))
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_memmove

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_3 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count : Uint64.t) 
     (charP_charM_dest_3_2 : ref (memory voidP Int8.t)) 
      (voidP_dest_3_2_alloc_table : (alloc_table voidP)) 
       (voidP_dest_3_2_tag_table : (tag_table voidP)) : (pointer voidP)
        requires { true } reads { charP_charM_dest_3_2 } writes {
        charP_charM_dest_3_2 }
        ensures {
          (((allocated voidP_dest_3_2_alloc_table result) ->
            ((instanceof voidP_dest_3_2_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_3_2_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_3_2_alloc_table result))) ->
              (instanceof voidP_dest_3_2_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_3 src_3)) ->
            (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i : int.
             ((((<=) (0) i) /\ ((<) i (Uint64.to_int count))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) i))
              (select (old !charP_charM_dest_3_2)
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i)))))))
          /\
          (((same_block dest_3 src_3) ->
            (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_0 : int.
             ((((<=) (0) i_0) /\ ((<) i_0 (Uint64.to_int count))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              i_0))
              (select (old !charP_charM_dest_3_2)
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i_0)))))))
          /\
          (#"memmove.jc" 48 10 71# "expl:Assigns clause"
          (not_assigns voidP_dest_3_2_alloc_table voidP_dest_3_2_alloc_table
          (old !charP_charM_dest_3_2) !charP_charM_dest_3_2
          (pset_range
          (pset_singleton
          (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count) (1)))))))) }
  
end

module Function_memmove_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp_tag_id 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pset_range 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val memmove
  (dest_3 : (pointer voidP)) 
   (src_3 : (pointer voidP)) 
    (count : Uint64.t) 
     (charP_charM_dest_3_2 : ref (memory voidP Int8.t)) 
      (voidP_dest_3_2_alloc_table : (alloc_table voidP)) 
       (voidP_dest_3_2_tag_table : (tag_table voidP)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"memmove.jc" 18 12 1945# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 15 13 43#
           "expl:Requires clause"
           (instanceof voidP_dest_3_2_tag_table dest_3 charP_tag))
          /\
          (#"memmove.jc" 18 12 1945# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 16 13 42#
           "expl:Requires clause"
           (instanceof voidP_dest_3_2_tag_table src_3 charP_tag))
          /\
          (#"memmove.jc" 18 12 1945# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 17 13 46#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
            (((<=)
             (offset_min voidP_dest_3_2_alloc_table
             (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_3_2_alloc_table
             (downcast voidP_dest_3_2_tag_table dest_3 charP_tag))
             (Int.(-) (Uint64.to_int count) (1)))
            /\
            (forall __framac_tmp1 : int.
             ((((<=) (0) __framac_tmp1) /\
              ((<=) __framac_tmp1 (Int.(-) (Uint64.to_int count) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"memmove.jc" 18 12 1945# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/memmove.h" 18 13 45#
           "expl:Requires clause"
           (if ((<=) (0) (Int.(-) (Uint64.to_int count) (1))) then
            (((<=)
             (offset_min voidP_dest_3_2_alloc_table
             (downcast voidP_dest_3_2_tag_table src_3 charP_tag)) (0))
            /\
            (((>=)
             (offset_max voidP_dest_3_2_alloc_table
             (downcast voidP_dest_3_2_tag_table src_3 charP_tag))
             (Int.(-) (Uint64.to_int count) (1)))
            /\
            (forall __framac_tmp2 : int.
             ((((<=) (0) __framac_tmp2) /\
              ((<=) __framac_tmp2 (Int.(-) (Uint64.to_int count) (1)))) ->
              ((=) true true))))) else ((=) true true)))
          /\
          (#"/home/work/workspace/self/verker/memmove.h" 19 13 100#
          "expl:Requires clause"
          (((same_block dest_3 src_3) /\
           (not (not (same_block dest_3 src_3))))
          \/
          ((not (same_block dest_3 src_3)) /\
          (not (same_block dest_3 src_3)))))))))))))) }
        reads { charP_charM_dest_3_2 } writes { charP_charM_dest_3_2 }
        ensures {
          (((allocated voidP_dest_3_2_alloc_table result) ->
            ((instanceof voidP_dest_3_2_tag_table result voidP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_dest_3_2_alloc_table result) i) /\
              ((<) i (offset_max voidP_dest_3_2_alloc_table result))) ->
              (instanceof voidP_dest_3_2_tag_table (shift result i)
              voidP_tag)))))
          /\
          (((not (same_block dest_3 src_3)) ->
            (#"/home/work/workspace/self/verker/memmove.h" 27 14 99#
            "expl:Ensures clause"
            (forall i : int.
             ((((<=) (0) i) /\ ((<) i (Uint64.to_int count))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag) i))
              (select (old !charP_charM_dest_3_2)
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i)))))))
          /\
          (((same_block dest_3 src_3) ->
            (#"/home/work/workspace/self/verker/memmove.h" 24 14 99#
            "expl:Ensures clause"
            (forall i_0 : int.
             ((((<=) (0) i_0) /\ ((<) i_0 (Uint64.to_int count))) ->
              (Int8.(=)
              (select !charP_charM_dest_3_2
              (shift (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)
              i_0))
              (select (old !charP_charM_dest_3_2)
              (shift (downcast voidP_dest_3_2_tag_table src_3 charP_tag) i_0)))))))
          /\
          (#"memmove.jc" 48 10 71# "expl:Assigns clause"
          (not_assigns voidP_dest_3_2_alloc_table voidP_dest_3_2_alloc_table
          (old !charP_charM_dest_3_2) !charP_charM_dest_3_2
          (pset_range
          (pset_singleton
          (downcast voidP_dest_3_2_tag_table dest_3 charP_tag)) (0)
          (Int.(-) (Uint64.to_int count) (1)))))))) }
  
end
