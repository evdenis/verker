
axiomatic Padding {

  logic type padding
  
}

type _bool = 0..1

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

axiomatic Ctype {

  predicate islower(integer c) =
  ((((97 :> int8) :> integer) <= c) && (c <= ((122 :> int8) :> integer)))
   
  predicate isupper(integer c_0) =
  ((((65 :> int8) :> integer) <= c_0) && (c_0 <= ((90 :> int8) :> integer)))
   
  predicate isalpha(integer c_1) =
  (isupper(c_1) || islower(c_1))
   
  predicate isdigit(integer c_2) =
  ((((48 :> int8) :> integer) <= c_2) && (c_2 <= ((57 :> int8) :> integer)))
   
  predicate isodigit(integer c_3) =
  ((((48 :> int8) :> integer) <= c_3) && (c_3 <= ((55 :> int8) :> integer)))
   
  predicate isalnum(integer c_4) =
  (isdigit(c_4) || isalpha(c_4))
   
  predicate isspace(integer c_5) =
  ((((((c_5 == ((32 :> int8) :> integer)) ||
        (c_5 == ((12 :> int8) :> integer))) ||
       (c_5 == ((10 :> int8) :> integer))) ||
      (c_5 == ((13 :> int8) :> integer))) ||
     (c_5 == ((9 :> int8) :> integer))) ||
    (c_5 == ((11 :> int8) :> integer)))
   
  predicate isxdigit(integer c_6) =
  ((isdigit(c_6) ||
     ((((97 :> int8) :> integer) <= c_6) &&
       (c_6 <= ((102 :> int8) :> integer)))) ||
    ((((65 :> int8) :> integer) <= c_6) &&
      (c_6 <= ((70 :> int8) :> integer))))
   
  logic integer tolower(integer c_7)
   
  logic integer toupper(integer c_8)
   
  axiom a :
  (_C_1 : (tolower(((65 :> int8) :> integer)) == ((97 :> int8) :> integer)))
   
  axiom b :
  (_C_2 : (tolower(((66 :> int8) :> integer)) == ((98 :> int8) :> integer)))
   
  axiom c :
  (_C_3 : (tolower(((67 :> int8) :> integer)) == ((99 :> int8) :> integer)))
   
  axiom d :
  (_C_4 : (tolower(((68 :> int8) :> integer)) == ((100 :> int8) :> integer)))
   
  axiom e :
  (_C_5 : (tolower(((69 :> int8) :> integer)) == ((101 :> int8) :> integer)))
   
  axiom f :
  (_C_6 : (tolower(((70 :> int8) :> integer)) == ((102 :> int8) :> integer)))
   
  axiom g :
  (_C_7 : (tolower(((71 :> int8) :> integer)) == ((103 :> int8) :> integer)))
   
  axiom h :
  (_C_8 : (tolower(((72 :> int8) :> integer)) == ((104 :> int8) :> integer)))
   
  axiom i :
  (_C_9 : (tolower(((73 :> int8) :> integer)) == ((105 :> int8) :> integer)))
   
  axiom j :
  (_C_10 : (tolower(((74 :> int8) :> integer)) == ((106 :> int8) :> integer)))
   
  axiom k :
  (_C_11 : (tolower(((75 :> int8) :> integer)) == ((107 :> int8) :> integer)))
   
  axiom l :
  (_C_12 : (tolower(((76 :> int8) :> integer)) == ((108 :> int8) :> integer)))
   
  axiom m :
  (_C_13 : (tolower(((77 :> int8) :> integer)) == ((109 :> int8) :> integer)))
   
  axiom n :
  (_C_14 : (tolower(((78 :> int8) :> integer)) == ((110 :> int8) :> integer)))
   
  axiom o :
  (_C_15 : (tolower(((79 :> int8) :> integer)) == ((111 :> int8) :> integer)))
   
  axiom p :
  (_C_16 : (tolower(((80 :> int8) :> integer)) == ((112 :> int8) :> integer)))
   
  axiom q :
  (_C_17 : (tolower(((81 :> int8) :> integer)) == ((113 :> int8) :> integer)))
   
  axiom r :
  (_C_18 : (tolower(((82 :> int8) :> integer)) == ((114 :> int8) :> integer)))
   
  axiom s :
  (_C_19 : (tolower(((83 :> int8) :> integer)) == ((115 :> int8) :> integer)))
   
  axiom t :
  (_C_20 : (tolower(((84 :> int8) :> integer)) == ((116 :> int8) :> integer)))
   
  axiom u :
  (_C_21 : (tolower(((85 :> int8) :> integer)) == ((117 :> int8) :> integer)))
   
  axiom v :
  (_C_22 : (tolower(((86 :> int8) :> integer)) == ((118 :> int8) :> integer)))
   
  axiom w :
  (_C_23 : (tolower(((87 :> int8) :> integer)) == ((119 :> int8) :> integer)))
   
  axiom x :
  (_C_24 : (tolower(((88 :> int8) :> integer)) == ((120 :> int8) :> integer)))
   
  axiom y :
  (_C_25 : (tolower(((89 :> int8) :> integer)) == ((121 :> int8) :> integer)))
   
  axiom z :
  (_C_26 : (tolower(((90 :> int8) :> integer)) == ((122 :> int8) :> integer)))
   
  axiom pl :
  (_C_27 : (\forall integer c_9;
             ((! isupper(c_9)) ==> (tolower(c_9) == c_9))))
   
  axiom pu :
  (_C_28 : (\forall integer c_10;
             ((! islower(c_10)) ==> (toupper(c_10) == c_10))))
   
  axiom tl :
  (_C_29 : (\forall integer c_11;
             ((! islower(c_11)) ==> (toupper(tolower(c_11)) == c_11))))
   
  axiom tu :
  (_C_30 : (\forall integer c_12;
             ((! isupper(c_12)) ==> (tolower(toupper(c_12)) == c_12))))
  
}

_bool isalnum(int8 c_2)
behavior default:
  assigns \nothing;
  ensures (_C_31 : ((\result != 0) <==> isalnum((\at(c_2,Old) :> integer))));
;

_bool isalpha(int8 c_3)
behavior default:
  assigns \nothing;
  ensures (_C_32 : ((\result != 0) <==> isalpha((\at(c_3,Old) :> integer))));
;

_bool islower(int8 c_6)
behavior default:
  assigns \nothing;
  ensures (_C_33 : ((\result != 0) <==> islower((\at(c_6,Old) :> integer))));
;

_bool isspace(int8 c_8)
behavior default:
  assigns \nothing;
  ensures (_C_34 : ((\result != 0) <==> isspace((\at(c_8,Old) :> integer))));
;

_bool isupper(int8 c_9)
behavior default:
  assigns \nothing;
  ensures (_C_35 : ((\result != 0) <==> isupper((\at(c_9,Old) :> integer))));
;

_bool isxdigit(int8 c_10)
behavior default:
  assigns \nothing;
  ensures (_C_36 : ((\result != 0) <==> isxdigit((\at(c_10,Old) :> integer))));
;

_bool isascii(int8 c_4)
behavior default:
  assigns \nothing;
  ensures (_C_37 : ((\result != 0) <==>
                     (((0 :> int8) <= \at(c_4,Old)) &&
                       (\at(c_4,Old) <= (127 :> int8)))));
;

int32 isdigit(int32 c_5)
behavior default:
  assigns \nothing;
  ensures (_C_38 : ((\result != 0) <==> isdigit((\at(c_5,Old) :> integer))));
;

uint8 __tolower(uint8 c)
behavior default:
  assigns \nothing;
  ensures (_C_39 : ((\result :> integer) == tolower((\at(c,Old) :> integer))));
;

uint8 __toupper(uint8 c_0)
behavior default:
  assigns \nothing;
  ensures (_C_40 : ((\result :> integer) ==
                     toupper((\at(c_0,Old) :> integer))));
;

int8 tolower(int8 c_11)
behavior default:
  assigns \nothing;
  ensures (_C_41 : ((\result :> integer) ==
                     tolower((\at(c_11,Old) :> integer))));
;

int8 toupper(int8 c_12)
behavior default:
  assigns \nothing;
  ensures (_C_42 : ((\result :> integer) ==
                     toupper((\at(c_12,Old) :> integer))));
;

int8 _tolower(int8 c_1)
behavior default:
  assigns \nothing;
  ensures (_C_43 : ((\result :> integer) ==
                     tolower((\at(c_1,Old) :> integer))));
;

int32 isodigit(int8 c_7)
behavior default:
  assigns \nothing;
  ensures (_C_44 : ((\result != 0) <==> isodigit((\at(c_7,Old) :> integer))));
;

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        (((s + (n_1 :> integer)).charM == (0 :> int8)) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_45 : (\forall charP[..] s_0;
             (((s_0.charM != (0 :> int8)) && valid_str{L}(s_0)) ==>
               valid_str{L}((s_0 + 1)))))
   
  lemma valid_str_strend{L} :
  (_C_46 : (\forall charP[..] s_1;
             ((\at((((\offset_min(\at(s_1,L)) <= \at(0,L)) &&
                      (\offset_max(\at(s_1,L)) >= \at(0,L))) &&
                     true),L) &&
                (s_1.charM == (0 :> int8))) ==>
               valid_str{L}(s_1))))
   
  logic uint64 strlen{L}(charP[..] s_2) =
  \at((if ((s_2 + 0).charM == (0 :> int8)) then (0 :> uint64) else ((1 +
                                                                    (strlen{L}(
                                                                    (s_2 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_47 : (\forall charP[..] s_3;
             (\forall integer i;
               (((valid_str{L}(s_3) && (0 <= i)) &&
                  (i < (strlen{L}(s_3) :> integer))) ==>
                 ((s_3 + i).charM != (0 :> int8))))))
   
  lemma strlen_at_null{L} :
  (_C_48 : (\forall charP[..] s_4;
             (valid_str{L}(s_4) ==>
               ((s_4 + (strlen{L}(s_4) :> integer)).charM == (0 :> int8)))))
   
  lemma strlen_shift{L} :
  (_C_49 : (\forall charP[..] s_5;
             (\forall uint64 i_0;
               ((valid_str{L}(s_5) && (i_0 <= strlen{L}(s_5))) ==>
                 ((strlen{L}((s_5 + (i_0 :> integer))) :> integer) ==
                   ((strlen{L}(s_5) :> integer) - (i_0 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_50 : (\forall charP[..] s_6;
             (\forall uint64 i_1;
               (((valid_str{L}(s_6) && ((0 :> uint64) < i_1)) &&
                  (i_1 <= strlen{L}(s_6))) ==>
                 (strlen{L}((s_6 + (i_1 :> integer))) < strlen{L}(s_6))))))
   
  lemma strlen_shift1{L} :
  (_C_51 : (\forall charP[..] s_7;
             ((valid_str{L}(s_7) && (s_7.charM != (0 :> int8))) ==>
               ((strlen{L}(s_7) :> integer) ==
                 (1 + (strlen{L}((s_7 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_52 : (\forall charP[..] s_8;
             (\forall charP[..] sc;
               (((((valid_str{L}(s_8) && valid_str{L}(sc)) &&
                    (\base_block(s_8) == \base_block(sc))) &&
                   ((\base_block(s_8) == \base_block(sc)) &&
                     ((s_8 - sc) <= 0))) &&
                  (\forall integer i_2;
                    (((0 <= i_2) && (i_2 <= (sc - s_8))) ==>
                      ((s_8 + i_2).charM != (0 :> int8))))) ==>
                 (strlen{L}(sc) <= strlen{L}(s_8))))))
   
  lemma strlen_main{L} :
  (_C_53 : (\forall charP[..] s_9;
             (\forall uint64 n_2;
               (((valid_str{L}(s_9) &&
                   ((s_9 + (n_2 :> integer)).charM == (0 :> int8))) &&
                  (\forall integer i_3;
                    (((0 <= i_3) && (i_3 < (n_2 :> integer))) ==>
                      ((s_9 + i_3).charM != (0 :> int8))))) ==>
                 (strlen{L}(s_9) == n_2)))))
   
  lemma valid_str_shiftn{L} :
  (_C_54 : (\forall charP[..] s_10;
             (\forall integer i_4;
               (((valid_str{L}(s_10) && (0 <= i_4)) &&
                  (i_4 < (strlen{L}(s_10) :> integer))) ==>
                 valid_str{L}((s_10 + i_4))))))
  
}

uint64 strlen(charP[..] s)
  requires (_C_60 : valid_str{Here}(s));
behavior default:
  assigns \nothing;
  ensures (_C_55 : ((_C_56 : (\result == strlen{Here}(\at(s,Old)))) &&
                     ((_C_58 : ((\at(s,Old) + (\result :> integer)).charM ==
                                 (0 :> int8))) &&
                       (_C_59 : (\forall integer i_5;
                                  (((0 <= i_5) &&
                                     (i_5 < (\result :> integer))) ==>
                                    ((\at(s,Old) + i_5).charM != (0 :> int8))))))));
;

axiomatic SkipSpaces {

  logic charP[..] skip_spaces(charP[..] str)
   
  lemma skip_spaces_defn{L} :
  (_C_61 : (\forall charP[..] str_0;
             (\forall uint64 i_6;
               ((((valid_str{L}(str_0) && (i_6 <= strlen{L}(str_0))) &&
                   (\forall uint64 j;
                     ((j < i_6) ==>
                       isspace(((str_0 + (j :> integer)).charM :> integer))))) &&
                  (! isspace(((str_0 + (i_6 :> integer)).charM :> integer)))) ==>
                 ((str_0 + (i_6 :> integer)) == skip_spaces(str_0))))))
   
  lemma skip_spaces_deref{L} :
  (_C_62 : (\forall charP[..] str_1;
             (valid_str{L}(str_1) ==>
               (! isspace((skip_spaces(str_1).charM :> integer))))))
   
  lemma skip_spaces_range{L} :
  (_C_63 : (\forall charP[..] str_2;
             (valid_str{L}(str_2) ==>
               (((\base_block(str_2) == \base_block(skip_spaces(str_2))) &&
                  ((str_2 - skip_spaces(str_2)) <= 0)) &&
                 ((\base_block(skip_spaces(str_2)) ==
                    \base_block((str_2 + (strlen{L}(str_2) :> integer)))) &&
                   ((skip_spaces(str_2) -
                      (str_2 + (strlen{L}(str_2) :> integer))) <=
                     0))))))
   
  lemma skip_spaces_iter_one{L} :
  (_C_64 : (\forall charP[..] str_3;
             ((valid_str{L}(str_3) && (! isspace((str_3.charM :> integer)))) ==>
               (skip_spaces(str_3) == skip_spaces((str_3 + 1))))))
   
  lemma skip_spaces_base_addr{L} :
  (_C_65 : (\forall charP[..] str_4;
             (valid_str{L}(str_4) ==>
               (\base_block(str_4) == \base_block(skip_spaces(str_4))))))
   
  lemma skip_spaces_same{L} :
  (_C_66 : (\forall charP[..] str_5;
             ((\at((((\offset_min(\at(str_5,L)) <= \at(0,L)) &&
                      (\offset_max(\at(str_5,L)) >= \at(0,L))) &&
                     true),L) &&
                (! isspace((str_5.charM :> integer)))) ==>
               (str_5 == skip_spaces(str_5)))))
   
  lemma skipped_are_spaces{L} :
  (_C_67 : (\forall charP[..] str_6;
             (\forall uint64 i_7;
               ((valid_str{L}(str_6) &&
                  ((i_7 :> integer) < (skip_spaces(str_6) - str_6))) ==>
                 isspace(((str_6 + (i_7 :> integer)).charM :> integer))))))
  
}

charP[..] skip_spaces(charP[..] str)
  requires (_C_103 : valid_str{Here}(str));
behavior default:
  assigns \nothing;
  ensures (_C_86 : ((_C_87 : (\result == skip_spaces(\at(str,Old)))) &&
                     ((_C_89 : (\base_block(\result) ==
                                 \base_block(\at(str,Old)))) &&
                       ((((_C_93 : (\base_block(\at(str,Old)) ==
                                     \base_block(\result))) &&
                           (_C_94 : ((\at(str,Old) - \result) <= 0))) &&
                          ((_C_96 : (\base_block(\result) ==
                                      \base_block((\at(str,Old) +
                                                    (strlen{Here}(\at(str,Old)) :> integer))))) &&
                            (_C_97 : ((\result -
                                        (\at(str,Old) +
                                          (strlen{Here}(\at(str,Old)) :> integer))) <=
                                       0)))) &&
                         ((_C_99 : (! isspace((\result.charM :> integer)))) &&
                           ((_C_101 : (\forall charP[..] p;
                                        ((((\base_block(\at(str,Old)) ==
                                             \base_block(p)) &&
                                            ((\at(str,Old) - p) <= 0)) &&
                                           ((\base_block(p) ==
                                              \base_block(\result)) &&
                                             ((p - \result) < 0))) ==>
                                          isspace((p.charM :> integer))))) &&
                             (_C_102 : valid_str{Here}(\result))))))));
{  
   (var charP[..] ostr);
   
   (var _bool tmp);
   
   (var charP[..] __retres);
   
   {  (_C_68 : (ostr = str));
      
      loop 
      behavior default:
        invariant (_C_78 : valid_str{Here}(str));
      behavior default:
        invariant (_C_71 : (((_C_73 : (\base_block(ostr) == \base_block(str))) &&
                              (_C_74 : ((ostr - str) <= 0))) &&
                             ((_C_76 : (\base_block(str) ==
                                         \base_block((ostr +
                                                       (strlen{Here}(
                                                       ostr) :> integer))))) &&
                               (_C_77 : ((str -
                                           (ostr +
                                             (strlen{Here}(ostr) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_70 : (\forall charP[..] p;
                             ((((\base_block(ostr) == \base_block(p)) &&
                                 ((ostr - p) <= 0)) &&
                                ((\base_block(p) == \base_block(str)) &&
                                  ((p - str) < 0))) ==>
                               isspace((p.charM :> integer)))));
      variant (_C_69 : ((strlen{Here}(ostr) :> integer) - (str - ostr)));
      while (true)
      {  
         {  (_C_81 : (tmp = (_C_80 : isspace((_C_79 : str.charM)))));
            (if (_C_82 : ((tmp :> _bool) != (0 :> _bool))) then () else 
            (goto while_0_break));
            (_C_84 : (str = (_C_83 : (str + (1 :> int32)))))
         }
      };
      (while_0_break : ());
      (_C_85 : (__retres = str));
      
      (return __retres)
   }
}
