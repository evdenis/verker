
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        (((s + (n_1 :> integer)).charM == (0 :> int8)) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_1 : (\forall charP[..] s_0;
            (((s_0.charM != (0 :> int8)) && valid_str{L}(s_0)) ==>
              valid_str{L}((s_0 + 1)))))
   
  lemma valid_str_strend{L} :
  (_C_2 : (\forall charP[..] s_1;
            ((\at((((\offset_min(\at(s_1,L)) <= \at(0,L)) &&
                     (\offset_max(\at(s_1,L)) >= \at(0,L))) &&
                    true),L) &&
               (s_1.charM == (0 :> int8))) ==>
              valid_str{L}(s_1))))
   
  logic uint64 strlen{L}(charP[..] s_2) =
  \at((if ((s_2 + 0).charM == (0 :> int8)) then (0 :> uint64) else ((1 +
                                                                    (strlen{L}(
                                                                    (s_2 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_3 : (\forall charP[..] s_3;
            (\forall integer i;
              (((valid_str{L}(s_3) && (0 <= i)) &&
                 (i < (strlen{L}(s_3) :> integer))) ==>
                ((s_3 + i).charM != (0 :> int8))))))
   
  lemma strlen_at_null{L} :
  (_C_4 : (\forall charP[..] s_4;
            (valid_str{L}(s_4) ==>
              ((s_4 + (strlen{L}(s_4) :> integer)).charM == (0 :> int8)))))
   
  lemma strlen_shift{L} :
  (_C_5 : (\forall charP[..] s_5;
            (\forall uint64 i_0;
              ((valid_str{L}(s_5) && (i_0 <= strlen{L}(s_5))) ==>
                ((strlen{L}((s_5 + (i_0 :> integer))) :> integer) ==
                  ((strlen{L}(s_5) :> integer) - (i_0 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_6 : (\forall charP[..] s_6;
            (\forall uint64 i_1;
              (((valid_str{L}(s_6) && ((0 :> uint64) < i_1)) &&
                 (i_1 <= strlen{L}(s_6))) ==>
                (strlen{L}((s_6 + (i_1 :> integer))) < strlen{L}(s_6))))))
   
  lemma strlen_shift1{L} :
  (_C_7 : (\forall charP[..] s_7;
            ((valid_str{L}(s_7) && (s_7.charM != (0 :> int8))) ==>
              ((strlen{L}(s_7) :> integer) ==
                (1 + (strlen{L}((s_7 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_8 : (\forall charP[..] s_8;
            (\forall charP[..] sc;
              (((((valid_str{L}(s_8) && valid_str{L}(sc)) &&
                   (\base_block(s_8) == \base_block(sc))) &&
                  ((\base_block(s_8) == \base_block(sc)) &&
                    ((s_8 - sc) <= 0))) &&
                 (\forall integer i_2;
                   (((0 <= i_2) && (i_2 <= (sc - s_8))) ==>
                     ((s_8 + i_2).charM != (0 :> int8))))) ==>
                (strlen{L}(sc) <= strlen{L}(s_8))))))
   
  lemma strlen_main{L} :
  (_C_9 : (\forall charP[..] s_9;
            (\forall uint64 n_2;
              (((valid_str{L}(s_9) &&
                  ((s_9 + (n_2 :> integer)).charM == (0 :> int8))) &&
                 (\forall integer i_3;
                   (((0 <= i_3) && (i_3 < (n_2 :> integer))) ==>
                     ((s_9 + i_3).charM != (0 :> int8))))) ==>
                (strlen{L}(s_9) == n_2)))))
   
  lemma valid_str_shiftn{L} :
  (_C_10 : (\forall charP[..] s_10;
             (\forall integer i_4;
               (((valid_str{L}(s_10) && (0 <= i_4)) &&
                  (i_4 < (strlen{L}(s_10) :> integer))) ==>
                 valid_str{L}((s_10 + i_4))))))
  
}

uint64 strlen(charP[..] s)
  requires (_C_16 : valid_str{Here}(s));
behavior default:
  assigns \nothing;
  ensures (_C_11 : ((_C_12 : (\result == strlen{Here}(\at(s,Old)))) &&
                     ((_C_14 : ((\at(s,Old) + (\result :> integer)).charM ==
                                 (0 :> int8))) &&
                       (_C_15 : (\forall integer i_5;
                                  (((0 <= i_5) &&
                                     (i_5 < (\result :> integer))) ==>
                                    ((\at(s,Old) + i_5).charM != (0 :> int8))))))));
;

charP[..] strrchr(charP[..] s_0, int32 c)
  requires (_C_60 : valid_str{Here}(s_0));
behavior default:
  assigns \nothing;
  ensures true;
behavior found:
  assumes (\exists charP[..] p_0;
            ((((\base_block(s_0) == \base_block(p_0)) && ((s_0 - p_0) <= 0)) &&
               ((\base_block(p_0) ==
                  \base_block((s_0 + (strlen{Here}(s_0) :> integer)))) &&
                 ((p_0 - (s_0 + (strlen{Here}(s_0) :> integer))) <= 0))) &&
              (p_0.charM == (c :%> int8))));
  ensures (_C_46 : ((((_C_49 : (\base_block(\at(s_0,Old)) ==
                                 \base_block(\result))) &&
                       (_C_50 : ((\at(s_0,Old) - \result) <= 0))) &&
                      ((_C_52 : (\base_block(\result) ==
                                  \base_block((\at(s_0,Old) +
                                                (strlen{Here}(\at(s_0,Old)) :> integer))))) &&
                        (_C_53 : ((\result -
                                    (\at(s_0,Old) +
                                      (strlen{Here}(\at(s_0,Old)) :> integer))) <=
                                   0)))) &&
                     ((_C_55 : (\result.charM == (\at(c,Old) :%> int8))) &&
                       (_C_56 : (\forall charP[..] p_1;
                                  ((((\base_block(\result) ==
                                       \base_block(p_1)) &&
                                      ((\result - p_1) < 0)) &&
                                     ((\base_block(p_1) ==
                                        \base_block((\at(s_0,Old) +
                                                      (strlen{Here}(\at(s_0,Old)) :> integer)))) &&
                                       ((p_1 -
                                          (\at(s_0,Old) +
                                            (strlen{Here}(\at(s_0,Old)) :> integer))) <=
                                         0))) ==>
                                    (p_1.charM != (\at(c,Old) :%> int8))))))));
behavior not_found:
  assumes (\forall charP[..] p;
            ((((\base_block(s_0) == \base_block(p)) && ((s_0 - p) <= 0)) &&
               ((\base_block(p) ==
                  \base_block((s_0 + (strlen{Here}(s_0) :> integer)))) &&
                 ((p - (s_0 + (strlen{Here}(s_0) :> integer))) <= 0))) ==>
              (p.charM != (c :%> int8))));
  ensures (_C_57 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists charP[..] p_0;
                                      ((((\base_block(s_0) ==
                                           \base_block(p_0)) &&
                                          ((s_0 - p_0) <= 0)) &&
                                         ((\base_block(p_0) ==
                                            \base_block((s_0 +
                                                          (strlen{Here}(
                                                          s_0) :> integer)))) &&
                                           ((p_0 -
                                              (s_0 +
                                                (strlen{Here}(s_0) :> integer))) <=
                                             0))) &&
                                        (p_0.charM == (c :%> int8)))) &&
                                     (\forall charP[..] p;
                                       ((((\base_block(s_0) ==
                                            \base_block(p)) &&
                                           ((s_0 - p) <= 0)) &&
                                          ((\base_block(p) ==
                                             \base_block((s_0 +
                                                           (strlen{Here}(
                                                           s_0) :> integer)))) &&
                                            ((p -
                                               (s_0 +
                                                 (strlen{Here}(s_0) :> integer))) <=
                                              0))) ==>
                                         (p.charM != (c :%> int8))))))));
   
   (check (complete_behaviors : ((\forall charP[..] p;
                                   ((((\base_block(s_0) == \base_block(p)) &&
                                       ((s_0 - p) <= 0)) &&
                                      ((\base_block(p) ==
                                         \base_block((s_0 +
                                                       (strlen{Here}(
                                                       s_0) :> integer)))) &&
                                        ((p -
                                           (s_0 +
                                             (strlen{Here}(s_0) :> integer))) <=
                                          0))) ==>
                                     (p.charM != (c :%> int8)))) ||
                                  (\exists charP[..] p_0;
                                    ((((\base_block(s_0) == \base_block(p_0)) &&
                                        ((s_0 - p_0) <= 0)) &&
                                       ((\base_block(p_0) ==
                                          \base_block((s_0 +
                                                        (strlen{Here}(
                                                        s_0) :> integer)))) &&
                                         ((p_0 -
                                            (s_0 +
                                              (strlen{Here}(s_0) :> integer))) <=
                                           0))) &&
                                      (p_0.charM == (c :%> int8)))))));
   
   (var charP[..] last);
   
   (var charP[..] os);
   
   (var charP[..] tmp);
   
   (var charP[..] __retres);
   
   {  (_C_17 : (last = null));
      (_C_18 : (os = s_0));
      
      loop 
      behavior default:
        invariant (_C_24 : (((_C_26 : (\base_block(os) == \base_block(s_0))) &&
                              (_C_27 : ((os - s_0) <= 0))) &&
                             ((_C_29 : (\base_block(s_0) ==
                                         \base_block((os +
                                                       (strlen{Here}(
                                                       os) :> integer))))) &&
                               (_C_30 : ((s_0 -
                                           (os +
                                             (strlen{Here}(os) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_23 : (((last == null) &&
                              (! ((((\base_block(os) == \base_block(last)) &&
                                     ((os - last) <= 0)) &&
                                    ((\base_block(last) == \base_block(s_0)) &&
                                      ((last - s_0) < 0))) &&
                                   (last.charM == (c :%> int8))))) ||
                             (((((\base_block(os) == \base_block(last)) &&
                                  ((os - last) <= 0)) &&
                                 ((\base_block(last) == \base_block(s_0)) &&
                                   ((last - s_0) < 0))) &&
                                (last.charM == (c :%> int8))) &&
                               (! (last == null)))));
      behavior default:
        invariant (_C_22 : ((last != null) <==>
                             (\exists charP[..] p;
                               ((((\base_block(os) == \base_block(p)) &&
                                   ((os - p) <= 0)) &&
                                  ((\base_block(p) == \base_block(s_0)) &&
                                    ((p - s_0) < 0))) &&
                                 (p.charM == (c :%> int8))))));
      behavior default:
        invariant (_C_21 : ((last == null) <==>
                             (\forall charP[..] p;
                               ((((\base_block(os) == \base_block(p)) &&
                                   ((os - p) <= 0)) &&
                                  ((\base_block(p) == \base_block(s_0)) &&
                                    ((p - s_0) < 0))) ==>
                                 (p.charM != (c :%> int8))))));
      behavior default:
        invariant (_C_20 : ((last != null) ==>
                             (\forall charP[..] p;
                               ((((\base_block(last) == \base_block(p)) &&
                                   ((last - p) < 0)) &&
                                  ((\base_block(p) == \base_block(s_0)) &&
                                    ((p - s_0) < 0))) ==>
                                 (p.charM != (c :%> int8))))));
      variant (_C_19 : ((strlen{Here}(os) :> integer) - (s_0 - os)));
      while (true)
      {  
         {  
            {  (if (_C_36 : ((_C_35 : ((_C_34 : s_0.charM) :> int32)) ==
                              (_C_33 : ((_C_32 : (c :%> int8)) :> int32)))) then 
               (_C_31 : (last = s_0)) else ())
            };
            
            {  (_C_37 : (tmp = s_0));
               (_C_39 : (s_0 = (_C_38 : (s_0 + (1 :> int32)))));
               ()
            };
            (if (_C_41 : (((_C_40 : tmp.charM) :> int8) != (0 :> int8))) then () else 
            (goto while_0_break))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_42 : (jessie : ((s_0 + (- 1)).charM ==
                                                   (0 :> int8)))));
         ()
      };
      
      {  
         (assert for default: (_C_43 : (jessie : (s_0 ==
                                                   ((os +
                                                      (strlen{Here}(os) :> integer)) +
                                                     1)))));
         ()
      };
      
      {  
         (assert for default: (_C_44 : (jessie : ((\exists charP[..] p;
                                                    ((((\base_block(os) ==
                                                         \base_block(p)) &&
                                                        ((os - p) <= 0)) &&
                                                       ((\base_block(p) ==
                                                          \base_block(
                                                          (os +
                                                            (strlen{Here}(
                                                            os) :> integer)))) &&
                                                         ((p -
                                                            (os +
                                                              (strlen{Here}(
                                                              os) :> integer))) <
                                                           0))) &&
                                                      (p.charM ==
                                                        (c :%> int8)))) ==>
                                                   (last != null)))));
         ()
      };
      (_C_45 : (__retres = last));
      
      (return __retres)
   }
}
