
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

theory Axiomatic_Strlen

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate valid_str (s : (pointer voidP)) (voidP_s_2_alloc_table_at_L :
  (alloc_table voidP)) (charP_charM_s_2_at_L : (memory voidP Int8.t))
  =
     (exists n_1 : Uint64.t.
      ((Int8.(=) (select charP_charM_s_2_at_L (shift s (Uint64.to_int n_1)))
       (#"strnchr.jc" 21 42 53# "expl:Integer cast" (Int8.of_int (0))))
      /\
      (if ((<=) (0) (Uint64.to_int n_1)) then
       (((<=) (offset_min voidP_s_2_alloc_table_at_L s) (0)) /\
       (((>=) (offset_max voidP_s_2_alloc_table_at_L s) (Uint64.to_int n_1))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1 (Uint64.to_int n_1))) -> ((=) true true)))))
       else ((=) true true))))
  
  
  lemma Valid_str_shift1
  #"/home/work/workspace/self/verker/strlen.h" 12 7 102#
  "expl:Lemma valid_str_shift1" :
  (forall voidP_s_0_10_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_0_10_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 12 7 102#
    (forall s_0_1 : (pointer voidP).
     (((Int8.(<>) (select charP_charM_s_0_10_at_L s_0_1)
       (#"strnchr.jc" 35 28 39# "expl:Integer cast" (Int8.of_int (0))))
      /\
      (valid_str s_0_1 voidP_s_0_10_alloc_table_at_L charP_charM_s_0_10_at_L))
      ->
      (valid_str (shift s_0_1 (1)) voidP_s_0_10_alloc_table_at_L
      charP_charM_s_0_10_at_L))))))
  
  lemma Valid_str_strend
  #"/home/work/workspace/self/verker/strlen.h" 18 7 87#
  "expl:Lemma valid_str_strend" :
  (forall voidP_s_1_11_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_1_11_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 18 7 87#
    (forall s_1_0 : (pointer voidP).
     (((((<=) (offset_min voidP_s_1_11_alloc_table_at_L s_1_0) (0)) /\
       (((>=) (offset_max voidP_s_1_11_alloc_table_at_L s_1_0) (0)) /\
       ((=) true true)))
      /\
      (Int8.(=) (select charP_charM_s_1_11_at_L s_1_0)
      (#"strnchr.jc" 43 29 40# "expl:Integer cast" (Int8.of_int (0))))) ->
      (valid_str s_1_0 voidP_s_1_11_alloc_table_at_L charP_charM_s_1_11_at_L))))))
  
  function strlen (s_2 : (pointer voidP)) (charP_charM_s_2_3_at_L : (memory
  voidP Int8.t)) : Uint64.t
  =
     (if
      (Int8.(=) (select charP_charM_s_2_3_at_L (shift s_2 (0)))
      (#"strnchr.jc" 47 30 41# "expl:Integer cast" (Int8.of_int (0)))) then
      (#"strnchr.jc" 47 48 61# "expl:Integer cast" (Uint64.of_int (0))) else
      (#"strnchr.jc" 47 67 255# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_2 (1)) charP_charM_s_2_3_at_L))))))
  
  
  lemma Strlen_before_null
  #"/home/work/workspace/self/verker/strlen.h" 26 7 106#
  "expl:Lemma strlen_before_null" :
  (forall voidP_s_3_12_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_3_12_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 26 7 106#
    (forall s_3 : (pointer voidP).
     (forall i : int.
      (((valid_str s_3 voidP_s_3_12_alloc_table_at_L charP_charM_s_3_12_at_L)
       /\
       (((<=) (0) i) /\
       ((<) i (Uint64.to_int (strlen s_3 charP_charM_s_3_12_at_L))))) ->
       (Int8.(<>) (select charP_charM_s_3_12_at_L (shift s_3 i))
       (#"strnchr.jc" 56 36 47# "expl:Integer cast" (Int8.of_int (0))))))))))
  
  lemma Strlen_at_null #"/home/work/workspace/self/verker/strlen.h" 31 7 71#
  "expl:Lemma strlen_at_null" :
  (forall voidP_s_4_13_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_4_13_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 31 7 71#
    (forall s_4 : (pointer voidP).
     ((valid_str s_4 voidP_s_4_13_alloc_table_at_L charP_charM_s_4_13_at_L)
      ->
      (Int8.(=)
      (select charP_charM_s_4_13_at_L
      (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_13_at_L))))
      (#"strnchr.jc" 61 60 71# "expl:Integer cast" (Int8.of_int (0)))))))))
  
  lemma Strlen_shift #"/home/work/workspace/self/verker/strlen.h" 35 7 125#
  "expl:Lemma strlen_shift" :
  (forall voidP_s_5_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_5_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 35 7 125#
    (forall s_5 : (pointer voidP).
     (forall i_0 : Uint64.t.
      (((valid_str s_5 voidP_s_5_14_alloc_table_at_L charP_charM_s_5_14_at_L)
       /\ (Uint64.(<=) i_0 (strlen s_5 charP_charM_s_5_14_at_L))) ->
       ((=)
       (Uint64.to_int
       (strlen (shift s_5 (Uint64.to_int i_0)) charP_charM_s_5_14_at_L))
       (Int.(-) (Uint64.to_int (strlen s_5 charP_charM_s_5_14_at_L))
       (Uint64.to_int i_0)))))))))
  
  lemma Strlen_shift_ex
  #"/home/work/workspace/self/verker/strlen.h" 41 7 126#
  "expl:Lemma strlen_shift_ex" :
  (forall voidP_s_6_15_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_6_15_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 41 7 126#
    (forall s_6 : (pointer voidP).
     (forall i_1 : Uint64.t.
      (((valid_str s_6 voidP_s_6_15_alloc_table_at_L charP_charM_s_6_15_at_L)
       /\
       ((Uint64.(<) (#"strnchr.jc" 73 39 52# "expl:Integer cast"
        (Uint64.of_int (0))) i_1)
       /\ (Uint64.(<=) i_1 (strlen s_6 charP_charM_s_6_15_at_L)))) ->
       (Uint64.(<)
       (strlen (shift s_6 (Uint64.to_int i_1)) charP_charM_s_6_15_at_L)
       (strlen s_6 charP_charM_s_6_15_at_L))))))))
  
  lemma Strlen_shift1 #"/home/work/workspace/self/verker/strlen.h" 47 7 103#
  "expl:Lemma strlen_shift1" :
  (forall voidP_s_7_16_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_7_16_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 47 7 103#
    (forall s_7 : (pointer voidP).
     (((valid_str s_7 voidP_s_7_16_alloc_table_at_L charP_charM_s_7_16_at_L)
      /\
      (Int8.(<>) (select charP_charM_s_7_16_at_L s_7)
      (#"strnchr.jc" 79 49 60# "expl:Integer cast" (Int8.of_int (0))))) ->
      ((=) (Uint64.to_int (strlen s_7 charP_charM_s_7_16_at_L))
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_7 (1)) charP_charM_s_7_16_at_L)))))))))
  
  lemma Strlen_pointers
  #"/home/work/workspace/self/verker/strlen.h" 52 7 254#
  "expl:Lemma strlen_pointers" :
  (forall voidP_s_8_17_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_8_17_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 52 7 254#
    (forall s_8 : (pointer voidP).
     (forall sc : (pointer voidP).
      (((valid_str s_8 voidP_s_8_17_alloc_table_at_L charP_charM_s_8_17_at_L)
       /\
       ((valid_str sc voidP_s_8_17_alloc_table_at_L charP_charM_s_8_17_at_L)
       /\
       ((same_block s_8 sc) /\
       ((same_block s_8 sc) /\
       (((<=) (sub_pointer s_8 sc) (0)) /\
       (forall i_2 : int.
        ((((<=) (0) i_2) /\ ((<=) i_2 (sub_pointer sc s_8))) ->
         (Int8.(<>) (select charP_charM_s_8_17_at_L (shift s_8 i_2))
         (#"strnchr.jc" 92 43 54# "expl:Integer cast" (Int8.of_int (0)))))))))))
       ->
       (Uint64.(<=) (strlen sc charP_charM_s_8_17_at_L)
       (strlen s_8 charP_charM_s_8_17_at_L))))))))
  
  lemma Strlen_main #"/home/work/workspace/self/verker/strlen.h" 61 7 165#
  "expl:Lemma strlen_main" :
  (forall voidP_s_9_19_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_9_19_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 61 7 165#
    (forall s_9 : (pointer voidP).
     (forall n_2 : Uint64.t.
      (((valid_str s_9 voidP_s_9_19_alloc_table_at_L charP_charM_s_9_19_at_L)
       /\
       ((Int8.(=)
        (select charP_charM_s_9_19_at_L (shift s_9 (Uint64.to_int n_2)))
        (#"strnchr.jc" 99 53 64# "expl:Integer cast" (Int8.of_int (0))))
       /\
       (forall i_3 : int.
        ((((<=) (0) i_3) /\ ((<) i_3 (Uint64.to_int n_2))) ->
         (Int8.(<>) (select charP_charM_s_9_19_at_L (shift s_9 i_3))
         (#"strnchr.jc" 102 43 54# "expl:Integer cast" (Int8.of_int (0))))))))
       -> (Uint64.(=) (strlen s_9 charP_charM_s_9_19_at_L) n_2)))))))
  
  lemma Valid_str_shiftn
  #"/home/work/workspace/self/verker/strlen.h" 68 7 123#
  "expl:Lemma valid_str_shiftn" :
  (forall voidP_s_10_20_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_10_20_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 68 7 123#
    (forall s_10 : (pointer voidP).
     (forall i_4 : int.
      (((valid_str s_10 voidP_s_10_20_alloc_table_at_L
        charP_charM_s_10_20_at_L)
       /\
       (((<=) (0) i_4) /\
       ((<) i_4 (Uint64.to_int (strlen s_10 charP_charM_s_10_20_at_L))))) ->
       (valid_str (shift s_10 i_4) voidP_s_10_20_alloc_table_at_L
       charP_charM_s_10_20_at_L)))))))
  
end

theory Axiomatic_Strnlen

  use enum.Uint64 
  
  use int.MinMax 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use bool.Bool 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate valid_strn (s_11 : (pointer voidP)) (cnt : Uint64.t)
  (voidP_s_11_5_alloc_table_at_L : (alloc_table voidP))
  (charP_charM_s_11_5_at_L : (memory voidP Int8.t))
  =
     ((exists n_3 : Uint64.t.
       ((Uint64.(<) n_3 cnt) /\
       ((Int8.(=)
        (select charP_charM_s_11_5_at_L (shift s_11 (Uint64.to_int n_3)))
        (#"strnchr.jc" 131 62 73# "expl:Integer cast" (Int8.of_int (0))))
       /\
       (if ((<=) (0) (Uint64.to_int n_3)) then
        (((<=) (offset_min voidP_s_11_5_alloc_table_at_L s_11) (0)) /\
        (((>=) (offset_max voidP_s_11_5_alloc_table_at_L s_11)
         (Uint64.to_int n_3))
        /\
        (forall __framac_tmp4 : int.
         ((((<=) (0) __framac_tmp4) /\
          ((<=) __framac_tmp4 (Uint64.to_int n_3))) -> ((=) true true)))))
        else ((=) true true)))))
     \/
     (if ((<=) (0) (Uint64.to_int cnt)) then
      (((<=) (offset_min voidP_s_11_5_alloc_table_at_L s_11) (0)) /\
      (((>=) (offset_max voidP_s_11_5_alloc_table_at_L s_11)
       (Uint64.to_int cnt))
      /\
      (forall __framac_tmp3 : int.
       ((((<=) (0) __framac_tmp3) /\
        ((<=) __framac_tmp3 (Uint64.to_int cnt))) -> ((=) true true))))) else
      ((=) true true)))
  
  
  lemma Valid_strn_shift1
  #"/home/work/workspace/self/verker/strnlen.h" 13 7 133#
  "expl:Lemma valid_strn_shift1" :
  (forall voidP_s_12_21_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_12_21_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 13 7 133#
    (forall s_12 : (pointer voidP).
     (forall cnt_0 : Uint64.t.
      (((valid_strn s_12 cnt_0 voidP_s_12_21_alloc_table_at_L
        charP_charM_s_12_21_at_L)
       /\
       ((Uint64.(>) cnt_0 (#"strnchr.jc" 156 57 70# "expl:Integer cast"
        (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_12_21_at_L s_12)
       (#"strnchr.jc" 157 33 44# "expl:Integer cast" (Int8.of_int (0)))))) ->
       (valid_strn (shift s_12 (1)) (#"strnchr.jc" 159 31 67#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_0) (1))))
       voidP_s_12_21_alloc_table_at_L charP_charM_s_12_21_at_L)))))))
  
  lemma Valid_str_to_valid_strn
  #"/home/work/workspace/self/verker/strnlen.h" 17 7 80#
  "expl:Lemma valid_str_to_valid_strn" :
  (forall voidP_s_13_22_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_13_22_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 17 7 80#
    (forall s_13 : (pointer voidP).
     (forall cnt_1 : Uint64.t.
      ((valid_str s_13 voidP_s_13_22_alloc_table_at_L
       charP_charM_s_13_22_at_L) ->
       (valid_strn s_13 cnt_1 voidP_s_13_22_alloc_table_at_L
       charP_charM_s_13_22_at_L)))))))
  
  function strnlen (s_14 : (pointer voidP)) (cnt_2 : Uint64.t)
  (charP_charM_s_14_6_at_L : (memory voidP Int8.t)) : Uint64.t
  =
     (if
      (Bool.orb
      (Int8.(=) (select charP_charM_s_14_6_at_L (shift s_14 (0)))
      (#"strnchr.jc" 167 32 43# "expl:Integer cast" (Int8.of_int (0))))
      (Uint64.(=) cnt_2 (#"strnchr.jc" 167 58 71# "expl:Integer cast"
      (Uint64.of_int (0))))) then (#"strnchr.jc" 167 79 92#
      "expl:Integer cast" (Uint64.of_int (0))) else
      (#"strnchr.jc" 167 98 204# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int
      (strnlen (shift s_14 (1)) (#"strnchr.jc" 169 32 68# "expl:Integer cast"
      (Uint64.of_int (Int.(-) (Uint64.to_int cnt_2) (1))))
      charP_charM_s_14_6_at_L))))))
  
  
  lemma Strnlen_range #"/home/work/workspace/self/verker/strnlen.h" 26 7 109#
  "expl:Lemma strnlen_range" :
  (forall voidP_s_15_23_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_15_23_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 26 7 109#
    (forall s_15 : (pointer voidP).
     (forall cnt_3 : Uint64.t.
      ((valid_strn s_15 cnt_3 voidP_s_15_23_alloc_table_at_L
       charP_charM_s_15_23_at_L) ->
       ((Uint64.(<=) (#"strnchr.jc" 175 19 32# "expl:Integer cast"
        (Uint64.of_int (0))) (strnlen s_15 cnt_3 charP_charM_s_15_23_at_L))
       /\ (Uint64.(<=) (strnlen s_15 cnt_3 charP_charM_s_15_23_at_L) cnt_3))))))))
  
  lemma Strnlen_null #"/home/work/workspace/self/verker/strnlen.h" 31 7 111#
  "expl:Lemma strnlen_null" :
  (forall voidP_s_16_24_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_16_24_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 31 7 111#
    (forall s_16 : (pointer voidP).
     (forall cnt_4 : Uint64.t.
      ((((<=) (offset_min voidP_s_16_24_alloc_table_at_L s_16) (0)) /\
       (((>=) (offset_max voidP_s_16_24_alloc_table_at_L s_16) (0)) /\
       ((=) true true))) ->
       ((Uint64.(=) (strnlen s_16 cnt_4 charP_charM_s_16_24_at_L)
        (#"strnchr.jc" 184 46 59# "expl:Integer cast" (Uint64.of_int (0))))
       <->
       ((Int8.(=) (select charP_charM_s_16_24_at_L s_16)
        (#"strnchr.jc" 185 35 46# "expl:Integer cast" (Int8.of_int (0))))
       \/
       (Uint64.(=) cnt_4 (#"strnchr.jc" 185 61 74# "expl:Integer cast"
       (Uint64.of_int (0))))))))))))
  
  lemma Strnlen_zero_count
  #"/home/work/workspace/self/verker/strnlen.h" 35 7 51#
  "expl:Lemma strnlen_zero_count" :
  (forall charP_charM_s_17_25_at_L : (memory voidP Int8.t).
   (#"/home/work/workspace/self/verker/strnlen.h" 35 7 51#
   (forall s_17 : (pointer voidP).
    (Uint64.(=)
    (strnlen s_17 (#"strnchr.jc" 189 31 44# "expl:Integer cast"
    (Uint64.of_int (0))) charP_charM_s_17_25_at_L) (#"strnchr.jc" 189 49 62#
    "expl:Integer cast" (Uint64.of_int (0)))))))
  
  lemma Strnlen_min_len
  #"/home/work/workspace/self/verker/strnlen.h" 39 6 160#
  "expl:Lemma strnlen_min_len" :
  (forall voidP_s_18_26_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_18_26_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 39 6 160#
    (forall s_18 : (pointer voidP).
     (forall cnt_5 : Uint64.t.
      ((exists n_4 : Uint64.t.
        ((Uint64.(<) n_4 cnt_5) /\
        ((Int8.(=)
         (select charP_charM_s_18_26_at_L (shift s_18 (Uint64.to_int n_4)))
         (#"strnchr.jc" 196 57 68# "expl:Integer cast" (Int8.of_int (0))))
        /\
        (if ((<=) (0) (Uint64.to_int n_4)) then
         (((<=) (offset_min voidP_s_18_26_alloc_table_at_L s_18) (0)) /\
         (((>=) (offset_max voidP_s_18_26_alloc_table_at_L s_18)
          (Uint64.to_int n_4))
         /\
         (forall __framac_tmp6 : int.
          ((((<=) (0) __framac_tmp6) /\
           ((<=) __framac_tmp6 (Uint64.to_int n_4))) -> ((=) true true)))))
         else ((=) true true))))) ->
       ((=) (Uint64.to_int (strnlen s_18 cnt_5 charP_charM_s_18_26_at_L))
       (MinMax.min (Uint64.to_int (strlen s_18 charP_charM_s_18_26_at_L))
       (Uint64.to_int cnt_5)))))))))
  
  lemma Strnlen_before_zero
  #"/home/work/workspace/self/verker/strnlen.h" 44 7 122#
  "expl:Lemma strnlen_before_zero" :
  (forall voidP_s_19_27_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_19_27_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 44 7 122#
    (forall s_19 : (pointer voidP).
     (forall i_6 : Uint64.t.
      (forall cnt_6 : Uint64.t.
       (((valid_strn s_19 cnt_6 voidP_s_19_27_alloc_table_at_L
         charP_charM_s_19_27_at_L)
        /\
        ((Uint64.(<=) (#"strnchr.jc" 217 51 64# "expl:Integer cast"
         (Uint64.of_int (0))) i_6)
        /\ (Uint64.(<) i_6 (strnlen s_19 cnt_6 charP_charM_s_19_27_at_L))))
        ->
        (Int8.(<>)
        (select charP_charM_s_19_27_at_L (shift s_19 (Uint64.to_int i_6)))
        (#"strnchr.jc" 219 55 66# "expl:Integer cast" (Int8.of_int (0)))))))))))
  
  lemma Strnlen_at_zero
  #"/home/work/workspace/self/verker/strnlen.h" 49 7 133#
  "expl:Lemma strnlen_at_zero" :
  (forall voidP_s_20_28_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_20_28_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 49 7 133#
    (forall s_20 : (pointer voidP).
     (forall cnt_7 : Uint64.t.
      (((valid_strn s_20 cnt_7 voidP_s_20_28_alloc_table_at_L
        charP_charM_s_20_28_at_L)
       /\ (Uint64.(<) (strnlen s_20 cnt_7 charP_charM_s_20_28_at_L) cnt_7))
       ->
       (Int8.(=)
       (select charP_charM_s_20_28_at_L
       (shift s_20
       (Uint64.to_int (strnlen s_20 cnt_7 charP_charM_s_20_28_at_L))))
       (#"strnchr.jc" 227 19 30# "expl:Integer cast" (Int8.of_int (0))))))))))
  
  lemma Strnlen_at_cnt
  #"/home/work/workspace/self/verker/strnlen.h" 54 7 133#
  "expl:Lemma strnlen_at_cnt" :
  (forall voidP_s_21_29_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_21_29_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 54 7 133#
    (forall s_21 : (pointer voidP).
     (forall i_7 : Uint64.t.
      (forall cnt_8 : Uint64.t.
       (((valid_strn s_21 cnt_8 voidP_s_21_29_alloc_table_at_L
         charP_charM_s_21_29_at_L)
        /\ (Uint64.(=) i_7 (strnlen s_21 cnt_8 charP_charM_s_21_29_at_L))) ->
        ((Int8.(=)
         (select charP_charM_s_21_29_at_L (shift s_21 (Uint64.to_int i_7)))
         (#"strnchr.jc" 235 56 67# "expl:Integer cast" (Int8.of_int (0))))
        \/ (Uint64.(=) i_7 cnt_8)))))))))
  
  lemma Strnlen_zero #"/home/work/workspace/self/verker/strnlen.h" 59 7 209#
  "expl:Lemma strnlen_zero" :
  (forall voidP_s_22_30_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_22_30_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 59 7 209#
    (forall s_22 : (pointer voidP).
     (forall cnt_9 : Uint64.t.
      (forall n_5 : Uint64.t.
       (((valid_strn s_22 cnt_9 voidP_s_22_30_alloc_table_at_L
         charP_charM_s_22_30_at_L)
        /\
        ((Uint64.(<) n_5 cnt_9) /\
        ((Int8.(=)
         (select charP_charM_s_22_30_at_L (shift s_22 (Uint64.to_int n_5)))
         (#"strnchr.jc" 243 57 68# "expl:Integer cast" (Int8.of_int (0))))
        /\
        (forall i_8 : Uint64.t.
         ((Uint64.(<) i_8 n_5) ->
          (Int8.(<>)
          (select charP_charM_s_22_30_at_L (shift s_22 (Uint64.to_int i_8)))
          (#"strnchr.jc" 246 60 71# "expl:Integer cast" (Int8.of_int (0)))))))))
        -> (Uint64.(=) (strnlen s_22 cnt_9 charP_charM_s_22_30_at_L) n_5))))))))
  
  lemma Strnlen_cnt #"/home/work/workspace/self/verker/strnlen.h" 67 7 162#
  "expl:Lemma strnlen_cnt" :
  (forall voidP_s_23_31_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_23_31_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 67 7 162#
    (forall s_23 : (pointer voidP).
     (forall cnt_10 : Uint64.t.
      (((valid_strn s_23 cnt_10 voidP_s_23_31_alloc_table_at_L
        charP_charM_s_23_31_at_L)
       /\
       (forall n_6 : Uint64.t.
        ((Uint64.(<) n_6 cnt_10) ->
         (Int8.(<>)
         (select charP_charM_s_23_31_at_L (shift s_23 (Uint64.to_int n_6)))
         (#"strnchr.jc" 255 58 69# "expl:Integer cast" (Int8.of_int (0)))))))
       -> (Uint64.(=) (strnlen s_23 cnt_10 charP_charM_s_23_31_at_L) cnt_10)))))))
  
  lemma Strnlen_shift #"/home/work/workspace/self/verker/strnlen.h" 73 7 161#
  "expl:Lemma strnlen_shift" :
  (forall voidP_s_24_32_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_24_32_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 73 7 161#
    (forall s_24 : (pointer voidP).
     (forall i_9 : Uint64.t.
      (forall cnt_11 : Uint64.t.
       (((valid_strn s_24 cnt_11 voidP_s_24_32_alloc_table_at_L
         charP_charM_s_24_32_at_L)
        /\ (Uint64.(<=) i_9 (strnlen s_24 cnt_11 charP_charM_s_24_32_at_L)))
        ->
        ((=)
        (Uint64.to_int
        (strnlen (shift s_24 (Uint64.to_int i_9)) cnt_11
        charP_charM_s_24_32_at_L))
        (Int.(-)
        (Uint64.to_int (strnlen s_24 cnt_11 charP_charM_s_24_32_at_L))
        (Uint64.to_int i_9))))))))))
  
  lemma Strnlen_shift_ex
  #"/home/work/workspace/self/verker/strnlen.h" 79 7 160#
  "expl:Lemma strnlen_shift_ex" :
  (forall voidP_s_25_33_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_25_33_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 79 7 160#
    (forall s_25 : (pointer voidP).
     (forall i_10 : Uint64.t.
      (forall cnt_12 : Uint64.t.
       (((valid_strn s_25 cnt_12 voidP_s_25_33_alloc_table_at_L
         charP_charM_s_25_33_at_L)
        /\
        ((Uint64.(<) (#"strnchr.jc" 272 52 65# "expl:Integer cast"
         (Uint64.of_int (0))) i_10)
        /\ (Uint64.(<=) i_10 (strnlen s_25 cnt_12 charP_charM_s_25_33_at_L))))
        ->
        (Uint64.(<)
        (strnlen (shift s_25 (Uint64.to_int i_10)) cnt_12
        charP_charM_s_25_33_at_L)
        (strnlen s_25 cnt_12 charP_charM_s_25_33_at_L)))))))))
  
  lemma Strnlen_shift1
  #"/home/work/workspace/self/verker/strnlen.h" 85 7 159#
  "expl:Lemma strnlen_shift1" :
  (forall voidP_s_26_34_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_26_34_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 85 7 159#
    (forall s_26 : (pointer voidP).
     (forall cnt_13 : Uint64.t.
      (((valid_strn s_26 cnt_13 voidP_s_26_34_alloc_table_at_L
        charP_charM_s_26_34_at_L)
       /\
       ((Uint64.(>) cnt_13 (#"strnchr.jc" 280 59 72# "expl:Integer cast"
        (Uint64.of_int (0))))
       /\
       (Int8.(<>) (select charP_charM_s_26_34_at_L s_26)
       (#"strnchr.jc" 281 33 44# "expl:Integer cast" (Int8.of_int (0)))))) ->
       ((=) (Uint64.to_int (strnlen s_26 cnt_13 charP_charM_s_26_34_at_L))
       (Int.(+)
       (Uint64.to_int
       (strnlen (shift s_26 (1)) (#"strnchr.jc" 284 32 69#
       "expl:Integer cast"
       (Uint64.of_int (Int.(-) (Uint64.to_int cnt_13) (1))))
       charP_charM_s_26_34_at_L)) (1)))))))))
  
  lemma Strnlen_cmp #"/home/work/workspace/self/verker/strnlen.h" 90 7 167#
  "expl:Lemma strnlen_cmp" :
  (forall voidP_s2_36_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s1_35_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_s2_36_at_L : (memory voidP Int8.t).
     (forall charP_charM_s1_35_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strnlen.h" 90 7 167#
      (forall s1 : (pointer voidP).
       (forall s2 : (pointer voidP).
        (forall cnt_14 : Uint64.t.
         (((valid_str s1 voidP_s1_35_alloc_table_at_L charP_charM_s1_35_at_L)
          /\
          ((valid_strn s2 cnt_14 voidP_s2_36_alloc_table_at_L
           charP_charM_s2_36_at_L)
          /\
          (Uint64.(<) (strlen s1 charP_charM_s1_35_at_L)
          (strnlen s2 cnt_14 charP_charM_s2_36_at_L)))) ->
          (Uint64.(<) (strnlen s1 cnt_14 charP_charM_s1_35_at_L)
          (strnlen s2 cnt_14 charP_charM_s2_36_at_L)))))))))))
  
  lemma Strnlen_less #"/home/work/workspace/self/verker/strnlen.h" 95 7 139#
  "expl:Lemma strnlen_less" :
  (forall voidP_s_27_37_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_27_37_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 95 7 139#
    (forall s_27 : (pointer voidP).
     (forall i_11 : Uint64.t.
      (forall cnt_15 : Uint64.t.
       (((valid_strn s_27 cnt_15 voidP_s_27_37_alloc_table_at_L
         charP_charM_s_27_37_at_L)
        /\ (Uint64.(<=) i_11 cnt_15)) ->
        (Uint64.(<=) (strnlen s_27 i_11 charP_charM_s_27_37_at_L)
        (strnlen s_27 cnt_15 charP_charM_s_27_37_at_L)))))))))
  
  lemma Valid_str_strn
  #"/home/work/workspace/self/verker/strnlen.h" 101 7 114#
  "expl:Lemma valid_str_strn" :
  (forall voidP_s_28_38_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_28_38_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strnlen.h" 101 7 114#
    (forall s_28 : (pointer voidP).
     (forall cnt_16 : Uint64.t.
      (((valid_str s_28 voidP_s_28_38_alloc_table_at_L
        charP_charM_s_28_38_at_L)
       /\ (Uint64.(<=) cnt_16 (strlen s_28 charP_charM_s_28_38_at_L))) ->
       (valid_strn s_28 cnt_16 voidP_s_28_38_alloc_table_at_L
       charP_charM_s_28_38_at_L)))))))
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_strnchr_safety
#"/home/work/workspace/self/verker/strnchr.c" 3 5 49# "expl:strnchr, safety"

  use enum.Uint64 
  
  use Safe_bit_uint64 
  
  use Safe_bit_int8_of_Safe_bit_int32 
  
  use Safe_bit_int32_of_Safe_bit_int8 
  
  use Safe_bit_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, safety" =
  fun
   (s_0_0 : (pointer voidP)) (count : Uint64.t) (c : Int32.t)
   (voidP_s_0_8_alloc_table : (alloc_table voidP)) (voidP_s_0_8_tag_table :
   (tag_table voidP)) (charP_charM_s_0_8 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_8_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_8_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_8_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_8_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_8_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_0_0 count voidP_s_0_8_alloc_table charP_charM_s_0_8))) }
   ensures { ("expl:Postcondition" true) }  ->
   (let mutable_s_0_0 = ref s_0_0 in
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Safe_bit_uint64.any_  () ) in
     (let tmp = ref (Safe_bit_uint64.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os :=
        (let _jessie_34 = !mutable_s_0_0 in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strnchr.c" 5 17 19#
        "expl:Pointer index bounds" true) }); _jessie_34 end));
        begin
        (ocount :=
         (let _jessie_29 = !mutable_count in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strnchr.c" 6 18 24#
         "expl:Pointer index bounds" true) }); _jessie_29 end));
         'Loop_4:
         loop
         invariant { (#"strnchr.jc" 438 6 2798# true) }
           variant { (#"/home/work/workspace/self/verker/strnchr.c" 13 18 23#
             (Bit_uint64.to_int
             (#"/home/work/workspace/self/verker/strnchr.c" 13 18 23#
             !mutable_count))) }
          begin
          any unit
          requires { true } reads { c, mutable_count, mutable_s_0_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_4 : (pointer voidP).
              (((same_block !os p_4) /\
               (((<=) (sub_pointer !os p_4) (0)) /\
               ((same_block p_4 !mutable_s_0_0) /\
               ((<) (sub_pointer p_4 !mutable_s_0_0) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_0_8 p_4)
               (#"strnchr.jc" 468 43 55# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=) (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))
             (Int.(+) (sub_pointer !mutable_s_0_0 !os)
             (Bit_uint64.to_int
             (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_0_0 !mutable_count
             voidP_s_0_8_alloc_table charP_charM_s_0_8))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_0_0 !os)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os !mutable_s_0_0))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os !mutable_s_0_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_0_0
              (shift !os
              (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_0_0
             (shift !os
             (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"strnchr.jc" 440 38 51# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp :=
             (let _jessie_30 = !mutable_count in
             begin
             (assert {
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             "expl:Pointer index bounds" true) }); _jessie_30 end));
             begin
             (mutable_count :=
              (let _jessie_31 =
              (Safe_bit_uint64.(-%)  !mutable_count
               (#"strnchr.jc" 474 62 75# "expl:Integer cast"
               (Safe_bit_uint64.of_int_const 1)) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
              "expl:Pointer index bounds" true) }); _jessie_31 end)); () end
            end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Safe_bit_uint64.(<>)  !tmp
              (#"strnchr.jc" 477 45 58# "expl:Integer cast"
              (Safe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Safe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Safe_bit_int32_of_Safe_bit_int8.cast 
                (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
                "expl:Pointer dereference"
                (acc  voidP_s_0_8_alloc_table charP_charM_s_0_8
                 !mutable_s_0_0 )) ))
               (#"strnchr.jc" 481 68 80# "expl:Integer cast"
               (Safe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Safe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
               "expl:Pointer dereference"
               (acc  voidP_s_0_8_alloc_table charP_charM_s_0_8 !mutable_s_0_0
                )) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Safe_bit_int32_of_Safe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Safe_bit_int8_of_Safe_bit_int32.cast_modulo  c )) )) ))
             then
              begin
              (__retres :=
               (let _jessie_32 = !mutable_s_0_0 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strnchr.c" 17 3 20#
               "expl:Pointer index bounds" true) }); _jessie_32 end));
               (raise (Return_label_exc ())) end else ());
             (mutable_s_0_0 :=
              (let _jessie_33 =
              (shift_typesafe  !mutable_s_0_0
               (Safe_bit_int32.to_int 
                (#"strnchr.jc" 490 44 56# "expl:Integer cast"
                (Safe_bit_int32.of_int_const 1)) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strnchr.c" 15 38 41#
              "expl:Pointer index bounds" true) }); _jessie_33 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres :=
         (let _jessie_35 = (null  ) in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strnchr.c" 18 1 20#
         "expl:Pointer index bounds" true) }); _jessie_35 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_36 = !__retres in
       begin
       (assert { (#"strnchr.jc" 496 7 22# "expl:Pointer index bounds" true)
       }); _jessie_36 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)))
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Function_strnchr_behaviors
#"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
"expl:strnchr, behaviors"

  use Unsafe_bit_uint64 
  
  use Unsafe_bit_int8_of_Unsafe_bit_int32 
  
  use Unsafe_bit_int32_of_Unsafe_bit_int8 
  
  use Unsafe_bit_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use enum.Bit_uint64 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  let strnchr_ensures_default
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, default behavior" =
  fun
   (s_0_0 : (pointer voidP)) (count : Uint64.t) (c : Int32.t)
   (voidP_s_0_8_alloc_table : (alloc_table voidP)) (voidP_s_0_8_tag_table :
   (tag_table voidP)) (charP_charM_s_0_8 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_s_0_8_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_8_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_8_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_8_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_8_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_0_0 count voidP_s_0_8_alloc_table charP_charM_s_0_8))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) } diverges 
   ->
   (let mutable_s_0_0 = ref s_0_0 in
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (check {
    (#"strnchr.jc" 375 10 1721# "expl:Behavior disjointness check"
    (not
    ((exists p_0_0 : (pointer voidP).
      ((same_block !mutable_s_0_0 p_0_0) /\
      (((<=) (sub_pointer !mutable_s_0_0 p_0_0) (0)) /\
      ((same_block p_0_0
       (shift !mutable_s_0_0
       (Bit_uint64.to_int
       (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8))))
      /\
      (((<)
       (sub_pointer p_0_0
       (shift !mutable_s_0_0
       (Bit_uint64.to_int
       (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_0_8 p_0_0)
      (#"strnchr.jc" 387 54 66# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c))))))))
    /\
    (forall p_2 : (pointer voidP).
     (((same_block !mutable_s_0_0 p_2) /\
      (((<=) (sub_pointer !mutable_s_0_0 p_2) (0)) /\
      ((same_block p_2
       (shift !mutable_s_0_0
       (Bit_uint64.to_int
       (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8))))
      /\
      ((<)
      (sub_pointer p_2
      (shift !mutable_s_0_0
      (Bit_uint64.to_int
      (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))) (0))))) ->
      (Bit_int8.(<>) (select charP_charM_s_0_8 p_2) (#"strnchr.jc" 400 53 65#
      "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c)))))))) });
     (check {
     (#"strnchr.jc" 402 10 1561# "expl:Behavior completeness check"
     ((forall p_3 : (pointer voidP).
       (((same_block !mutable_s_0_0 p_3) /\
        (((<=) (sub_pointer !mutable_s_0_0 p_3) (0)) /\
        ((same_block p_3
         (shift !mutable_s_0_0
         (Bit_uint64.to_int
         (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8))))
        /\
        ((<)
        (sub_pointer p_3
        (shift !mutable_s_0_0
        (Bit_uint64.to_int
        (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))) (0)))))
        ->
        (Bit_int8.(<>) (select charP_charM_s_0_8 p_3)
        (#"strnchr.jc" 413 49 61# "expl:Integer cast"
        (Bit_int8_of_Bit_int32.cast_modulo c)))))
     \/
     (exists p_0_1 : (pointer voidP).
      ((same_block !mutable_s_0_0 p_0_1) /\
      (((<=) (sub_pointer !mutable_s_0_0 p_0_1) (0)) /\
      ((same_block p_0_1
       (shift !mutable_s_0_0
       (Bit_uint64.to_int
       (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8))))
      /\
      (((<)
       (sub_pointer p_0_1
       (shift !mutable_s_0_0
       (Bit_uint64.to_int
       (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))) (0))
      /\
      (Bit_int8.(=) (select charP_charM_s_0_8 p_0_1)
      (#"strnchr.jc" 425 52 64# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c)))))))))) });
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_0_0);
        begin
        (ocount := !mutable_count);
         'Loop_1:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
              (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
              ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
               (Bit_uint64.(<=) (#"strnchr.jc" 440 38 51# "expl:Integer cast"
               (Bit_uint64.of_int_const 0)) !mutable_count))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
              (Bit_uint64.(<=) !mutable_count !ocount)))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
               (same_block !os !mutable_s_0_0))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
               ((<=) (sub_pointer !os !mutable_s_0_0) (0)))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
              ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
               (same_block !mutable_s_0_0
               (shift !os
               (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8)))))
              /\
              (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              ((<=)
              (sub_pointer !mutable_s_0_0
              (shift !os
              (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))))
              (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
              ((=) (sub_pointer !mutable_s_0_0 !os)
              (Int.(-) (Bit_uint64.to_int !ocount)
              (Bit_uint64.to_int !mutable_count))))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
              (valid_strn !mutable_s_0_0 !mutable_count
              voidP_s_0_8_alloc_table charP_charM_s_0_8))
             &&
             ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
              ((=)
              (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))
              (Int.(+) (sub_pointer !mutable_s_0_0 !os)
              (Bit_uint64.to_int
              (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))))
             &&
             (#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_4 : (pointer voidP).
              (((same_block !os p_4) /\
               (((<=) (sub_pointer !os p_4) (0)) /\
               ((same_block p_4 !mutable_s_0_0) /\
               ((<) (sub_pointer p_4 !mutable_s_0_0) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_0_8 p_4)
               (#"strnchr.jc" 468 43 55# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c))))))))))) } 
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            begin
            (tmp := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"strnchr.jc" 474 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp
              (#"strnchr.jc" 477 45 58# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
               (#"strnchr.jc" 481 68 80# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c )) )) ))
             then
              begin
              (__retres := !mutable_s_0_0); (raise (Return_label_exc ())) end
             else ());
             (mutable_s_0_0 :=
              (shift_  !mutable_s_0_0
               (Unsafe_bit_int32.to_int 
                (#"strnchr.jc" 490 44 56# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: begin (); (__retres := (null  )) end
       end; (raise (Return_label_exc ())) end with Return_label_exc _jessie_2
      ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_exists
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior exists" =
  fun
   (s_0_0 : (pointer voidP)) (count : Uint64.t) (c : Int32.t)
   (voidP_s_0_8_alloc_table : (alloc_table voidP)) (voidP_s_0_8_tag_table :
   (tag_table voidP)) (charP_charM_s_0_8 : (memory voidP Int8.t)) 
   requires {
   ((exists p_0 : (pointer voidP).
     ((same_block s_0_0 p_0) /\
     (((<=) (sub_pointer s_0_0 p_0) (0)) /\
     ((same_block p_0
      (shift s_0_0
      (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
     /\
     (((<)
      (sub_pointer p_0
      (shift s_0_0
      (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0))
     /\
     (Bit_int8.(=) (select charP_charM_s_0_8 p_0) (#"strnchr.jc" 344 28 40#
     "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c))))))))
   /\
   (((allocated voidP_s_0_8_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_8_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_8_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_8_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_8_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_0_0 count voidP_s_0_8_alloc_table charP_charM_s_0_8)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
      "expl:Ensures clause" (same_block s_0_0 result))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
      "expl:Ensures clause" ((<=) (sub_pointer s_0_0 result) (0)))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      (same_block result
      (shift s_0_0
      (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
      "expl:Ensures clause"
      ((<=)
      (sub_pointer result
      (shift s_0_0
      (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
      "expl:Ensures clause"
      (Bit_int8.(=) (select charP_charM_s_0_8 result)
      (#"strnchr.jc" 357 49 70# "expl:Integer cast"
      (Bit_int8_of_Bit_int32.cast_modulo c))))
     /\
     (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
     "expl:Ensures clause"
     (forall p_1 : (pointer voidP).
      (((same_block s_0_0 p_1) /\
       (((<=) (sub_pointer s_0_0 p_1) (0)) /\
       ((same_block p_1 result) /\ ((<) (sub_pointer p_1 result) (0))))) ->
       (Bit_int8.(<>) (select charP_charM_s_0_8 p_1)
       (#"strnchr.jc" 365 50 71# "expl:Integer cast"
       (Bit_int8_of_Bit_int32.cast_modulo c)))))))))))))))))) } diverges  ->
   (let mutable_s_0_0 = ref s_0_0 in
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_0_0);
        begin
        (ocount := !mutable_count);
         'Loop_2:
         loop
         invariant { (#"strnchr.jc" 438 6 2798# true) } 
          begin
          any unit
          requires { true } reads { c, mutable_count, mutable_s_0_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_4 : (pointer voidP).
              (((same_block !os p_4) /\
               (((<=) (sub_pointer !os p_4) (0)) /\
               ((same_block p_4 !mutable_s_0_0) /\
               ((<) (sub_pointer p_4 !mutable_s_0_0) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_0_8 p_4)
               (#"strnchr.jc" 468 43 55# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=) (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))
             (Int.(+) (sub_pointer !mutable_s_0_0 !os)
             (Bit_uint64.to_int
             (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_0_0 !mutable_count
             voidP_s_0_8_alloc_table charP_charM_s_0_8))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_0_0 !os)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os !mutable_s_0_0))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os !mutable_s_0_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_0_0
              (shift !os
              (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_0_0
             (shift !os
             (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"strnchr.jc" 440 38 51# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"strnchr.jc" 474 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp
              (#"strnchr.jc" 477 45 58# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
               (#"strnchr.jc" 481 68 80# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c )) )) ))
             then
              begin
              (__retres := !mutable_s_0_0); (raise (Return_label_exc ())) end
             else ());
             (mutable_s_0_0 :=
              (shift_  !mutable_s_0_0
               (Unsafe_bit_int32.to_int 
                (#"strnchr.jc" 490 44 56# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: begin (); (__retres := (null  )) end
       end; (raise (Return_label_exc ())) end with Return_label_exc _jessie_2
      ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
  let strnchr_ensures_not_exists
  #"/home/work/workspace/self/verker/strnchr.c" 3 5 49#
  "expl:Function strnchr, behavior not_exists" =
  fun
   (s_0_0 : (pointer voidP)) (count : Uint64.t) (c : Int32.t)
   (voidP_s_0_8_alloc_table : (alloc_table voidP)) (voidP_s_0_8_tag_table :
   (tag_table voidP)) (charP_charM_s_0_8 : (memory voidP Int8.t)) 
   requires {
   ((forall p : (pointer voidP).
     (((same_block s_0_0 p) /\
      (((<=) (sub_pointer s_0_0 p) (0)) /\
      ((same_block p
       (shift s_0_0
       (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
      /\
      ((<)
      (sub_pointer p
      (shift s_0_0
      (Bit_uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))))
      ->
      (Bit_int8.(<>) (select charP_charM_s_0_8 p) (#"strnchr.jc" 372 26 38#
      "expl:Integer cast" (Bit_int8_of_Bit_int32.cast_modulo c)))))
   /\
   (((allocated voidP_s_0_8_alloc_table s_0_0) ->
     (((=) (typeof voidP_s_0_8_tag_table s_0_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_0_8_alloc_table s_0_0) i) /\
       ((<) i (offset_max voidP_s_0_8_alloc_table s_0_0))) ->
       ((=) (typeof voidP_s_0_8_tag_table (shift s_0_0 i)) charP_tag)))))
   /\
   (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
   (valid_strn s_0_0 count voidP_s_0_8_alloc_table charP_charM_s_0_8)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
     "expl:Ensures clause" ((=) result null))) } diverges  ->
   (let mutable_s_0_0 = ref s_0_0 in
   (let mutable_count = ref count in
   'Init:
   (let return = ref (any_pointer  () : (pointer voidP)) in
   try
    begin
    (); ();
     (let os = ref (any_pointer  () : (pointer voidP)) in
     (let ocount = ref (Unsafe_bit_uint64.any_  () ) in
     (let tmp = ref (Unsafe_bit_uint64.any_  () ) in
     (let __retres = ref (any_pointer  () : (pointer voidP)) in
     try
      begin
      try
       begin
       (os := !mutable_s_0_0);
        begin
        (ocount := !mutable_count);
         'Loop_3:
         loop
         invariant { (#"strnchr.jc" 438 6 2798# true) } 
          begin
          any unit
          requires { true } reads { c, mutable_count, mutable_s_0_0 }
          ensures {
            ((#"/home/work/workspace/self/verker/strnchr.c" 12 20 69#
             (forall p_4 : (pointer voidP).
              (((same_block !os p_4) /\
               (((<=) (sub_pointer !os p_4) (0)) /\
               ((same_block p_4 !mutable_s_0_0) /\
               ((<) (sub_pointer p_4 !mutable_s_0_0) (0))))) ->
               (Bit_int8.(<>) (select charP_charM_s_0_8 p_4)
               (#"strnchr.jc" 468 43 55# "expl:Integer cast"
               (Bit_int8_of_Bit_int32.cast_modulo c))))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 11 20 69#
             ((=) (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))
             (Int.(+) (sub_pointer !mutable_s_0_0 !os)
             (Bit_uint64.to_int
             (strnlen !mutable_s_0_0 !mutable_count charP_charM_s_0_8)))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 10 20 40#
             (valid_strn !mutable_s_0_0 !mutable_count
             voidP_s_0_8_alloc_table charP_charM_s_0_8))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 9 20 44#
             ((=) (sub_pointer !mutable_s_0_0 !os)
             (Int.(-) (Bit_uint64.to_int !ocount)
             (Bit_uint64.to_int !mutable_count))))
            /\
            ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              (same_block !os !mutable_s_0_0))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 20 27#
              ((<=) (sub_pointer !os !mutable_s_0_0) (0)))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 20 55#
             ((#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
              (same_block !mutable_s_0_0
              (shift !os
              (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8)))))
             /\
             (#"/home/work/workspace/self/verker/strnchr.c" 8 26 55#
             ((<=)
             (sub_pointer !mutable_s_0_0
             (shift !os
             (Bit_uint64.to_int (strnlen !os !ocount charP_charM_s_0_8))))
             (0))))))))))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            (#"/home/work/workspace/self/verker/strnchr.c" 7 20 40#
            ((#"/home/work/workspace/self/verker/strnchr.c" 7 20 30#
             (Bit_uint64.(<=) (#"strnchr.jc" 440 38 51# "expl:Integer cast"
             (Bit_uint64.of_int_const 0)) !mutable_count))
            /\
            (#"/home/work/workspace/self/verker/strnchr.c" 7 25 40#
            (Bit_uint64.(<=) !mutable_count !ocount)))))))))) } ;
           try
            begin
            begin
            begin
            (tmp := !mutable_count);
             begin
             (mutable_count :=
              (Unsafe_bit_uint64.(-%)  !mutable_count
               (#"strnchr.jc" 474 62 75# "expl:Integer cast"
               (Unsafe_bit_uint64.of_int_const 1)) )); () end end;
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 15 8 20#
             (Unsafe_bit_uint64.(<>)  !tmp
              (#"strnchr.jc" 477 45 58# "expl:Integer cast"
              (Unsafe_bit_uint64.of_int_const 0)) ))
             then
              (if
              (#"/home/work/workspace/self/verker/strnchr.c" 15 26 36#
              (Unsafe_bit_int32.(<>) 
               (#"/home/work/workspace/self/verker/strnchr.c" 15 26 28#
               "expl:Integer cast"
               (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
                (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
               (#"strnchr.jc" 481 68 80# "expl:Integer cast"
               (Unsafe_bit_int32.of_int_const 0)) )) then ()
              else (raise (Goto_while_0_break_exc ())))
             else (raise (Goto_while_0_break_exc ())));
             (if
             (#"/home/work/workspace/self/verker/strnchr.c" 16 6 25#
             (Unsafe_bit_int32.(=) 
              (#"/home/work/workspace/self/verker/strnchr.c" 16 6 8#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (acc  charP_charM_s_0_8 !mutable_s_0_0 ) ))
              (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
              "expl:Integer cast"
              (Unsafe_bit_int32_of_Unsafe_bit_int8.cast 
               (#"/home/work/workspace/self/verker/strnchr.c" 16 12 25#
               "expl:Integer cast"
               (Unsafe_bit_int8_of_Unsafe_bit_int32.cast_modulo  c )) )) ))
             then
              begin
              (__retres := !mutable_s_0_0); (raise (Return_label_exc ())) end
             else ());
             (mutable_s_0_0 :=
              (shift_  !mutable_s_0_0
               (Unsafe_bit_int32.to_int 
                (#"strnchr.jc" 490 44 56# "expl:Integer cast"
                (Unsafe_bit_int32.of_int_const 1)) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_4 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_1 ->
       'While_0_break: 'While_0_break: begin (); (__retres := (null  )) end
       end; (raise (Return_label_exc ())) end with Return_label_exc _jessie_2
      ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)))
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_strlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_0 : (pointer voidP)) 
   (voidP_s_4_alloc_table : (alloc_table voidP)) 
    (charP_charM_s_4 : (memory voidP Int8.t)) : Uint64.t
     requires { true }
     ensures {
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (Uint64.(=) result (strlen s_0 charP_charM_s_4)))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
        "expl:Ensures clause"
        (Int8.(=) (select charP_charM_s_4 (shift s_0 (Uint64.to_int result)))
        (#"strnchr.jc" 120 33 44# "expl:Integer cast" (Int8.of_int (0)))))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
       "expl:Ensures clause"
       (forall i_5 : int.
        ((((<=) (0) i_5) /\ ((<) i_5 (Uint64.to_int result))) ->
         (Int8.(<>) (select charP_charM_s_4 (shift s_0 i_5))
         (#"strnchr.jc" 124 65 76# "expl:Integer cast" (Int8.of_int (0))))))))))))
       }
  
end

module Function_strlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_0 : (pointer voidP)) 
   (voidP_s_4_alloc_table : (alloc_table voidP)) 
    (charP_charM_s_4 : (memory voidP Int8.t)) : Uint64.t
     requires {
       ("expl:External"
       (#"/home/work/workspace/self/verker/strlen.h" 80 13 25#
       "expl:Requires clause"
       (valid_str s_0 voidP_s_4_alloc_table charP_charM_s_4))) }
     ensures {
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (Uint64.(=) result (strlen s_0 charP_charM_s_4)))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
        "expl:Ensures clause"
        (Int8.(=) (select charP_charM_s_4 (shift s_0 (Uint64.to_int result)))
        (#"strnchr.jc" 120 33 44# "expl:Integer cast" (Int8.of_int (0)))))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
       "expl:Ensures clause"
       (forall i_5 : int.
        ((((<=) (0) i_5) /\ ((<) i_5 (Uint64.to_int result))) ->
         (Int8.(<>) (select charP_charM_s_4 (shift s_0 i_5))
         (#"strnchr.jc" 124 65 76# "expl:Integer cast" (Int8.of_int (0))))))))))))
       }
  
end

module Function_strnlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_1 : (pointer voidP)) 
   (count_0 : Uint64.t) 
    (voidP_s_1_7_alloc_table : (alloc_table voidP)) 
     (charP_charM_s_1_7 : (memory voidP Int8.t)) : Uint64.t
      requires { true }
      ensures {
        (((forall i_12 : int.
           ((((<=) (0) i_12) /\ ((<=) i_12 (Uint64.to_int count_0))) ->
            (Int8.(<>) (select charP_charM_s_1_7 (shift s_1 i_12))
            (#"strnchr.jc" 329 37 48# "expl:Integer cast" (Int8.of_int (0))))))
          ->
          (#"/home/work/workspace/self/verker/strnlen.h" 122 15 31#
          "expl:Ensures clause" (Uint64.(=) result count_0)))
        /\
        (((exists i_13 : int.
           (((<=) (0) i_13) /\
           (((<=) i_13 (Uint64.to_int count_0)) /\
           (Int8.(=) (select charP_charM_s_1_7 (shift s_1 i_13))
           (#"strnchr.jc" 318 37 48# "expl:Integer cast" (Int8.of_int (0)))))))
          ->
          (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           (Int8.(=)
           (select charP_charM_s_1_7 (shift s_1 (Uint64.to_int result)))
           (#"strnchr.jc" 320 31 42# "expl:Integer cast" (Int8.of_int (0)))))
          /\
          (#"/home/work/workspace/self/verker/strnlen.h" 119 15 67#
          "expl:Ensures clause"
          (forall i_14 : int.
           ((((<=) (0) i_14) /\ ((<) i_14 (Uint64.to_int result))) ->
            (Int8.(<>) (select charP_charM_s_1_7 (shift s_1 i_14))
            (#"strnchr.jc" 325 36 47# "expl:Integer cast" (Int8.of_int (0)))))))))))
        /\
        (#"/home/work/workspace/self/verker/strnlen.h" 115 12 40#
        "expl:Ensures clause"
        (Uint64.(=) result (strnlen s_1 count_0 charP_charM_s_1_7))))) }
  
end

module Function_strnlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnlen_0
  (s_1 : (pointer voidP)) 
   (count_0 : Uint64.t) 
    (voidP_s_1_7_alloc_table : (alloc_table voidP)) 
     (charP_charM_s_1_7 : (memory voidP Int8.t)) : Uint64.t
      requires {
        ("expl:External"
        (#"/home/work/workspace/self/verker/strnlen.h" 113 13 33#
        "expl:Requires clause"
        (valid_strn s_1 count_0 voidP_s_1_7_alloc_table charP_charM_s_1_7)))
        }
      ensures {
        (((forall i_12 : int.
           ((((<=) (0) i_12) /\ ((<=) i_12 (Uint64.to_int count_0))) ->
            (Int8.(<>) (select charP_charM_s_1_7 (shift s_1 i_12))
            (#"strnchr.jc" 329 37 48# "expl:Integer cast" (Int8.of_int (0))))))
          ->
          (#"/home/work/workspace/self/verker/strnlen.h" 122 15 31#
          "expl:Ensures clause" (Uint64.(=) result count_0)))
        /\
        (((exists i_13 : int.
           (((<=) (0) i_13) /\
           (((<=) i_13 (Uint64.to_int count_0)) /\
           (Int8.(=) (select charP_charM_s_1_7 (shift s_1 i_13))
           (#"strnchr.jc" 318 37 48# "expl:Integer cast" (Int8.of_int (0)))))))
          ->
          (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strnlen.h" 118 15 33#
           "expl:Ensures clause"
           (Int8.(=)
           (select charP_charM_s_1_7 (shift s_1 (Uint64.to_int result)))
           (#"strnchr.jc" 320 31 42# "expl:Integer cast" (Int8.of_int (0)))))
          /\
          (#"/home/work/workspace/self/verker/strnlen.h" 119 15 67#
          "expl:Ensures clause"
          (forall i_14 : int.
           ((((<=) (0) i_14) /\ ((<) i_14 (Uint64.to_int result))) ->
            (Int8.(<>) (select charP_charM_s_1_7 (shift s_1 i_14))
            (#"strnchr.jc" 325 36 47# "expl:Integer cast" (Int8.of_int (0)))))))))))
        /\
        (#"/home/work/workspace/self/verker/strnlen.h" 115 12 40#
        "expl:Ensures clause"
        (Uint64.(=) result (strnlen s_1 count_0 charP_charM_s_1_7))))) }
  
end

module Function_strnchr

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_0_0 : (pointer voidP)) 
   (count : Uint64.t) 
    (c : Int32.t) 
     (voidP_s_0_8_alloc_table : (alloc_table voidP)) 
      (voidP_s_0_8_tag_table : (tag_table voidP)) 
       (charP_charM_s_0_8 : (memory voidP Int8.t)) : (pointer voidP)
        requires { true }
        ensures {
          (((allocated voidP_s_0_8_alloc_table result) ->
            (((=) (typeof voidP_s_0_8_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_0_8_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_0_8_alloc_table result))) ->
              ((=) (typeof voidP_s_0_8_tag_table (shift result i)) charP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block s_0_0 p) /\
              (((<=) (sub_pointer s_0_0 p) (0)) /\
              ((same_block p
               (shift s_0_0
               (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
              /\
              ((<)
              (sub_pointer p
              (shift s_0_0
              (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_0_8 p)
              (#"strnchr.jc" 372 26 38# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c))))) ->
            (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block s_0_0 p_0) /\
            (((<=) (sub_pointer s_0_0 p_0) (0)) /\
            ((same_block p_0
             (shift s_0_0
             (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
            /\
            (((<)
             (sub_pointer p_0
             (shift s_0_0
             (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_0_8 p_0)
            (#"strnchr.jc" 344 28 40# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c)))))))) ->
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_0_0 result))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_0_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_0_0
            (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_0_0
            (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_0_8 result)
            (#"strnchr.jc" 357 49 70# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_1 : (pointer voidP).
            (((same_block s_0_0 p_1) /\
             (((<=) (sub_pointer s_0_0 p_1) (0)) /\
             ((same_block p_1 result) /\ ((<) (sub_pointer p_1 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_0_8 p_1)
             (#"strnchr.jc" 365 50 71# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c)))))))))))))))))))) }
  
end

module Function_strnchr_safe

  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use import Axiomatic_Strnlen 
  
  use why3.Bool.Bool 
  
  val strnchr
  (s_0_0 : (pointer voidP)) 
   (count : Uint64.t) 
    (c : Int32.t) 
     (voidP_s_0_8_alloc_table : (alloc_table voidP)) 
      (voidP_s_0_8_tag_table : (tag_table voidP)) 
       (charP_charM_s_0_8 : (memory voidP Int8.t)) : (pointer voidP)
        requires {
          ("expl:Internal"
          (#"/home/work/workspace/self/verker/strnchr.h" 14 13 33#
          "expl:Requires clause"
          (valid_strn s_0_0 count voidP_s_0_8_alloc_table charP_charM_s_0_8)))
          }
        ensures {
          (((allocated voidP_s_0_8_alloc_table result) ->
            (((=) (typeof voidP_s_0_8_tag_table result) charP_tag) /\
            (forall i : int.
             ((((<=) (offset_min voidP_s_0_8_alloc_table result) i) /\
              ((<) i (offset_max voidP_s_0_8_alloc_table result))) ->
              ((=) (typeof voidP_s_0_8_tag_table (shift result i)) charP_tag)))))
          /\
          (((forall p : (pointer voidP).
             (((same_block s_0_0 p) /\
              (((<=) (sub_pointer s_0_0 p) (0)) /\
              ((same_block p
               (shift s_0_0
               (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
              /\
              ((<)
              (sub_pointer p
              (shift s_0_0
              (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))))
              ->
              (Bit_int8.(<>) (select charP_charM_s_0_8 p)
              (#"strnchr.jc" 372 26 38# "expl:Integer cast"
              (Bit_int8_of_Bit_int32.cast_modulo c))))) ->
            (#"/home/work/workspace/self/verker/strnchr.h" 23 15 31#
            "expl:Ensures clause" ((=) result null)))
          /\
          ((exists p_0 : (pointer voidP).
            ((same_block s_0_0 p_0) /\
            (((<=) (sub_pointer s_0_0 p_0) (0)) /\
            ((same_block p_0
             (shift s_0_0
             (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8))))
            /\
            (((<)
             (sub_pointer p_0
             (shift s_0_0
             (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0))
            /\
            (Bit_int8.(=) (select charP_charM_s_0_8 p_0)
            (#"strnchr.jc" 344 28 40# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c)))))))) ->
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" (same_block s_0_0 result))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 15 27#
            "expl:Ensures clause" ((<=) (sub_pointer s_0_0 result) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            (same_block result
            (shift s_0_0
            (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 18 20 52#
            "expl:Ensures clause"
            ((<=)
            (sub_pointer result
            (shift s_0_0
            (Uint64.to_int (strnlen s_0_0 count charP_charM_s_0_8)))) (0)))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 18 15 52#
           "expl:Ensures clause"
           ((#"/home/work/workspace/self/verker/strnchr.h" 19 15 37#
            "expl:Ensures clause"
            (Bit_int8.(=) (select charP_charM_s_0_8 result)
            (#"strnchr.jc" 357 49 70# "expl:Integer cast"
            (Bit_int8_of_Bit_int32.cast_modulo c))))
           /\
           (#"/home/work/workspace/self/verker/strnchr.h" 20 15 69#
           "expl:Ensures clause"
           (forall p_1 : (pointer voidP).
            (((same_block s_0_0 p_1) /\
             (((<=) (sub_pointer s_0_0 p_1) (0)) /\
             ((same_block p_1 result) /\ ((<) (sub_pointer p_1 result) (0)))))
             ->
             (Bit_int8.(<>) (select charP_charM_s_0_8 p_1)
             (#"strnchr.jc" 365 50 71# "expl:Integer cast"
             (Bit_int8_of_Bit_int32.cast_modulo c)))))))))))))))))))) }
  
end
