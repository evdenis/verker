
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

theory Axiomatic_Strlen

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate valid_str (s : (pointer voidP)) (voidP_s_2_alloc_table_at_L :
  (alloc_table voidP)) (charP_charM_s_2_at_L : (memory voidP Int8.t))
  =
     (exists n_1 : Uint64.t.
      ((Int8.(=) (select charP_charM_s_2_at_L (shift s (Uint64.to_int n_1)))
       (#"strcspn.jc" 21 42 53# "expl:Integer cast" (Int8.of_int (0))))
      /\
      (if ((<=) (0) (Uint64.to_int n_1)) then
       (((<=) (offset_min voidP_s_2_alloc_table_at_L s) (0)) /\
       (((>=) (offset_max voidP_s_2_alloc_table_at_L s) (Uint64.to_int n_1))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1 (Uint64.to_int n_1))) -> ((=) true true)))))
       else ((=) true true))))
  
  
  lemma Valid_str_shift1
  #"/home/work/workspace/self/verker/strlen.h" 12 7 102#
  "expl:Lemma valid_str_shift1" :
  (forall voidP_s_0_14_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_0_14_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 12 7 102#
    (forall s_0_0 : (pointer voidP).
     (((Int8.(<>) (select charP_charM_s_0_14_at_L s_0_0)
       (#"strcspn.jc" 35 28 39# "expl:Integer cast" (Int8.of_int (0))))
      /\
      (valid_str s_0_0 voidP_s_0_14_alloc_table_at_L charP_charM_s_0_14_at_L))
      ->
      (valid_str (shift s_0_0 (1)) voidP_s_0_14_alloc_table_at_L
      charP_charM_s_0_14_at_L))))))
  
  lemma Valid_str_strend
  #"/home/work/workspace/self/verker/strlen.h" 18 7 87#
  "expl:Lemma valid_str_strend" :
  (forall voidP_s_1_15_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_1_15_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 18 7 87#
    (forall s_1_0 : (pointer voidP).
     (((((<=) (offset_min voidP_s_1_15_alloc_table_at_L s_1_0) (0)) /\
       (((>=) (offset_max voidP_s_1_15_alloc_table_at_L s_1_0) (0)) /\
       ((=) true true)))
      /\
      (Int8.(=) (select charP_charM_s_1_15_at_L s_1_0)
      (#"strcspn.jc" 43 29 40# "expl:Integer cast" (Int8.of_int (0))))) ->
      (valid_str s_1_0 voidP_s_1_15_alloc_table_at_L charP_charM_s_1_15_at_L))))))
  
  function strlen (s_2 : (pointer voidP)) (charP_charM_s_2_3_at_L : (memory
  voidP Int8.t)) : Uint64.t
  =
     (if
      (Int8.(=) (select charP_charM_s_2_3_at_L (shift s_2 (0)))
      (#"strcspn.jc" 47 30 41# "expl:Integer cast" (Int8.of_int (0)))) then
      (#"strcspn.jc" 47 48 61# "expl:Integer cast" (Uint64.of_int (0))) else
      (#"strcspn.jc" 47 67 255# "expl:Integer cast"
      (Uint64.of_int
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_2 (1)) charP_charM_s_2_3_at_L))))))
  
  
  lemma Strlen_before_null
  #"/home/work/workspace/self/verker/strlen.h" 26 7 106#
  "expl:Lemma strlen_before_null" :
  (forall voidP_s_3_16_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_3_16_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 26 7 106#
    (forall s_3_0 : (pointer voidP).
     (forall i : int.
      (((valid_str s_3_0 voidP_s_3_16_alloc_table_at_L
        charP_charM_s_3_16_at_L)
       /\
       (((<=) (0) i) /\
       ((<) i (Uint64.to_int (strlen s_3_0 charP_charM_s_3_16_at_L))))) ->
       (Int8.(<>) (select charP_charM_s_3_16_at_L (shift s_3_0 i))
       (#"strcspn.jc" 56 36 47# "expl:Integer cast" (Int8.of_int (0))))))))))
  
  lemma Strlen_at_null #"/home/work/workspace/self/verker/strlen.h" 31 7 71#
  "expl:Lemma strlen_at_null" :
  (forall voidP_s_4_17_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_4_17_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 31 7 71#
    (forall s_4 : (pointer voidP).
     ((valid_str s_4 voidP_s_4_17_alloc_table_at_L charP_charM_s_4_17_at_L)
      ->
      (Int8.(=)
      (select charP_charM_s_4_17_at_L
      (shift s_4 (Uint64.to_int (strlen s_4 charP_charM_s_4_17_at_L))))
      (#"strcspn.jc" 61 60 71# "expl:Integer cast" (Int8.of_int (0)))))))))
  
  lemma Strlen_shift #"/home/work/workspace/self/verker/strlen.h" 35 7 125#
  "expl:Lemma strlen_shift" :
  (forall voidP_s_5_18_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_5_18_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 35 7 125#
    (forall s_5 : (pointer voidP).
     (forall i_0 : Uint64.t.
      (((valid_str s_5 voidP_s_5_18_alloc_table_at_L charP_charM_s_5_18_at_L)
       /\ (Uint64.(<=) i_0 (strlen s_5 charP_charM_s_5_18_at_L))) ->
       ((=)
       (Uint64.to_int
       (strlen (shift s_5 (Uint64.to_int i_0)) charP_charM_s_5_18_at_L))
       (Int.(-) (Uint64.to_int (strlen s_5 charP_charM_s_5_18_at_L))
       (Uint64.to_int i_0)))))))))
  
  lemma Strlen_shift_ex
  #"/home/work/workspace/self/verker/strlen.h" 41 7 126#
  "expl:Lemma strlen_shift_ex" :
  (forall voidP_s_6_19_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_6_19_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 41 7 126#
    (forall s_6 : (pointer voidP).
     (forall i_1 : Uint64.t.
      (((valid_str s_6 voidP_s_6_19_alloc_table_at_L charP_charM_s_6_19_at_L)
       /\
       ((Uint64.(<) (#"strcspn.jc" 73 39 52# "expl:Integer cast"
        (Uint64.of_int (0))) i_1)
       /\ (Uint64.(<=) i_1 (strlen s_6 charP_charM_s_6_19_at_L)))) ->
       (Uint64.(<)
       (strlen (shift s_6 (Uint64.to_int i_1)) charP_charM_s_6_19_at_L)
       (strlen s_6 charP_charM_s_6_19_at_L))))))))
  
  lemma Strlen_shift1 #"/home/work/workspace/self/verker/strlen.h" 47 7 103#
  "expl:Lemma strlen_shift1" :
  (forall voidP_s_7_20_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_7_20_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 47 7 103#
    (forall s_7 : (pointer voidP).
     (((valid_str s_7 voidP_s_7_20_alloc_table_at_L charP_charM_s_7_20_at_L)
      /\
      (Int8.(<>) (select charP_charM_s_7_20_at_L s_7)
      (#"strcspn.jc" 79 49 60# "expl:Integer cast" (Int8.of_int (0))))) ->
      ((=) (Uint64.to_int (strlen s_7 charP_charM_s_7_20_at_L))
      (Int.(+) (1)
      (Uint64.to_int (strlen (shift s_7 (1)) charP_charM_s_7_20_at_L)))))))))
  
  lemma Strlen_pointers
  #"/home/work/workspace/self/verker/strlen.h" 52 7 254#
  "expl:Lemma strlen_pointers" :
  (forall voidP_s_8_21_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_8_21_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 52 7 254#
    (forall s_8 : (pointer voidP).
     (forall sc : (pointer voidP).
      (((valid_str s_8 voidP_s_8_21_alloc_table_at_L charP_charM_s_8_21_at_L)
       /\
       ((valid_str sc voidP_s_8_21_alloc_table_at_L charP_charM_s_8_21_at_L)
       /\
       ((same_block s_8 sc) /\
       ((same_block s_8 sc) /\
       (((<=) (sub_pointer s_8 sc) (0)) /\
       (forall i_2 : int.
        ((((<=) (0) i_2) /\ ((<=) i_2 (sub_pointer sc s_8))) ->
         (Int8.(<>) (select charP_charM_s_8_21_at_L (shift s_8 i_2))
         (#"strcspn.jc" 92 43 54# "expl:Integer cast" (Int8.of_int (0)))))))))))
       ->
       (Uint64.(<=) (strlen sc charP_charM_s_8_21_at_L)
       (strlen s_8 charP_charM_s_8_21_at_L))))))))
  
  lemma Strlen_main #"/home/work/workspace/self/verker/strlen.h" 61 7 165#
  "expl:Lemma strlen_main" :
  (forall voidP_s_9_23_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_9_23_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 61 7 165#
    (forall s_9 : (pointer voidP).
     (forall n_2 : Uint64.t.
      (((valid_str s_9 voidP_s_9_23_alloc_table_at_L charP_charM_s_9_23_at_L)
       /\
       ((Int8.(=)
        (select charP_charM_s_9_23_at_L (shift s_9 (Uint64.to_int n_2)))
        (#"strcspn.jc" 99 53 64# "expl:Integer cast" (Int8.of_int (0))))
       /\
       (forall i_3 : int.
        ((((<=) (0) i_3) /\ ((<) i_3 (Uint64.to_int n_2))) ->
         (Int8.(<>) (select charP_charM_s_9_23_at_L (shift s_9 i_3))
         (#"strcspn.jc" 102 43 54# "expl:Integer cast" (Int8.of_int (0))))))))
       -> (Uint64.(=) (strlen s_9 charP_charM_s_9_23_at_L) n_2)))))))
  
  lemma Valid_str_shiftn
  #"/home/work/workspace/self/verker/strlen.h" 68 7 123#
  "expl:Lemma valid_str_shiftn" :
  (forall voidP_s_10_24_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_10_24_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strlen.h" 68 7 123#
    (forall s_10 : (pointer voidP).
     (forall i_4 : int.
      (((valid_str s_10 voidP_s_10_24_alloc_table_at_L
        charP_charM_s_10_24_at_L)
       /\
       (((<=) (0) i_4) /\
       ((<) i_4 (Uint64.to_int (strlen s_10 charP_charM_s_10_24_at_L))))) ->
       (valid_str (shift s_10 i_4) voidP_s_10_24_alloc_table_at_L
       charP_charM_s_10_24_at_L)))))))
  
end

theory Axiomatic_StrSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  predicate in_array (s_11 : (pointer voidP)) (c : Int8.t)
  (charP_charM_s_11_5_at_L : (memory voidP Int8.t))
  =
     (exists p : (pointer voidP).
      ((same_block s_11 p) /\
      (((<=) (sub_pointer s_11 p) (0)) /\
      ((same_block p
       (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_5_at_L))))
      /\
      (((<)
       (sub_pointer p
       (shift s_11 (Uint64.to_int (strlen s_11 charP_charM_s_11_5_at_L))))
       (0))
      /\ (Int8.(=) (select charP_charM_s_11_5_at_L p) c))))))
  
  
  lemma In_array_shift1
  #"/home/work/workspace/self/verker/strspn.h" 17 7 129#
  "expl:Lemma in_array_shift1" :
  (forall voidP_s_12_26_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_12_26_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 17 7 129#
    (forall s_12 : (pointer voidP).
     (forall c_0 : Int8.t.
      ((((valid_str s_12 voidP_s_12_26_alloc_table_at_L
         charP_charM_s_12_26_at_L)
        /\
        (((<>) s_12 null) /\
        (Int8.(<>) (select charP_charM_s_12_26_at_L s_12) c_0))) ->
        (in_array s_12 c_0 charP_charM_s_12_26_at_L))
      <-> (in_array (shift s_12 (1)) c_0 charP_charM_s_12_26_at_L)))))))
  
  lemma In_array_true #"/home/work/workspace/self/verker/strspn.h" 21 7 105#
  "expl:Lemma in_array_true" :
  (forall voidP_s_13_28_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_13_28_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 21 7 105#
    (forall s_13 : (pointer voidP).
     (forall c_1 : Int8.t.
      (((valid_str s_13 voidP_s_13_28_alloc_table_at_L
        charP_charM_s_13_28_at_L)
       /\
       (((<>) s_13 null) /\
       (Int8.(=) (select charP_charM_s_13_28_at_L s_13) c_1))) ->
       (in_array s_13 c_1 charP_charM_s_13_28_at_L)))))))
  
  lemma In_array_false #"/home/work/workspace/self/verker/strspn.h" 25 7 95#
  "expl:Lemma in_array_false" :
  (forall voidP_s_14_30_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_14_30_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 25 7 95#
    (forall s_14 : (pointer voidP).
     (forall c_2 : Int8.t.
      (((valid_str s_14 voidP_s_14_30_alloc_table_at_L
        charP_charM_s_14_30_at_L)
       /\ ((=) s_14 null)) ->
       (not (in_array s_14 c_2 charP_charM_s_14_30_at_L))))))))
  
  function strspn (pointer voidP) (pointer voidP) : int
  
  
  lemma Strspn_strend #"/home/work/workspace/self/verker/strspn.h" 32 7 106#
  "expl:Lemma strspn_strend" :
  (forall voidP_s_15_6_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_15_6_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 32 7 106#
    (forall s_16 : (pointer voidP).
     (forall accept_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_15_6_alloc_table_at_L s_16) (0)) /\
        (((>=) (offset_max voidP_s_15_6_alloc_table_at_L s_16) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_15_6_at_L s_16)
       (#"strcspn.jc" 167 33 44# "expl:Integer cast" (Int8.of_int (0))))) ->
       ((=) (strspn s_16 accept_0_0) (0))))))))
  
  lemma Strspn_empty_accept
  #"/home/work/workspace/self/verker/strspn.h" 37 7 116#
  "expl:Lemma strspn_empty_accept" :
  (forall voidP_accept_7_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_accept_7_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strspn.h" 37 7 116#
    (forall s_17 : (pointer voidP).
     (forall accept_1 : (pointer voidP).
      (((((<=) (offset_min voidP_accept_7_alloc_table_at_L accept_1) (0)) /\
        (((>=) (offset_max voidP_accept_7_alloc_table_at_L accept_1) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_accept_7_at_L accept_1)
       (#"strcspn.jc" 176 37 48# "expl:Integer cast" (Int8.of_int (0))))) ->
       ((=) (strspn s_17 accept_1) (0))))))))
  
  lemma Strspn_range #"/home/work/workspace/self/verker/strspn.h" 42 7 129#
  "expl:Lemma strspn_range" :
  (forall voidP_accept_7_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_6_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_7_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_6_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 42 7 129#
      (forall s_18 : (pointer voidP).
       (forall accept_2 : (pointer voidP).
        (((valid_str s_18 voidP_s_15_6_alloc_table_at_L
          charP_charM_s_15_6_at_L)
         /\
         (valid_str accept_2 voidP_accept_7_alloc_table_at_L
         charP_charM_accept_7_at_L)) ->
         (((<=) (0) (strspn s_18 accept_2)) /\
         ((<=) (strspn s_18 accept_2)
         (Uint64.to_int (strlen s_18 charP_charM_s_15_6_at_L))))))))))))
  
  lemma Strspn_shift1 #"/home/work/workspace/self/verker/strspn.h" 47 7 188#
  "expl:Lemma strspn_shift1" :
  (forall voidP_accept_7_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_6_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_7_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_6_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 47 7 188#
      (forall s_19 : (pointer voidP).
       (forall accept_3 : (pointer voidP).
        (((valid_str s_19 voidP_s_15_6_alloc_table_at_L
          charP_charM_s_15_6_at_L)
         /\
         ((valid_str accept_3 voidP_accept_7_alloc_table_at_L
          charP_charM_accept_7_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_15_6_at_L s_19)
          (#"strcspn.jc" 190 34 45# "expl:Integer cast" (Int8.of_int (0))))
         /\
         (in_array accept_3 (select charP_charM_s_15_6_at_L s_19)
         charP_charM_accept_7_at_L)))) ->
         ((=) (strspn s_19 accept_3)
         (Int.(+) (strspn (shift s_19 (1)) accept_3) (1)))))))))))
  
  lemma Strspn_stop_not_in_accept
  #"/home/work/workspace/self/verker/strspn.h" 53 7 165#
  "expl:Lemma strspn_stop_not_in_accept" :
  (forall voidP_accept_7_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_15_6_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_accept_7_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_15_6_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strspn.h" 53 7 165#
      (forall s_20 : (pointer voidP).
       (forall accept_4 : (pointer voidP).
        (((valid_str s_20 voidP_s_15_6_alloc_table_at_L
          charP_charM_s_15_6_at_L)
         /\
         ((valid_str accept_4 voidP_accept_7_alloc_table_at_L
          charP_charM_accept_7_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_15_6_at_L s_20)
          (#"strcspn.jc" 199 34 45# "expl:Integer cast" (Int8.of_int (0))))
         /\
         (not
         (in_array accept_4 (select charP_charM_s_15_6_at_L s_20)
         charP_charM_accept_7_at_L))))) -> ((=) (strspn s_20 accept_4) (0))))))))))
  
end

theory Axiomatic_StrCSpn

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  function strcspn (pointer voidP) (pointer voidP) : int
  
  
  lemma Strcspn_strend
  #"/home/work/workspace/self/verker/strcspn.h" 18 7 107#
  "expl:Lemma strcspn_strend" :
  (forall voidP_s_21_10_alloc_table_at_L : (alloc_table voidP).
   (forall charP_charM_s_21_10_at_L : (memory voidP Int8.t).
    (#"/home/work/workspace/self/verker/strcspn.h" 18 7 107#
    (forall s_22 : (pointer voidP).
     (forall reject_0_0 : (pointer voidP).
      (((((<=) (offset_min voidP_s_21_10_alloc_table_at_L s_22) (0)) /\
        (((>=) (offset_max voidP_s_21_10_alloc_table_at_L s_22) (0)) /\
        ((=) true true)))
       /\
       (Int8.(=) (select charP_charM_s_21_10_at_L s_22)
       (#"strcspn.jc" 263 33 44# "expl:Integer cast" (Int8.of_int (0))))) ->
       ((=) (strcspn s_22 reject_0_0) (0))))))))
  
  lemma Strcspn_empty_reject
  #"/home/work/workspace/self/verker/strcspn.h" 23 7 144#
  "expl:Lemma strcspn_empty_reject" :
  (forall voidP_reject_11_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_10_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_11_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_10_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 23 7 144#
      (forall s_23 : (pointer voidP).
       (forall reject_1 : (pointer voidP).
        (((valid_str s_23 voidP_s_21_10_alloc_table_at_L
          charP_charM_s_21_10_at_L)
         /\
         ((valid_str reject_1 voidP_reject_11_alloc_table_at_L
          charP_charM_reject_11_at_L)
         /\
         (Int8.(=) (select charP_charM_reject_11_at_L reject_1)
         (#"strcspn.jc" 270 37 48# "expl:Integer cast" (Int8.of_int (0))))))
         ->
         ((=) (strcspn s_23 reject_1)
         (Uint64.to_int (strlen s_23 charP_charM_s_21_10_at_L)))))))))))
  
  lemma Strcspn_range #"/home/work/workspace/self/verker/strcspn.h" 28 7 130#
  "expl:Lemma strcspn_range" :
  (forall voidP_reject_11_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_10_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_11_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_10_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 28 7 130#
      (forall s_24 : (pointer voidP).
       (forall reject_2 : (pointer voidP).
        (((valid_str s_24 voidP_s_21_10_alloc_table_at_L
          charP_charM_s_21_10_at_L)
         /\
         (valid_str reject_2 voidP_reject_11_alloc_table_at_L
         charP_charM_reject_11_at_L)) ->
         (((<=) (0) (strcspn s_24 reject_2)) /\
         ((<=) (strcspn s_24 reject_2)
         (Uint64.to_int (strlen s_24 charP_charM_s_21_10_at_L))))))))))))
  
  lemma Strcspn_shift1
  #"/home/work/workspace/self/verker/strcspn.h" 33 7 191#
  "expl:Lemma strcspn_shift1" :
  (forall voidP_reject_11_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_10_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_11_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_10_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 33 7 191#
      (forall s_25 : (pointer voidP).
       (forall reject_3 : (pointer voidP).
        (((valid_str s_25 voidP_s_21_10_alloc_table_at_L
          charP_charM_s_21_10_at_L)
         /\
         ((valid_str reject_3 voidP_reject_11_alloc_table_at_L
          charP_charM_reject_11_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_10_at_L s_25)
          (#"strcspn.jc" 284 34 45# "expl:Integer cast" (Int8.of_int (0))))
         /\
         (not
         (in_array reject_3 (select charP_charM_s_21_10_at_L s_25)
         charP_charM_reject_11_at_L))))) ->
         ((=) (strcspn s_25 reject_3)
         (Int.(+) (strcspn (shift s_25 (1)) reject_3) (1)))))))))))
  
  lemma Strcspn_stop_in_reject
  #"/home/work/workspace/self/verker/strcspn.h" 39 7 165#
  "expl:Lemma strcspn_stop_in_reject" :
  (forall voidP_reject_11_alloc_table_at_L : (alloc_table voidP).
   (forall voidP_s_21_10_alloc_table_at_L : (alloc_table voidP).
    (forall charP_charM_reject_11_at_L : (memory voidP Int8.t).
     (forall charP_charM_s_21_10_at_L : (memory voidP Int8.t).
      (#"/home/work/workspace/self/verker/strcspn.h" 39 7 165#
      (forall s_26 : (pointer voidP).
       (forall reject_4 : (pointer voidP).
        (((valid_str s_26 voidP_s_21_10_alloc_table_at_L
          charP_charM_s_21_10_at_L)
         /\
         ((valid_str reject_4 voidP_reject_11_alloc_table_at_L
          charP_charM_reject_11_at_L)
         /\
         ((Int8.(<>) (select charP_charM_s_21_10_at_L s_26)
          (#"strcspn.jc" 293 34 45# "expl:Integer cast" (Int8.of_int (0))))
         /\
         (in_array reject_4 (select charP_charM_s_21_10_at_L s_26)
         charP_charM_reject_11_at_L)))) -> ((=) (strcspn s_26 reject_4) (0))))))))))
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_strcspn_0_safety
#"/home/work/workspace/self/verker/strcspn.c" 3 7 49# "expl:strcspn, safety"

  use enum.Uint64 
  
  use Safe_uint64 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_0 #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, safety" =
  fun
   (s_3 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_12_alloc_table : (alloc_table voidP))
   (voidP_reject_13_alloc_table : (alloc_table voidP))
   (voidP_reject_13_tag_table : (tag_table voidP)) (voidP_s_12_tag_table :
   (tag_table voidP)) (charP_charM_s_12 : (memory voidP Int8.t))
   (charP_charM_reject_13 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_13_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_13_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_13_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_13_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_13_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_12_alloc_table s_3) ->
     (((=) (typeof voidP_s_12_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_12_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_12_alloc_table s_3))) ->
       ((=) (typeof voidP_s_12_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"strcspn.jc" 300 12 92#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_3 voidP_s_12_alloc_table charP_charM_s_12))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_13_alloc_table charP_charM_reject_13))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count = ref (Safe_uint64.any_  () ) in
     (let __retres = ref (Safe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count :=
        (let _jessie_41 =
        (#"strcspn.jc" 482 24 37# "expl:Integer cast"
        (Safe_uint64.of_int (0))) in
        begin
        (assert {
        (#"/home/work/workspace/self/verker/strcspn.c" 7 8 13#
        "expl:Pointer index bounds" true) }); _jessie_41 end));
        begin
        (p_4 :=
         (let _jessie_35 = s_3 in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcspn.c" 19 6 11#
         "expl:Pointer index bounds" true) }); _jessie_35 end));
         'Loop_7:
         loop
         invariant { (#"strcspn.jc" 485 6 5646# true) }
           variant { (#"/home/work/workspace/self/verker/strcspn.c" 17 18 37#
             (Int.(-) (Uint64.to_int (strlen s_3 charP_charM_s_12))
             (sub_pointer !p_4 s_3))) }
          begin
          any unit
          requires { true } reads { reject_0, s_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_3 reject_0)
             (Int.(+) (strcspn !p_4 reject_0) (Uint64.to_int !count))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_4 voidP_s_12_alloc_table charP_charM_s_12))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_3 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_3 c_3) /\
                (((<=) (sub_pointer s_3 c_3) (0)) /\
                ((same_block c_3 !p_4) /\
                (((<) (sub_pointer c_3 !p_4) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_12 c_3)
                (select charP_charM_reject_13 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count) (sub_pointer !p_4 s_3)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"strcspn.jc" 497 38 51# "expl:Integer cast"
              (Uint64.of_int (0))) !count))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count (strlen s_3 charP_charM_s_12))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_3 !p_4))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_3 !p_4) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_4
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_4
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Safe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Safe_int32_of_Safe_int8.cast 
              (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
              "expl:Pointer dereference"
              (acc  voidP_s_12_alloc_table charP_charM_s_12 !p_4 )) ))
             (#"strcspn.jc" 527 27 39# "expl:Integer cast"
             (Safe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r :=
               (let _jessie_36 = reject_0 in
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcspn.c" 26 7 17#
               "expl:Pointer index bounds" true) }); _jessie_36 end));
               'Loop_8:
               loop
               invariant { (#"strcspn.jc" 532 15 2789# true) }
                 variant {
                   (#"/home/work/workspace/self/verker/strcspn.c" 24 19 48#
                   (Int.(-)
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_13))
                   (sub_pointer !r reject_0))) }
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13) ->
                    (in_array !r (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_13_alloc_table
                   charP_charM_reject_13))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_4 : (pointer voidP).
                    (((same_block reject_0 c_4) /\
                     (((<=) (sub_pointer reject_0 c_4) (0)) /\
                     ((same_block c_4 !r) /\ ((<) (sub_pointer c_4 !r) (0)))))
                     ->
                     (Int8.(<>) (select charP_charM_reject_13 c_4)
                     (select charP_charM_s_12 !p_4)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Safe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Safe_int32_of_Safe_int8.cast 
                    (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                    "expl:Pointer dereference"
                    (acc  voidP_reject_13_alloc_table charP_charM_reject_13
                     !r )) ))
                   (#"strcspn.jc" 563 36 48# "expl:Integer cast"
                   (Safe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Safe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                     "expl:Pointer dereference"
                     (acc  voidP_s_12_alloc_table charP_charM_s_12 !p_4 )) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Safe_int32_of_Safe_int8.cast 
                     (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                     "expl:Pointer dereference"
                     (acc  voidP_reject_13_alloc_table charP_charM_reject_13
                      !r )) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_12 !p_4)
                      charP_charM_reject_13)) } ; () end;
                     begin
                     (__retres :=
                      (let _jessie_37 = !count in
                      begin
                      (assert {
                      (#"/home/work/workspace/self/verker/strcspn.c" 29 4 17#
                      "expl:Pointer index bounds" true) }); _jessie_37 end));
                      (raise (Return_label_exc ())) end end else ());
                   (r :=
                    (let _jessie_38 =
                    (shift_typesafe  !r
                     (Safe_int32.to_int 
                      (#"strcspn.jc" 581 49 61# "expl:Integer cast"
                      (Safe_int32.of_int (1))) ) ) in
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker/strcspn.c" 26 31 34#
                    "expl:Pointer index bounds" true) }); _jessie_38 end))
                  end; (raise (Loop_continue_exc ())) end with
                  Loop_continue_exc _jessie_5 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_1 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_12 !p_4)
                 charP_charM_reject_13))) } ; () end;
               (count :=
                (let _jessie_39 =
                (Safe_uint64.(+)  !count
                 (#"strcspn.jc" 591 61 74# "expl:Integer cast"
                 (Safe_uint64.of_int (1))) ) in
                begin
                (assert {
                (#"/home/work/workspace/self/verker/strcspn.c" 32 2 9#
                "expl:Pointer index bounds" true) }); _jessie_39 end)) end
              end;
             (p_4 :=
              (let _jessie_40 =
              (shift_typesafe  !p_4
               (Safe_int32.to_int 
                (#"strcspn.jc" 593 40 52# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) ) in
              begin
              (assert {
              (#"/home/work/workspace/self/verker/strcspn.c" 19 25 28#
              "expl:Pointer index bounds" true) }); _jessie_40 end)) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_7 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_2 ->
       'While_0_break:
       'While_0_break:
       begin
       ();
        (__retres :=
         (let _jessie_42 = !count in
         begin
         (assert {
         (#"/home/work/workspace/self/verker/strcspn.c" 34 1 14#
         "expl:Pointer index bounds" true) }); _jessie_42 end)) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_43 = !__retres in
       begin
       (assert { (#"strcspn.jc" 599 7 22# "expl:Pointer index bounds" true)
       }); _jessie_43 end)); (raise Return) end end)))); absurd  end with
    Return -> !return end)
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Function_strcspn_0_behaviors
#"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
"expl:strcspn, behaviors"

  use Unsafe_uint64 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use enum.Uint64 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_charp_tag_id 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  let strcspn_ensures_default
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, default behavior" =
  fun
   (s_3 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_12_alloc_table : (alloc_table voidP))
   (voidP_reject_13_alloc_table : (alloc_table voidP))
   (voidP_reject_13_tag_table : (tag_table voidP)) (voidP_s_12_tag_table :
   (tag_table voidP)) (charP_charM_s_12 : (memory voidP Int8.t))
   (charP_charM_reject_13 : (memory voidP Int8.t)) 
   requires {
   (((allocated voidP_reject_13_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_13_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_13_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_13_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_13_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_12_alloc_table s_3) ->
     (((=) (typeof voidP_s_12_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_12_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_12_alloc_table s_3))) ->
       ((=) (typeof voidP_s_12_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"strcspn.jc" 300 12 92#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_3 voidP_s_12_alloc_table charP_charM_s_12))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_13_alloc_table charP_charM_reject_13))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
      "expl:Ensures clause"
      ((=) (Uint64.to_int result) (strcspn s_3 reject_0)))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
      "expl:Ensures clause"
      (Uint64.(<=) (#"strcspn.jc" 306 33 46# "expl:Integer cast"
      (Uint64.of_int (0))) result))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
     "expl:Ensures clause"
     ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
      "expl:Ensures clause"
      (Uint64.(<=) result (strlen s_3 charP_charM_s_12)))
     /\
     (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
     "expl:Ensures clause"
     (forall p_3 : (pointer voidP).
      (forall t_4 : (pointer voidP).
       (((same_block s_3 p_3) /\
        (((<=) (sub_pointer s_3 p_3) (0)) /\
        ((same_block p_3 (shift s_3 (Uint64.to_int result))) /\
        (((<) (sub_pointer p_3 (shift s_3 (Uint64.to_int result))) (0)) /\
        ((same_block reject_0 t_4) /\
        (((<=) (sub_pointer reject_0 t_4) (0)) /\
        ((same_block t_4
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
        /\
        ((<)
        (sub_pointer t_4
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
        ->
        (Int8.(<>) (select charP_charM_s_12 p_3)
        (select charP_charM_reject_13 t_4)))))))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (check {
    (#"strcspn.jc" 372 10 3417# "expl:Behavior disjointness check"
    (not
    ((exists p_2_0 : (pointer voidP).
      (exists t_2_0 : (pointer voidP).
       ((same_block s_3 p_2_0) /\
       (((<=) (sub_pointer s_3 p_2_0) (0)) /\
       ((same_block p_2_0
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
       /\
       (((<)
        (sub_pointer p_2_0
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
       /\
       ((same_block reject_0 t_2_0) /\
       (((<=) (sub_pointer reject_0 t_2_0) (0)) /\
       ((same_block t_2_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
       /\
       (((<)
        (sub_pointer t_2_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_12 p_2_0)
       (select charP_charM_reject_13 t_2_0))))))))))))
    /\
    (forall p_1_0 : (pointer voidP).
     (forall t_1_0 : (pointer voidP).
      (((same_block s_3 p_1_0) /\
       (((<=) (sub_pointer s_3 p_1_0) (0)) /\
       ((same_block p_1_0
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
       /\
       (((<)
        (sub_pointer p_1_0
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
       /\
       ((same_block reject_0 t_1_0) /\
       (((<=) (sub_pointer reject_0 t_1_0) (0)) /\
       ((same_block t_1_0
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
       /\
       ((<)
       (sub_pointer t_1_0
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_12 p_1_0)
       (select charP_charM_reject_13 t_1_0)))))))) });
     (check {
     (#"strcspn.jc" 423 10 3266# "expl:Behavior completeness check"
     ((forall p_1_1 : (pointer voidP).
       (forall t_1_1 : (pointer voidP).
        (((same_block s_3 p_1_1) /\
         (((<=) (sub_pointer s_3 p_1_1) (0)) /\
         ((same_block p_1_1
          (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
         /\
         (((<)
          (sub_pointer p_1_1
          (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
         /\
         ((same_block reject_0 t_1_1) /\
         (((<=) (sub_pointer reject_0 t_1_1) (0)) /\
         ((same_block t_1_1
          (shift reject_0
          (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
         /\
         ((<)
         (sub_pointer t_1_1
         (shift reject_0
         (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
         ->
         (Int8.(<>) (select charP_charM_s_12 p_1_1)
         (select charP_charM_reject_13 t_1_1)))))
     \/
     (exists p_2_1 : (pointer voidP).
      (exists t_2_1 : (pointer voidP).
       ((same_block s_3 p_2_1) /\
       (((<=) (sub_pointer s_3 p_2_1) (0)) /\
       ((same_block p_2_1
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
       /\
       (((<)
        (sub_pointer p_2_1
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
       /\
       ((same_block reject_0 t_2_1) /\
       (((<=) (sub_pointer reject_0 t_2_1) (0)) /\
       ((same_block t_2_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
       /\
       (((<)
        (sub_pointer t_2_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0))
       /\
       (Int8.(=) (select charP_charM_s_12 p_2_1)
       (select charP_charM_reject_13 t_2_1)))))))))))))) });
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count = ref (Unsafe_uint64.any_  () ) in
     (let __retres = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count :=
        (#"strcspn.jc" 482 24 37# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_4 := s_3);
         'Loop_1:
         loop
         invariant
           { ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
               (same_block s_3 !p_4))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
               ((<=) (sub_pointer s_3 !p_4) (0)))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
               (same_block !p_4
               (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
              ((<=)
              (sub_pointer !p_4
              (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))))))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
              (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
              ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
               (Uint64.(<=) (#"strcspn.jc" 497 38 51# "expl:Integer cast"
               (Uint64.of_int (0))) !count))
              /\
              (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
              (Uint64.(<=) !count (strlen s_3 charP_charM_s_12))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
              ((=) (Uint64.to_int !count) (sub_pointer !p_4 s_3)))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
              (forall c_3 : (pointer voidP).
               (forall t_5 : (pointer voidP).
                (((same_block s_3 c_3) /\
                 (((<=) (sub_pointer s_3 c_3) (0)) /\
                 ((same_block c_3 !p_4) /\
                 (((<) (sub_pointer c_3 !p_4) (0)) /\
                 ((same_block reject_0 t_5) /\
                 (((<=) (sub_pointer reject_0 t_5) (0)) /\
                 ((same_block t_5
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 /\
                 ((<)
                 (sub_pointer t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_12 c_3)
                 (select charP_charM_reject_13 t_5))))))
             &&
             ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
              (valid_str !p_4 voidP_s_12_alloc_table charP_charM_s_12))
             &&
             (#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_3 reject_0)
             (Int.(+) (strcspn !p_4 reject_0) (Uint64.to_int !count))))))))) }
           
          begin
          any unit requires { true } ensures { true } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_s_12 !p_4 )
              ))
             (#"strcspn.jc" 527 27 39# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_2:
               loop
               invariant
                 { ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                     (same_block reject_0 !r))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                     ((<=) (sub_pointer reject_0 !r) (0)))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                    ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                     (same_block !r
                     (shift reject_0
                     (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))))
                    /\
                    (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                    ((<=)
                    (sub_pointer !r
                    (shift reject_0
                    (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                    (0))))))))))
                   &&
                   ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                    (forall c_4 : (pointer voidP).
                     (((same_block reject_0 c_4) /\
                      (((<=) (sub_pointer reject_0 c_4) (0)) /\
                      ((same_block c_4 !r) /\ ((<) (sub_pointer c_4 !r) (0)))))
                      ->
                      (Int8.(<>) (select charP_charM_reject_13 c_4)
                      (select charP_charM_s_12 !p_4)))))
                   &&
                   ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                    (valid_str !r voidP_reject_13_alloc_table
                    charP_charM_reject_13))
                   &&
                   (#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13) ->
                    (in_array !r (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13)))))) } 
                begin
                any unit requires { true } ensures { true } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_13 !r ) ))
                   (#"strcspn.jc" 563 36 48# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_12 !p_4 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_13 !r ) )) ))
                   then
                    begin
                    begin
                    (assert {
                    (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                    "expl:Assertion in line 28"
                    (in_array reject_0 (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13)) }); () end;
                     begin
                     (__retres := !count); (raise (Return_label_exc ())) end
                    end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"strcspn.jc" 581 49 61# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_5 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_1 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               (assert {
               (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
               "expl:Assertion in line 31"
               (not
               (in_array reject_0 (select charP_charM_s_12 !p_4)
               charP_charM_reject_13))) }); () end;
               (count :=
                (Unsafe_uint64.(+)  !count
                 (#"strcspn.jc" 591 61 74# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_4 :=
              (shift_  !p_4
               (Unsafe_int32.to_int 
                (#"strcspn.jc" 593 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_7 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_2 ->
       'While_0_break: 'While_0_break: begin (); (__retres := !count) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_exists
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior exists" =
  fun
   (s_3 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_12_alloc_table : (alloc_table voidP))
   (voidP_reject_13_alloc_table : (alloc_table voidP))
   (voidP_reject_13_tag_table : (tag_table voidP)) (voidP_s_12_tag_table :
   (tag_table voidP)) (charP_charM_s_12 : (memory voidP Int8.t))
   (charP_charM_reject_13 : (memory voidP Int8.t)) 
   requires {
   ((exists p_2 : (pointer voidP).
     (exists t_2 : (pointer voidP).
      ((same_block s_3 p_2) /\
      (((<=) (sub_pointer s_3 p_2) (0)) /\
      ((same_block p_2
       (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
      /\
      (((<)
       (sub_pointer p_2
       (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
      /\
      ((same_block reject_0 t_2) /\
      (((<=) (sub_pointer reject_0 t_2) (0)) /\
      ((same_block t_2
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
      /\
      (((<)
       (sub_pointer t_2
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0))
      /\
      (Int8.(=) (select charP_charM_s_12 p_2)
      (select charP_charM_reject_13 t_2))))))))))))
   /\
   (((allocated voidP_reject_13_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_13_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_13_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_13_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_13_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_12_alloc_table s_3) ->
     (((=) (typeof voidP_s_12_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_12_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_12_alloc_table s_3))) ->
       ((=) (typeof voidP_s_12_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"strcspn.jc" 300 12 92#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_3 voidP_s_12_alloc_table charP_charM_s_12))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_13_alloc_table charP_charM_reject_13)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
     "expl:Ensures clause"
     (exists t_3 : (pointer voidP).
      ((same_block reject_0 t_3) /\
      (((<=) (sub_pointer reject_0 t_3) (0)) /\
      ((same_block t_3
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
      /\
      (((<)
       (sub_pointer t_3
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0))
      /\
      (Int8.(=) (select charP_charM_s_12 (shift s_3 (Uint64.to_int result)))
      (select charP_charM_reject_13 t_3))))))))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count = ref (Unsafe_uint64.any_  () ) in
     (let __retres = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count :=
        (#"strcspn.jc" 482 24 37# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_4 := s_3);
         'Loop_3:
         loop
         invariant { (#"strcspn.jc" 485 6 5646# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_3 reject_0)
             (Int.(+) (strcspn !p_4 reject_0) (Uint64.to_int !count))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_4 voidP_s_12_alloc_table charP_charM_s_12))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_3 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_3 c_3) /\
                (((<=) (sub_pointer s_3 c_3) (0)) /\
                ((same_block c_3 !p_4) /\
                (((<) (sub_pointer c_3 !p_4) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_12 c_3)
                (select charP_charM_reject_13 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count) (sub_pointer !p_4 s_3)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"strcspn.jc" 497 38 51# "expl:Integer cast"
              (Uint64.of_int (0))) !count))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count (strlen s_3 charP_charM_s_12))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_3 !p_4))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_3 !p_4) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_4
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_4
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_s_12 !p_4 )
              ))
             (#"strcspn.jc" 527 27 39# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_4:
               loop
               invariant { (#"strcspn.jc" 532 15 2789# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13) ->
                    (in_array !r (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_13_alloc_table
                   charP_charM_reject_13))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_4 : (pointer voidP).
                    (((same_block reject_0 c_4) /\
                     (((<=) (sub_pointer reject_0 c_4) (0)) /\
                     ((same_block c_4 !r) /\ ((<) (sub_pointer c_4 !r) (0)))))
                     ->
                     (Int8.(<>) (select charP_charM_reject_13 c_4)
                     (select charP_charM_s_12 !p_4)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_13 !r ) ))
                   (#"strcspn.jc" 563 36 48# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_12 !p_4 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_13 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_12 !p_4)
                      charP_charM_reject_13)) } ; () end;
                     begin
                     (__retres := !count); (raise (Return_label_exc ())) end
                    end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"strcspn.jc" 581 49 61# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_5 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_1 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_12 !p_4)
                 charP_charM_reject_13))) } ; () end;
               (count :=
                (Unsafe_uint64.(+)  !count
                 (#"strcspn.jc" 591 61 74# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_4 :=
              (shift_  !p_4
               (Unsafe_int32.to_int 
                (#"strcspn.jc" 593 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_7 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_2 ->
       'While_0_break: 'While_0_break: begin (); (__retres := !count) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
  let strcspn_ensures_not_exists
  #"/home/work/workspace/self/verker/strcspn.c" 3 7 49#
  "expl:Function strcspn, behavior not_exists" =
  fun
   (s_3 : (pointer voidP)) (reject_0 : (pointer voidP))
   (voidP_s_12_alloc_table : (alloc_table voidP))
   (voidP_reject_13_alloc_table : (alloc_table voidP))
   (voidP_reject_13_tag_table : (tag_table voidP)) (voidP_s_12_tag_table :
   (tag_table voidP)) (charP_charM_s_12 : (memory voidP Int8.t))
   (charP_charM_reject_13 : (memory voidP Int8.t)) 
   requires {
   ((forall p_1 : (pointer voidP).
     (forall t_1 : (pointer voidP).
      (((same_block s_3 p_1) /\
       (((<=) (sub_pointer s_3 p_1) (0)) /\
       ((same_block p_1
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
       /\
       (((<)
        (sub_pointer p_1
        (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0))
       /\
       ((same_block reject_0 t_1) /\
       (((<=) (sub_pointer reject_0 t_1) (0)) /\
       ((same_block t_1
        (shift reject_0
        (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
       /\
       ((<)
       (sub_pointer t_1
       (shift reject_0
       (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
       ->
       (Int8.(<>) (select charP_charM_s_12 p_1)
       (select charP_charM_reject_13 t_1)))))
   /\
   (((allocated voidP_reject_13_alloc_table reject_0) ->
     (((=) (typeof voidP_reject_13_tag_table reject_0) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_reject_13_alloc_table reject_0) i) /\
       ((<) i (offset_max voidP_reject_13_alloc_table reject_0))) ->
       ((=) (typeof voidP_reject_13_tag_table (shift reject_0 i)) charP_tag)))))
   /\
   (((allocated voidP_s_12_alloc_table s_3) ->
     (((=) (typeof voidP_s_12_tag_table s_3) charP_tag) /\
     (forall i : int.
      ((((<=) (offset_min voidP_s_12_alloc_table s_3) i) /\
       ((<) i (offset_max voidP_s_12_alloc_table s_3))) ->
       ((=) (typeof voidP_s_12_tag_table (shift s_3 i)) charP_tag)))))
   /\
   (#"strcspn.jc" 300 12 92#
   ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
    (valid_str s_3 voidP_s_12_alloc_table charP_charM_s_12))
   /\
   (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
   (valid_str reject_0 voidP_reject_13_alloc_table charP_charM_reject_13)))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
     "expl:Ensures clause" (Uint64.(=) result (strlen s_3 charP_charM_s_12))))
     } diverges  ->
   'Init:
   (let return = ref (Unsafe_uint64.any_  () ) in
   try
    begin
    (); ();
     (let p_4 = ref (any_pointer  () : (pointer voidP)) in
     (let r = ref (any_pointer  () : (pointer voidP)) in
     (let count = ref (Unsafe_uint64.any_  () ) in
     (let __retres = ref (Unsafe_uint64.any_  () ) in
     try
      begin
      try
       begin
       (count :=
        (#"strcspn.jc" 482 24 37# "expl:Integer cast"
        (Unsafe_uint64.of_int (0))));
        begin
        (p_4 := s_3);
         'Loop_5:
         loop
         invariant { (#"strcspn.jc" 485 6 5646# true) } 
          begin
          any unit
          requires { true } reads { reject_0, s_3 }
          ensures {
            ((#"/home/work/workspace/self/verker/strcspn.c" 16 20 68#
             ((=) (strcspn s_3 reject_0)
             (Int.(+) (strcspn !p_4 reject_0) (Uint64.to_int !count))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 15 20 32#
             (valid_str !p_4 voidP_s_12_alloc_table charP_charM_s_12))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 12 20 145#
             (forall c_3 : (pointer voidP).
              (forall t_5 : (pointer voidP).
               (((same_block s_3 c_3) /\
                (((<=) (sub_pointer s_3 c_3) (0)) /\
                ((same_block c_3 !p_4) /\
                (((<) (sub_pointer c_3 !p_4) (0)) /\
                ((same_block reject_0 t_5) /\
                (((<=) (sub_pointer reject_0 t_5) (0)) /\
                ((same_block t_5
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                /\
                ((<)
                (sub_pointer t_5
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                (0))))))))) ->
                (Int8.(<>) (select charP_charM_s_12 c_3)
                (select charP_charM_reject_13 t_5))))))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 11 20 34#
             ((=) (Uint64.to_int !count) (sub_pointer !p_4 s_3)))
            /\
            ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             (#"/home/work/workspace/self/verker/strcspn.c" 10 20 43#
             ((#"/home/work/workspace/self/verker/strcspn.c" 10 20 30#
              (Uint64.(<=) (#"strcspn.jc" 497 38 51# "expl:Integer cast"
              (Uint64.of_int (0))) !count))
             /\
             (#"/home/work/workspace/self/verker/strcspn.c" 10 25 43#
             (Uint64.(<=) !count (strlen s_3 charP_charM_s_12))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             (same_block s_3 !p_4))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 20 26#
             ((<=) (sub_pointer s_3 !p_4) (0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 20 43#
            ((#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
             (same_block !p_4
             (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.c" 9 25 43#
            ((<=)
            (sub_pointer !p_4
            (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12)))) (0)))))))))))))))
            } ;
           try
            begin
            begin
            (if
            (#"/home/work/workspace/self/verker/strcspn.c" 19 13 23#
            (Unsafe_int32.(<>) 
             (#"/home/work/workspace/self/verker/strcspn.c" 19 13 15#
             "expl:Integer cast"
             (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_s_12 !p_4 )
              ))
             (#"strcspn.jc" 527 27 39# "expl:Integer cast"
             (Unsafe_int32.of_int (0))) )) then ()
            else (raise (Goto_while_0_break_exc ())));
             try
              begin
              (r := reject_0);
               'Loop_6:
               loop
               invariant { (#"strcspn.jc" 532 15 2789# true) } 
                begin
                any unit
                requires { true } reads { reject_0 }
                ensures {
                  ((#"/home/work/workspace/self/verker/strcspn.c" 23 21 61#
                   ((in_array reject_0 (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13) ->
                    (in_array !r (select charP_charM_s_12 !p_4)
                    charP_charM_reject_13)))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 22 21 33#
                   (valid_str !r voidP_reject_13_alloc_table
                   charP_charM_reject_13))
                  /\
                  ((#"/home/work/workspace/self/verker/strcspn.c" 21 21 66#
                   (forall c_4 : (pointer voidP).
                    (((same_block reject_0 c_4) /\
                     (((<=) (sub_pointer reject_0 c_4) (0)) /\
                     ((same_block c_4 !r) /\ ((<) (sub_pointer c_4 !r) (0)))))
                     ->
                     (Int8.(<>) (select charP_charM_reject_13 c_4)
                     (select charP_charM_s_12 !p_4)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   (same_block reject_0 !r))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 21 32#
                   ((<=) (sub_pointer reject_0 !r) (0)))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 21 59#
                  ((#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                   (same_block !r
                   (shift reject_0
                   (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))))
                  /\
                  (#"/home/work/workspace/self/verker/strcspn.c" 20 31 59#
                  ((<=)
                  (sub_pointer !r
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                  (0))))))))))))) } ;
                 try
                  begin
                  begin
                  (if
                  (#"/home/work/workspace/self/verker/strcspn.c" 26 19 29#
                  (Unsafe_int32.(<>) 
                   (#"/home/work/workspace/self/verker/strcspn.c" 26 19 21#
                   "expl:Integer cast"
                   (Unsafe_int32_of_Unsafe_int8.cast 
                    (acc  charP_charM_reject_13 !r ) ))
                   (#"strcspn.jc" 563 36 48# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))) )) then ()
                  else (raise (Goto_while_1_break_exc ())));
                   (if
                   (#"/home/work/workspace/self/verker/strcspn.c" 27 7 15#
                   (Unsafe_int32.(=) 
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 7 9#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_s_12 !p_4 ) ))
                    (#"/home/work/workspace/self/verker/strcspn.c" 27 13 15#
                    "expl:Integer cast"
                    (Unsafe_int32_of_Unsafe_int8.cast 
                     (acc  charP_charM_reject_13 !r ) )) ))
                   then
                    begin
                    begin
                    any unit
                    requires { true } reads { reject_0 }
                    ensures {
                      (#"/home/work/workspace/self/verker/strcspn.c" 28 15 35#
                      (in_array reject_0 (select charP_charM_s_12 !p_4)
                      charP_charM_reject_13)) } ; () end;
                     begin
                     (__retres := !count); (raise (Return_label_exc ())) end
                    end else ());
                   (r :=
                    (shift_  !r
                     (Unsafe_int32.to_int 
                      (#"strcspn.jc" 581 49 61# "expl:Integer cast"
                      (Unsafe_int32.of_int (1))) ) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_5 -> () end end end;
               (raise (Goto_while_1_break_exc ())) end with
              Goto_while_1_break_exc _jessie_1 ->
              'While_1_break:
              'While_1_break:
              begin
              ();
               begin
               any unit
               requires { true } reads { reject_0 }
               ensures {
                 (#"/home/work/workspace/self/verker/strcspn.c" 31 13 34#
                 (not
                 (in_array reject_0 (select charP_charM_s_12 !p_4)
                 charP_charM_reject_13))) } ; () end;
               (count :=
                (Unsafe_uint64.(+)  !count
                 (#"strcspn.jc" 591 61 74# "expl:Integer cast"
                 (Unsafe_uint64.of_int (1))) )) end end;
             (p_4 :=
              (shift_  !p_4
               (Unsafe_int32.to_int 
                (#"strcspn.jc" 593 40 52# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ) )) end;
             (raise (Loop_continue_exc ())) end with Loop_continue_exc
            _jessie_7 -> () end end end; (raise (Goto_while_0_break_exc ()))
        end end with Goto_while_0_break_exc _jessie_2 ->
       'While_0_break: 'While_0_break: begin (); (__retres := !count) end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_3 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end))));
     absurd  end with Return -> !return end)
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_strlen_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_0 : (pointer voidP)) 
   (voidP_s_0_4_alloc_table : (alloc_table voidP)) 
    (charP_charM_s_0_4 : (memory voidP Int8.t)) : Uint64.t
     requires { true }
     ensures {
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (Uint64.(=) result (strlen s_0 charP_charM_s_0_4)))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
        "expl:Ensures clause"
        (Int8.(=)
        (select charP_charM_s_0_4 (shift s_0 (Uint64.to_int result)))
        (#"strcspn.jc" 120 33 44# "expl:Integer cast" (Int8.of_int (0)))))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
       "expl:Ensures clause"
       (forall i_5 : int.
        ((((<=) (0) i_5) /\ ((<) i_5 (Uint64.to_int result))) ->
         (Int8.(<>) (select charP_charM_s_0_4 (shift s_0 i_5))
         (#"strcspn.jc" 125 38 49# "expl:Integer cast" (Int8.of_int (0))))))))))))
       }
  
end

module Function_strlen_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use why3.Bool.Bool 
  
  val strlen_0
  (s_0 : (pointer voidP)) 
   (voidP_s_0_4_alloc_table : (alloc_table voidP)) 
    (charP_charM_s_0_4 : (memory voidP Int8.t)) : Uint64.t
     requires {
       ("expl:External"
       (#"/home/work/workspace/self/verker/strlen.h" 80 13 25#
       "expl:Requires clause"
       (valid_str s_0 voidP_s_0_4_alloc_table charP_charM_s_0_4))) }
     ensures {
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
        "expl:Ensures clause"
        (Uint64.(=) result (strlen s_0 charP_charM_s_0_4)))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 82 12 32#
       "expl:Ensures clause"
       ((#"/home/work/workspace/self/verker/strlen.h" 83 12 30#
        "expl:Ensures clause"
        (Int8.(=)
        (select charP_charM_s_0_4 (shift s_0 (Uint64.to_int result)))
        (#"strcspn.jc" 120 33 44# "expl:Integer cast" (Int8.of_int (0)))))
       /\
       (#"/home/work/workspace/self/verker/strlen.h" 84 12 64#
       "expl:Ensures clause"
       (forall i_5 : int.
        ((((<=) (0) i_5) /\ ((<) i_5 (Uint64.to_int result))) ->
         (Int8.(<>) (select charP_charM_s_0_4 (shift s_0 i_5))
         (#"strcspn.jc" 125 38 49# "expl:Integer cast" (Int8.of_int (0))))))))))))
       }
  
end

module Function_strspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_1 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_9_alloc_table : (alloc_table voidP)) 
     (voidP_s_1_8_alloc_table : (alloc_table voidP)) 
      (charP_charM_accept_9 : (memory voidP Int8.t)) 
       (charP_charM_s_1_8 : (memory voidP Int8.t)) : Uint64.t
        requires { true }
        ensures {
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 63 12 24#
           "expl:Ensures clause"
           (Uint64.(<=) (#"strcspn.jc" 210 31 44# "expl:Integer cast"
           (Uint64.of_int (0))) result))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 63 17 37#
           "expl:Ensures clause"
           (Uint64.(<=) result (strlen s_1 charP_charM_s_1_8)))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 64 12 87#
           "expl:Ensures clause"
           (forall t : (pointer voidP).
            (((same_block accept_0 t) /\
             (((<=) (sub_pointer accept_0 t) (0)) /\
             ((same_block t
              (shift accept_0
              (Uint64.to_int (strlen accept_0 charP_charM_accept_9))))
             /\
             ((<)
             (sub_pointer t
             (shift accept_0
             (Uint64.to_int (strlen accept_0 charP_charM_accept_9)))) (0)))))
             ->
             (Int8.(<>)
             (select charP_charM_s_1_8 (shift s_1 (Uint64.to_int result)))
             (select charP_charM_accept_9 t)))))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 65 12 134#
           "expl:Ensures clause"
           (forall p_0 : (pointer voidP).
            (((same_block s_1 p_0) /\
             (((<=) (sub_pointer s_1 p_0) (0)) /\
             ((same_block p_0 (shift s_1 (Uint64.to_int result))) /\
             ((<) (sub_pointer p_0 (shift s_1 (Uint64.to_int result))) (0)))))
             ->
             (exists t_0 : (pointer voidP).
              ((same_block accept_0 t_0) /\
              (((<=) (sub_pointer accept_0 t_0) (0)) /\
              ((same_block t_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_9))))
              /\
              (((<)
               (sub_pointer t_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_9)))) (0))
              /\
              (Int8.(=) (select charP_charM_s_1_8 p_0)
              (select charP_charM_accept_9 t_0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 67 12 40#
          "expl:Ensures clause"
          ((=) (Uint64.to_int result) (strspn s_1 accept_0)))))))))))) }
  
end

module Function_strspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrSpn 
  
  use why3.Bool.Bool 
  
  val strspn_0
  (s_1 : (pointer voidP)) 
   (accept_0 : (pointer voidP)) 
    (voidP_accept_9_alloc_table : (alloc_table voidP)) 
     (voidP_s_1_8_alloc_table : (alloc_table voidP)) 
      (charP_charM_accept_9 : (memory voidP Int8.t)) 
       (charP_charM_s_1_8 : (memory voidP Int8.t)) : Uint64.t
        requires {
          ("expl:External"
          (#"strcspn.jc" 206 12 92# "expl:Requires clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 60 13 25#
           "expl:Requires clause"
           (valid_str s_1 voidP_s_1_8_alloc_table charP_charM_s_1_8))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 61 13 30#
          "expl:Requires clause"
          (valid_str accept_0 voidP_accept_9_alloc_table
          charP_charM_accept_9))))) }
        ensures {
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 63 12 24#
           "expl:Ensures clause"
           (Uint64.(<=) (#"strcspn.jc" 210 31 44# "expl:Integer cast"
           (Uint64.of_int (0))) result))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 63 17 37#
           "expl:Ensures clause"
           (Uint64.(<=) result (strlen s_1 charP_charM_s_1_8)))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 64 12 87#
           "expl:Ensures clause"
           (forall t : (pointer voidP).
            (((same_block accept_0 t) /\
             (((<=) (sub_pointer accept_0 t) (0)) /\
             ((same_block t
              (shift accept_0
              (Uint64.to_int (strlen accept_0 charP_charM_accept_9))))
             /\
             ((<)
             (sub_pointer t
             (shift accept_0
             (Uint64.to_int (strlen accept_0 charP_charM_accept_9)))) (0)))))
             ->
             (Int8.(<>)
             (select charP_charM_s_1_8 (shift s_1 (Uint64.to_int result)))
             (select charP_charM_accept_9 t)))))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 63 12 37#
          "expl:Ensures clause"
          ((#"/home/work/workspace/self/verker/strspn.h" 65 12 134#
           "expl:Ensures clause"
           (forall p_0 : (pointer voidP).
            (((same_block s_1 p_0) /\
             (((<=) (sub_pointer s_1 p_0) (0)) /\
             ((same_block p_0 (shift s_1 (Uint64.to_int result))) /\
             ((<) (sub_pointer p_0 (shift s_1 (Uint64.to_int result))) (0)))))
             ->
             (exists t_0 : (pointer voidP).
              ((same_block accept_0 t_0) /\
              (((<=) (sub_pointer accept_0 t_0) (0)) /\
              ((same_block t_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_9))))
              /\
              (((<)
               (sub_pointer t_0
               (shift accept_0
               (Uint64.to_int (strlen accept_0 charP_charM_accept_9)))) (0))
              /\
              (Int8.(=) (select charP_charM_s_1_8 p_0)
              (select charP_charM_accept_9 t_0))))))))))
          /\
          (#"/home/work/workspace/self/verker/strspn.h" 67 12 40#
          "expl:Ensures clause"
          ((=) (Uint64.to_int result) (strspn s_1 accept_0)))))))))))) }
  
end

module Function_strcspn_0

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_3 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_13_alloc_table : (alloc_table voidP)) 
     (voidP_s_12_alloc_table : (alloc_table voidP)) 
      (voidP_reject_13_tag_table : (tag_table voidP)) 
       (voidP_s_12_tag_table : (tag_table voidP)) 
        (charP_charM_reject_13 : (memory voidP Int8.t)) 
         (charP_charM_s_12 : (memory voidP Int8.t)) : Uint64.t
          requires { true }
          ensures {
            (((forall p_1 : (pointer voidP).
               (forall t_1 : (pointer voidP).
                (((same_block s_3 p_1) /\
                 (((<=) (sub_pointer s_3 p_1) (0)) /\
                 ((same_block p_1
                  (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                 /\
                 (((<)
                  (sub_pointer p_1
                  (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                  (0))
                 /\
                 ((same_block reject_0 t_1) /\
                 (((<=) (sub_pointer reject_0 t_1) (0)) /\
                 ((same_block t_1
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 /\
                 ((<)
                 (sub_pointer t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_12 p_1)
                 (select charP_charM_reject_13 t_1))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_3 charP_charM_s_12))))
            /\
            (((exists p_2 : (pointer voidP).
               (exists t_2 : (pointer voidP).
                ((same_block s_3 p_2) /\
                (((<=) (sub_pointer s_3 p_2) (0)) /\
                ((same_block p_2
                 (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                /\
                (((<)
                 (sub_pointer p_2
                 (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                 (0))
                /\
                ((same_block reject_0 t_2) /\
                (((<=) (sub_pointer reject_0 t_2) (0)) /\
                ((same_block t_2
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                /\
                (((<)
                 (sub_pointer t_2
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_12 p_2)
                (select charP_charM_reject_13 t_2)))))))))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_3 : (pointer voidP).
               ((same_block reject_0 t_3) /\
               (((<=) (sub_pointer reject_0 t_3) (0)) /\
               ((same_block t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
               /\
               (((<)
                (sub_pointer t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_12 (shift s_3 (Uint64.to_int result)))
               (select charP_charM_reject_13 t_3)))))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_3 reject_0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"strcspn.jc" 306 33 46# "expl:Integer cast"
             (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_3 charP_charM_s_12)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_3 : (pointer voidP).
             (forall t_4 : (pointer voidP).
              (((same_block s_3 p_3) /\
               (((<=) (sub_pointer s_3 p_3) (0)) /\
               ((same_block p_3 (shift s_3 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_3 (shift s_3 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_4) /\
               (((<=) (sub_pointer reject_0 t_4) (0)) /\
               ((same_block t_4
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
               /\
               ((<)
               (sub_pointer t_4
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_12 p_3)
               (select charP_charM_reject_13 t_4))))))))))))))) }
  
end

module Function_strcspn_0_safe

  use enum.Uint64 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Axiomatic_Strlen 
  
  use import Axiomatic_StrCSpn 
  
  use why3.Bool.Bool 
  
  val strcspn_0
  (s_3 : (pointer voidP)) 
   (reject_0 : (pointer voidP)) 
    (voidP_reject_13_alloc_table : (alloc_table voidP)) 
     (voidP_s_12_alloc_table : (alloc_table voidP)) 
      (voidP_reject_13_tag_table : (tag_table voidP)) 
       (voidP_s_12_tag_table : (tag_table voidP)) 
        (charP_charM_reject_13 : (memory voidP Int8.t)) 
         (charP_charM_s_12 : (memory voidP Int8.t)) : Uint64.t
          requires {
            ("expl:Internal"
            (#"strcspn.jc" 300 12 92# "expl:Requires clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 46 13 25#
             "expl:Requires clause"
             (valid_str s_3 voidP_s_12_alloc_table charP_charM_s_12))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 47 13 30#
            "expl:Requires clause"
            (valid_str reject_0 voidP_reject_13_alloc_table
            charP_charM_reject_13))))) }
          ensures {
            (((forall p_1 : (pointer voidP).
               (forall t_1 : (pointer voidP).
                (((same_block s_3 p_1) /\
                 (((<=) (sub_pointer s_3 p_1) (0)) /\
                 ((same_block p_1
                  (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                 /\
                 (((<)
                  (sub_pointer p_1
                  (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                  (0))
                 /\
                 ((same_block reject_0 t_1) /\
                 (((<=) (sub_pointer reject_0 t_1) (0)) /\
                 ((same_block t_1
                  (shift reject_0
                  (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 /\
                 ((<)
                 (sub_pointer t_1
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 (0))))))))) ->
                 (Int8.(<>) (select charP_charM_s_12 p_1)
                 (select charP_charM_reject_13 t_1))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 66 15 35#
              "expl:Ensures clause"
              (Uint64.(=) result (strlen s_3 charP_charM_s_12))))
            /\
            (((exists p_2 : (pointer voidP).
               (exists t_2 : (pointer voidP).
                ((same_block s_3 p_2) /\
                (((<=) (sub_pointer s_3 p_2) (0)) /\
                ((same_block p_2
                 (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                /\
                (((<)
                 (sub_pointer p_2
                 (shift s_3 (Uint64.to_int (strlen s_3 charP_charM_s_12))))
                 (0))
                /\
                ((same_block reject_0 t_2) /\
                (((<=) (sub_pointer reject_0 t_2) (0)) /\
                ((same_block t_2
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                /\
                (((<)
                 (sub_pointer t_2
                 (shift reject_0
                 (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                 (0))
                /\
                (Int8.(=) (select charP_charM_s_12 p_2)
                (select charP_charM_reject_13 t_2)))))))))))) ->
              (#"/home/work/workspace/self/verker/strcspn.h" 60 15 89#
              "expl:Ensures clause"
              (exists t_3 : (pointer voidP).
               ((same_block reject_0 t_3) /\
               (((<=) (sub_pointer reject_0 t_3) (0)) /\
               ((same_block t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
               /\
               (((<)
                (sub_pointer t_3
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
                (0))
               /\
               (Int8.(=)
               (select charP_charM_s_12 (shift s_3 (Uint64.to_int result)))
               (select charP_charM_reject_13 t_3)))))))))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
             "expl:Ensures clause"
             ((=) (Uint64.to_int result) (strcspn s_3 reject_0)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 12 24#
             "expl:Ensures clause"
             (Uint64.(<=) (#"strcspn.jc" 306 33 46# "expl:Integer cast"
             (Uint64.of_int (0))) result))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 49 12 41#
            "expl:Ensures clause"
            ((#"/home/work/workspace/self/verker/strcspn.h" 50 17 37#
             "expl:Ensures clause"
             (Uint64.(<=) result (strlen s_3 charP_charM_s_12)))
            /\
            (#"/home/work/workspace/self/verker/strcspn.h" 51 12 143#
            "expl:Ensures clause"
            (forall p_3 : (pointer voidP).
             (forall t_4 : (pointer voidP).
              (((same_block s_3 p_3) /\
               (((<=) (sub_pointer s_3 p_3) (0)) /\
               ((same_block p_3 (shift s_3 (Uint64.to_int result))) /\
               (((<) (sub_pointer p_3 (shift s_3 (Uint64.to_int result)))
                (0))
               /\
               ((same_block reject_0 t_4) /\
               (((<=) (sub_pointer reject_0 t_4) (0)) /\
               ((same_block t_4
                (shift reject_0
                (Uint64.to_int (strlen reject_0 charP_charM_reject_13))))
               /\
               ((<)
               (sub_pointer t_4
               (shift reject_0
               (Uint64.to_int (strlen reject_0 charP_charM_reject_13)))) (0)))))))))
               ->
               (Int8.(<>) (select charP_charM_s_12 p_3)
               (select charP_charM_reject_13 t_4))))))))))))))) }
  
end
