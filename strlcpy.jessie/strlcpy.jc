
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        (((s + (n_1 :> integer)).charM == (0 :> int8)) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_1 : (\forall charP[..] s_0;
            (((s_0.charM != (0 :> int8)) && valid_str{L}(s_0)) ==>
              valid_str{L}((s_0 + 1)))))
   
  lemma valid_str_strend{L} :
  (_C_2 : (\forall charP[..] s_1;
            ((\at((((\offset_min(\at(s_1,L)) <= \at(0,L)) &&
                     (\offset_max(\at(s_1,L)) >= \at(0,L))) &&
                    true),L) &&
               (s_1.charM == (0 :> int8))) ==>
              valid_str{L}(s_1))))
   
  logic uint64 strlen{L}(charP[..] s_2) =
  \at((if ((s_2 + 0).charM == (0 :> int8)) then (0 :> uint64) else ((1 +
                                                                    (strlen{L}(
                                                                    (s_2 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_3 : (\forall charP[..] s_3;
            (\forall integer i_0;
              (((valid_str{L}(s_3) && (0 <= i_0)) &&
                 (i_0 < (strlen{L}(s_3) :> integer))) ==>
                ((s_3 + i_0).charM != (0 :> int8))))))
   
  lemma strlen_at_null{L} :
  (_C_4 : (\forall charP[..] s_4;
            (valid_str{L}(s_4) ==>
              ((s_4 + (strlen{L}(s_4) :> integer)).charM == (0 :> int8)))))
   
  lemma strlen_shift{L} :
  (_C_5 : (\forall charP[..] s_5;
            (\forall uint64 i_1;
              ((valid_str{L}(s_5) && (i_1 <= strlen{L}(s_5))) ==>
                ((strlen{L}((s_5 + (i_1 :> integer))) :> integer) ==
                  ((strlen{L}(s_5) :> integer) - (i_1 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_6 : (\forall charP[..] s_6;
            (\forall uint64 i_2;
              (((valid_str{L}(s_6) && ((0 :> uint64) < i_2)) &&
                 (i_2 <= strlen{L}(s_6))) ==>
                (strlen{L}((s_6 + (i_2 :> integer))) < strlen{L}(s_6))))))
   
  lemma strlen_shift1{L} :
  (_C_7 : (\forall charP[..] s_7;
            ((valid_str{L}(s_7) && (s_7.charM != (0 :> int8))) ==>
              ((strlen{L}(s_7) :> integer) ==
                (1 + (strlen{L}((s_7 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_8 : (\forall charP[..] s_8;
            (\forall charP[..] sc;
              (((((valid_str{L}(s_8) && valid_str{L}(sc)) &&
                   (\base_block(s_8) == \base_block(sc))) &&
                  ((\base_block(s_8) == \base_block(sc)) &&
                    ((s_8 - sc) <= 0))) &&
                 (\forall integer i_3;
                   (((0 <= i_3) && (i_3 <= (sc - s_8))) ==>
                     ((s_8 + i_3).charM != (0 :> int8))))) ==>
                (strlen{L}(sc) <= strlen{L}(s_8))))))
   
  lemma strlen_main{L} :
  (_C_9 : (\forall charP[..] s_9;
            (\forall uint64 n_2;
              (((valid_str{L}(s_9) &&
                  ((s_9 + (n_2 :> integer)).charM == (0 :> int8))) &&
                 (\forall integer i_4;
                   (((0 <= i_4) && (i_4 < (n_2 :> integer))) ==>
                     ((s_9 + i_4).charM != (0 :> int8))))) ==>
                (strlen{L}(s_9) == n_2)))))
   
  lemma valid_str_shiftn{L} :
  (_C_10 : (\forall charP[..] s_10;
             (\forall integer i_5;
               (((valid_str{L}(s_10) && (0 <= i_5)) &&
                  (i_5 < (strlen{L}(s_10) :> integer))) ==>
                 valid_str{L}((s_10 + i_5))))))
  
}

uint64 strlen(charP[..] s)
  requires (_C_16 : valid_str{Here}(s));
behavior default:
  assigns \nothing;
  ensures (_C_11 : ((_C_12 : (\result == strlen{Here}(\at(s,Old)))) &&
                     ((_C_14 : ((\at(s,Old) + (\result :> integer)).charM ==
                                 (0 :> int8))) &&
                       (_C_15 : (\forall integer i_6;
                                  (((0 <= i_6) &&
                                     (i_6 < (\result :> integer))) ==>
                                    ((\at(s,Old) + i_6).charM != (0 :> int8))))))));
;

charP[..] memcpy_char_0(charP[..] dest_3, charP[..] src_3, uint64 n_2)
  requires (_C_20 : (((_C_22 : (n_2 >= (0 :> uint64))) &&
                       (_C_23 : (((n_2 :> integer) % 1) == 0))) &&
                      (_C_24 : (let integer _n_6 = ((n_2 :> integer) / 1)
                               in ((\at((if (\at(0,Here) <=
                                              \at((_n_6 - 1),Here)) then 
                                        (((\offset_min(\at((dest_3 :> charP[..]),Here)) <=
                                            \at(0,Here)) &&
                                           (\offset_max(\at((dest_3 :> charP[..]),Here)) >=
                                             \at((_n_6 - 1),Here))) &&
                                          (\forall integer __framac_tmp4;
                                            (((\at(0,Here) <= __framac_tmp4) &&
                                               (__framac_tmp4 <=
                                                 \at((_n_6 - 1),Here))) ==>
                                              true))) else true),Here) &&
                                     \at((if (\at(0,Here) <=
                                               \at((_n_6 - 1),Here)) then 
                                         (((\offset_min(\at((src_3 :> charP[..]),Here)) <=
                                             \at(0,Here)) &&
                                            (\offset_max(\at((src_3 :> charP[..]),Here)) >=
                                              \at((_n_6 - 1),Here))) &&
                                           (\forall integer __framac_tmp3;
                                             (((\at(0,Here) <= __framac_tmp3) &&
                                                (__framac_tmp3 <=
                                                  \at((_n_6 - 1),Here))) ==>
                                               true))) else true),Here)) &&
                                    separated_char{Here,
                                    Here}((dest_3 :> charP[..]),
                                          (src_3 :> charP[..]), n_2))))));
behavior default:
  assigns ((dest_3 :> charP[..]) + [0..(((n_2 :> integer) / 1) - 1)]).charM;
  allocates \nothing;
  ensures (_C_17 : ((_C_18 : memcmp_char{Here,
                    Here}((\at(dest_3,Old) :> charP[..]),
                          (\at(src_3,Old) :> charP[..]), \at(n_2,Old))) &&
                     (_C_19 : (\result == \at(dest_3,Old)))));
;

axiomatic memcpy_char {

  predicate memcmp_char{L1, L2}(charP[..] p1_1, charP[..] p2_1, uint64 n_3) =
  ((((n_3 :> integer) % 1) == 0) &&
    (let integer _n_7 = ((n_3 :> integer) / 1)
    in ((\at((if (\at(0,L1) <= \at((_n_7 - 1),L1)) then (((\offset_min(
                                                            \at((p1_1 :> charP[..]),L1)) <=
                                                            \at(0,L1)) &&
                                                           (\offset_max(
                                                             \at((p1_1 :> charP[..]),L1)) >=
                                                             \at((_n_7 - 1),L1))) &&
                                                          (\forall integer __framac_tmp6;
                                                            (((\at(0,L1) <=
                                                                __framac_tmp6) &&
                                                               (__framac_tmp6 <=
                                                                 \at(
                                                                 (_n_7 -
                                                                   1),L1))) ==>
                                                              true))) else true),L1) &&
          \at((if (\at(0,L1) <= \at((_n_7 - 1),L1)) then (((\offset_min(
                                                             \at((p2_1 :> charP[..]),L1)) <=
                                                             \at(0,L1)) &&
                                                            (\offset_max(
                                                              \at((p2_1 :> charP[..]),L1)) >=
                                                              \at((_n_7 - 1),L1))) &&
                                                           (\forall integer __framac_tmp5;
                                                             (((\at(0,L1) <=
                                                                 __framac_tmp5) &&
                                                                (__framac_tmp5 <=
                                                                  \at(
                                                                  (_n_7 -
                                                                    1),L1))) ==>
                                                               true))) else true),L2)) &&
         (\forall integer k_1;
           (((0 <= k_1) && (k_1 < _n_7)) ==>
             (\at((p1_1 + k_1).charM,L1) == \at((p2_1 + k_1).charM,L2)))))))
   
  predicate separated_char{L1, L2}(charP[..] p1_2, charP[..] p2_2, uint64 n_4) =
  ((((n_4 :> integer) % 1) == 0) &&
    (let integer _n_8 = ((n_4 :> integer) / 1)
    in ((\at((if (\at(0,L1) <= \at((_n_8 - 1),L1)) then (((\offset_min(
                                                            \at((p1_2 :> charP[..]),L1)) <=
                                                            \at(0,L1)) &&
                                                           (\offset_max(
                                                             \at((p1_2 :> charP[..]),L1)) >=
                                                             \at((_n_8 - 1),L1))) &&
                                                          (\forall integer __framac_tmp8;
                                                            (((\at(0,L1) <=
                                                                __framac_tmp8) &&
                                                               (__framac_tmp8 <=
                                                                 \at(
                                                                 (_n_8 -
                                                                   1),L1))) ==>
                                                              true))) else true),L1) &&
          \at((if (\at(0,L1) <= \at((_n_8 - 1),L1)) then (((\offset_min(
                                                             \at((p2_2 :> charP[..]),L1)) <=
                                                             \at(0,L1)) &&
                                                            (\offset_max(
                                                              \at((p2_2 :> charP[..]),L1)) >=
                                                              \at((_n_8 - 1),L1))) &&
                                                           (\forall integer __framac_tmp7;
                                                             (((\at(0,L1) <=
                                                                 __framac_tmp7) &&
                                                                (__framac_tmp7 <=
                                                                  \at(
                                                                  (_n_8 -
                                                                    1),L1))) ==>
                                                               true))) else true),L2)) &&
         ((\base_block(p1_2) != \base_block(p2_2)) || (true && true)))))
  
}

uint64 strlcpy(charP[..] dest_8, charP[..] src_6, uint64 size_1)
  requires ((_C_52 : \at((if (\at(0,Here) <=
                               \at(((size_1 :> integer) - 1),Here)) then 
                         (((\offset_min(\at(dest_8,Here)) <= \at(0,Here)) &&
                            (\offset_max(\at(dest_8,Here)) >=
                              \at(((size_1 :> integer) - 1),Here))) &&
                           (\forall integer __framac_tmp9;
                             (((\at(0,Here) <= __framac_tmp9) &&
                                (__framac_tmp9 <=
                                  \at(((size_1 :> integer) - 1),Here))) ==>
                               true))) else true),Here)) &&
             ((_C_53 : valid_str{Here}(src_6)) &&
               (_C_54 : (\base_block(dest_8) != \base_block(src_6)))));
behavior default:
  ensures true;
behavior size_is_lower_src:
  assumes (((0 :> uint64) < size_1) && (size_1 <= strlen{Here}(src_6)));
  assigns (dest_8 + [0..((size_1 :> integer) - 1)]).charM;
  ensures (_C_41 : ((_C_42 : (\forall integer i_8;
                               (((0 <= i_8) &&
                                  (i_8 < ((\at(size_1,Old) :> integer) - 1))) ==>
                                 ((\at(src_6,Old) + i_8).charM ==
                                   (\at(dest_8,Old) + i_8).charM)))) &&
                     (_C_43 : valid_str{Here}(\at(dest_8,Old)))));
behavior size_is_greater_src:
  assumes (size_1 > strlen{Here}(src_6));
  assigns (dest_8 + [0..(strlen{Old}(src_6) :> integer)]).charM;
  ensures (_C_44 : ((_C_45 : (\forall integer i_7;
                               (((0 <= i_7) &&
                                  (i_7 <
                                    (strlen{Here}(\at(src_6,Old)) :> integer))) ==>
                                 ((\at(src_6,Old) + i_7).charM ==
                                   (\at(dest_8,Old) + i_7).charM)))) &&
                     (_C_46 : valid_str{Here}(\at(dest_8,Old)))));
behavior zero_size:
  assumes (size_1 == (0 :> uint64));
  assigns \nothing;
  ensures true;
{  
   (check (disjoint_behaviors : (! ((size_1 > strlen{Here}(src_6)) &&
                                     (size_1 == (0 :> uint64))))));
   
   (check (disjoint_behaviors : (! ((((0 :> uint64) < size_1) &&
                                      (size_1 <= strlen{Here}(src_6))) &&
                                     (size_1 > strlen{Here}(src_6))))));
   
   (check (disjoint_behaviors : (! ((((0 :> uint64) < size_1) &&
                                      (size_1 <= strlen{Here}(src_6))) &&
                                     (size_1 == (0 :> uint64))))));
   
   (check (complete_behaviors : ((size_1 == (0 :> uint64)) ||
                                  ((size_1 > strlen{Here}(src_6)) ||
                                    (((0 :> uint64) < size_1) &&
                                      (size_1 <= strlen{Here}(src_6)))))));
   
   (var uint64 ret);
   
   (var uint64 len);
   
   (var uint64 tmp_0);
   
   {  (_C_26 : (ret = (_C_25 : strlen(src_6))));
      (if (_C_40 : ((size_1 :> uint64) != (0 :> uint64))) then 
      {  (if (_C_31 : (ret >= size_1)) then (_C_30 : (tmp_0 = (_C_29 : (
                                                              (_C_28 : 
                                                              (size_1 -
                                                                (1 :> uint64))) :> uint64)))) else 
         (_C_27 : (tmp_0 = ret)));
         (_C_32 : (len = tmp_0));
         (_C_33 : memcpy_char_0(dest_8, src_6, len));
         
         {  
            (assert for default: (_C_34 : (jessie : (\forall integer i;
                                                      (((0 <= i) &&
                                                         (i <
                                                           (len :> integer))) ==>
                                                        ((src_6 + i).charM ==
                                                          (dest_8 + i).charM))))));
            ()
         };
         (_C_37 : ((_C_36 : (_C_35 : (dest_8 + len)).charM) = (0 :> int8)));
         
         {  
            (assert for default: (_C_38 : (jessie : valid_str{Here}(dest_8))));
            ()
         };
         
         {  
            (assert for default: (_C_39 : (jessie : (strlen{Here}(dest_8) ==
                                                      len))));
            ()
         }
      } else ());
      
      (return ret)
   }
}
