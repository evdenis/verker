
axiomatic Padding {

  logic type padding
  
}

axiomatic Jessie_memory_reinterpretation_predicates {

  predicate uint8_as_uint8(uint8 d0, uint8 a0) =
  ((d0 == a0) && \uint8_as_uint8(d0, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate uint8_as_int8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \uint8_as_int8(d0, a0))
   
  predicate int8_as_uint8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \int8_as_uint8(d0, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = voidP with {
  uint8 unsigned_charM: 8;
}

voidP[..] memscan(voidP[..] addr, int32 c, uint64 size_1)
  requires ((_C_43 : (addr <: unsigned_charP)) &&
             (_C_44 : \at((if (\at(0,Here) <=
                                \at(((size_1 :> integer) - 1),Here)) then 
                          (((\offset_min(\at((addr :> unsigned_charP[..]),Here)) <=
                              \at(0,Here)) &&
                             (\offset_max(\at((addr :> unsigned_charP[..]),Here)) >=
                               \at(((size_1 :> integer) - 1),Here))) &&
                            (\forall integer __framac_tmp1;
                              (((\at(0,Here) <= __framac_tmp1) &&
                                 (__framac_tmp1 <=
                                   \at(((size_1 :> integer) - 1),Here))) ==>
                                true))) else true),Here)));
behavior default:
  assigns \nothing;
  ensures (_C_30 : ((_C_31 : (\base_block(\at(addr,Old)) ==
                               \base_block(\result))) &&
                     (((_C_34 : (\base_block(\at(addr,Old)) ==
                                  \base_block(\result))) &&
                        (_C_35 : ((\at(addr,Old) - \result) <= 0))) &&
                       ((_C_37 : (\base_block(\result) ==
                                   \base_block((\at(addr,Old) +
                                                 (\at(size_1,Old) :> integer))))) &&
                         (_C_38 : ((\result -
                                     (\at(addr,Old) +
                                       (\at(size_1,Old) :> integer))) <=
                                    0))))));
behavior found:
  assumes (\exists integer i_0;
            (((0 <= i_0) && (i_0 < (size_1 :> integer))) &&
              ((((addr :> unsigned_charP[..]) + i_0).unsigned_charM :> integer) ==
                (c :> integer))));
  ensures (_C_39 : (\exists integer i_1;
                     (((((0 <= i_1) && (i_1 < (\at(size_1,Old) :> integer))) &&
                         (\forall integer j;
                           (((0 <= j) && (j < i_1)) ==>
                             ((((\at(addr,Old) :> unsigned_charP[..]) + j).unsigned_charM :> integer) !=
                               (\at(c,Old) :> integer))))) &&
                        ((((\at(addr,Old) :> unsigned_charP[..]) + i_1).unsigned_charM :> integer) ==
                          (\at(c,Old) :> integer))) &&
                       (\result == (\at(addr,Old) + i_1)))));
behavior not_exists:
  assumes (\forall integer i;
            (((0 <= i) && (i < (size_1 :> integer))) ==>
              ((((addr :> unsigned_charP[..]) + i).unsigned_charM :> integer) !=
                (c :> integer))));
  ensures (_C_40 : (\result ==
                     (\at(addr,Old) + (\at(size_1,Old) :> integer))));
{  
   (check (disjoint_behaviors : (! ((\exists integer i_0;
                                      (((0 <= i_0) &&
                                         (i_0 < (size_1 :> integer))) &&
                                        ((((addr :> unsigned_charP[..]) +
                                            i_0).unsigned_charM :> integer) ==
                                          (c :> integer)))) &&
                                     (\forall integer i;
                                       (((0 <= i) &&
                                          (i < (size_1 :> integer))) ==>
                                         ((((addr :> unsigned_charP[..]) + i).unsigned_charM :> integer) !=
                                           (c :> integer))))))));
   
   (check (complete_behaviors : ((\forall integer i;
                                   (((0 <= i) && (i < (size_1 :> integer))) ==>
                                     ((((addr :> unsigned_charP[..]) + i).unsigned_charM :> integer) !=
                                       (c :> integer)))) ||
                                  (\exists integer i_0;
                                    (((0 <= i_0) &&
                                       (i_0 < (size_1 :> integer))) &&
                                      ((((addr :> unsigned_charP[..]) + i_0).unsigned_charM :> integer) ==
                                        (c :> integer)))))));
   
   (var unsigned_charP[..] p);
   
   (var voidP[..] __retres);
   
   {  (_C_2 : (p = (_C_1 : (addr :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_14 : ((_C_15 : ((0 :> uint64) <= size_1)) &&
                             (_C_16 : (size_1 <= \at(size_1,Pre)))));
      behavior default:
        invariant (_C_13 : ((p - (addr :> unsigned_charP[..])) ==
                             ((\at(size_1,Pre) :> integer) -
                               (size_1 :> integer))));
      behavior default:
        invariant (_C_12 : (\base_block(p) ==
                             \base_block((addr :> unsigned_charP[..]))));
      behavior default:
        invariant (_C_5 : (((_C_7 : (\base_block((addr :> unsigned_charP[..])) ==
                                      \base_block(p))) &&
                             (_C_8 : (((addr :> unsigned_charP[..]) - p) <=
                                       0))) &&
                            ((_C_10 : (\base_block(p) ==
                                        \base_block(((addr :> unsigned_charP[..]) +
                                                      (\at(size_1,Pre) :> integer))))) &&
                              (_C_11 : ((p -
                                          ((addr :> unsigned_charP[..]) +
                                            (\at(size_1,Pre) :> integer))) <=
                                         0)))));
      behavior default:
        invariant (_C_4 : (\forall integer i;
                            (((0 <= i) &&
                               (i <
                                 ((\at(size_1,Pre) :> integer) -
                                   (size_1 :> integer)))) ==>
                              ((((addr :> unsigned_charP[..]) + i).unsigned_charM :> integer) !=
                                (c :> integer)))));
      variant (_C_3 : size_1);
      while (true)
      {  
         {  (if (_C_17 : ((size_1 :> uint64) != (0 :> uint64))) then () else 
            (goto while_0_break));
            
            {  (if (_C_22 : ((_C_21 : ((_C_20 : p.unsigned_charM) :> int32)) ==
                              c)) then 
               {  (_C_19 : (__retres = (_C_18 : (p :> voidP[..]))));
                  
                  (goto return_label)
               } else ());
               (_C_24 : (p = (_C_23 : (p + (1 :> int32)))));
               (_C_27 : (size_1 = (_C_26 : ((_C_25 : (size_1 - (1 :> uint64))) :> uint64))))
            }
         }
      };
      (while_0_break : ());
      (_C_29 : (__retres = (_C_28 : (p :> voidP[..]))));
      (return_label : 
      (return __retres))
   }
}
