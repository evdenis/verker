
axiomatic Padding {

  logic type padding
  
}

axiomatic Jessie_memory_reinterpretation_predicates {

  predicate uint8_as_uint8(uint8 d0, uint8 a0) =
  ((d0 == a0) && \uint8_as_uint8(d0, a0))
   
  logic uint8 complement_to_uint8(int8 v) =
  (if (v >= 0) then (v :> uint8) else (((v :> integer) + 256) :> uint8))
   
  predicate uint8_as_int8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \uint8_as_int8(d0, a0))
   
  predicate int8_as_uint8(int8 d0, uint8 a0) =
  (uint8_as_uint8(complement_to_uint8(d0), a0) && \int8_as_uint8(d0, a0))
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = voidP with {
  uint8 unsigned_charM: 8;
}

voidP[..] memchr(voidP[..] s, int32 c, uint64 n)
  requires ((_C_48 : (s <: unsigned_charP)) &&
             (_C_49 : \at((if (\at(0,Here) <= \at(((n :> integer) - 1),Here)) then 
                          (((\offset_min(\at((s :> unsigned_charP[..]),Here)) <=
                              \at(0,Here)) &&
                             (\offset_max(\at((s :> unsigned_charP[..]),Here)) >=
                               \at(((n :> integer) - 1),Here))) &&
                            (\forall integer __framac_tmp1;
                              (((\at(0,Here) <= __framac_tmp1) &&
                                 (__framac_tmp1 <=
                                   \at(((n :> integer) - 1),Here))) ==>
                                true))) else true),Here)));
behavior default:
  assigns \nothing;
  ensures true;
behavior found:
  assumes (\exists unsigned_charP[..] p_0;
            ((((\base_block((s :> unsigned_charP[..])) == \base_block(p_0)) &&
                (((s :> unsigned_charP[..]) - p_0) <= 0)) &&
               ((\base_block(p_0) ==
                  \base_block(((s :> unsigned_charP[..]) + (n :> integer)))) &&
                 ((p_0 - ((s :> unsigned_charP[..]) + (n :> integer))) < 0))) &&
              (p_0.unsigned_charM == (c :%> uint8))));
  ensures (_C_34 : ((((_C_37 : (\base_block(\at(s,Old)) ==
                                 \base_block(\result))) &&
                       (_C_38 : ((\at(s,Old) - \result) <= 0))) &&
                      ((_C_40 : (\base_block(\result) ==
                                  \base_block((\at(s,Old) +
                                                (\at(n,Old) :> integer))))) &&
                        (_C_41 : ((\result -
                                    (\at(s,Old) + (\at(n,Old) :> integer))) <=
                                   0)))) &&
                     ((_C_43 : (\forall unsigned_charP[..] p_1;
                                 ((((\base_block((\at(s,Old) :> unsigned_charP[..])) ==
                                      \base_block(p_1)) &&
                                     (((\at(s,Old) :> unsigned_charP[..]) -
                                        p_1) <=
                                       0)) &&
                                    ((\base_block(p_1) ==
                                       \base_block((\result :> unsigned_charP[..]))) &&
                                      ((p_1 -
                                         (\result :> unsigned_charP[..])) <
                                        0))) ==>
                                   (p_1.unsigned_charM !=
                                     (\at(c,Old) :%> uint8))))) &&
                       (_C_44 : ((\result :> unsigned_charP[..]).unsigned_charM ==
                                  (\at(c,Old) :%> uint8))))));
behavior not_exists:
  assumes (\forall unsigned_charP[..] p;
            ((((\base_block((s :> unsigned_charP[..])) == \base_block(p)) &&
                (((s :> unsigned_charP[..]) - p) <= 0)) &&
               ((\base_block(p) ==
                  \base_block(((s :> unsigned_charP[..]) + (n :> integer)))) &&
                 ((p - ((s :> unsigned_charP[..]) + (n :> integer))) < 0))) ==>
              (p.unsigned_charM != (c :%> uint8))));
  ensures (_C_45 : (\result == null));
{  
   (check (disjoint_behaviors : (! ((\exists unsigned_charP[..] p_0;
                                      ((((\base_block((s :> unsigned_charP[..])) ==
                                           \base_block(p_0)) &&
                                          (((s :> unsigned_charP[..]) - p_0) <=
                                            0)) &&
                                         ((\base_block(p_0) ==
                                            \base_block(((s :> unsigned_charP[..]) +
                                                          (n :> integer)))) &&
                                           ((p_0 -
                                              ((s :> unsigned_charP[..]) +
                                                (n :> integer))) <
                                             0))) &&
                                        (p_0.unsigned_charM == (c :%> uint8)))) &&
                                     (\forall unsigned_charP[..] p;
                                       ((((\base_block((s :> unsigned_charP[..])) ==
                                            \base_block(p)) &&
                                           (((s :> unsigned_charP[..]) - p) <=
                                             0)) &&
                                          ((\base_block(p) ==
                                             \base_block(((s :> unsigned_charP[..]) +
                                                           (n :> integer)))) &&
                                            ((p -
                                               ((s :> unsigned_charP[..]) +
                                                 (n :> integer))) <
                                              0))) ==>
                                         (p.unsigned_charM != (c :%> uint8))))))));
   
   (check (complete_behaviors : ((\forall unsigned_charP[..] p;
                                   ((((\base_block((s :> unsigned_charP[..])) ==
                                        \base_block(p)) &&
                                       (((s :> unsigned_charP[..]) - p) <= 0)) &&
                                      ((\base_block(p) ==
                                         \base_block(((s :> unsigned_charP[..]) +
                                                       (n :> integer)))) &&
                                        ((p -
                                           ((s :> unsigned_charP[..]) +
                                             (n :> integer))) <
                                          0))) ==>
                                     (p.unsigned_charM != (c :%> uint8)))) ||
                                  (\exists unsigned_charP[..] p_0;
                                    ((((\base_block((s :> unsigned_charP[..])) ==
                                         \base_block(p_0)) &&
                                        (((s :> unsigned_charP[..]) - p_0) <=
                                          0)) &&
                                       ((\base_block(p_0) ==
                                          \base_block(((s :> unsigned_charP[..]) +
                                                        (n :> integer)))) &&
                                         ((p_0 -
                                            ((s :> unsigned_charP[..]) +
                                              (n :> integer))) <
                                           0))) &&
                                      (p_0.unsigned_charM == (c :%> uint8)))))));
   
   (var unsigned_charP[..] p);
   
   (var unsigned_charP[..] tmp);
   
   (var uint64 tmp_0);
   
   (var voidP[..] __retres);
   
   {  (_C_2 : (p = (_C_1 : (s :> unsigned_charP[..]))));
      
      loop 
      behavior default:
        invariant (_C_13 : ((_C_14 : ((0 :> uint64) <= n)) &&
                             (_C_15 : (n <= \at(n,Pre)))));
      behavior default:
        invariant (_C_6 : (((_C_8 : (\base_block((s :> unsigned_charP[..])) ==
                                      \base_block(p))) &&
                             (_C_9 : (((s :> unsigned_charP[..]) - p) <= 0))) &&
                            ((_C_11 : (\base_block(p) ==
                                        \base_block(((s :> unsigned_charP[..]) +
                                                      (\at(n,Pre) :> integer))))) &&
                              (_C_12 : ((p -
                                          ((s :> unsigned_charP[..]) +
                                            (\at(n,Pre) :> integer))) <=
                                         0)))));
      behavior default:
        invariant (_C_5 : ((p - (s :> unsigned_charP[..])) ==
                            ((\at(n,Pre) :> integer) - (n :> integer))));
      behavior default:
        invariant (_C_4 : (\forall unsigned_charP[..] k;
                            ((((\base_block((s :> unsigned_charP[..])) ==
                                 \base_block(k)) &&
                                (((s :> unsigned_charP[..]) - k) <= 0)) &&
                               ((\base_block(k) == \base_block(p)) &&
                                 ((k - p) < 0))) ==>
                              (k.unsigned_charM != (c :%> uint8)))));
      variant (_C_3 : n);
      while (true)
      {  
         {  
            {  (_C_16 : (tmp_0 = n));
               (_C_19 : (n = (_C_18 : ((_C_17 : (n -% (1 :> uint64))) :> uint64))));
               ()
            };
            (if (_C_20 : (tmp_0 != (0 :> uint64))) then () else 
            (goto while_0_break));
            
            {  
               {  (_C_21 : (tmp = p));
                  (_C_23 : (p = (_C_22 : (p + (1 :> int32)))));
                  ()
               };
               (if (_C_31 : ((_C_30 : ((_C_29 : (c :%> uint8)) :> int32)) ==
                              (_C_28 : ((_C_27 : tmp.unsigned_charM) :> int32)))) then 
               {  (_C_26 : (__retres = (_C_25 : ((_C_24 : (p - (1 :> int32))) :> voidP[..]))));
                  
                  (goto return_label)
               } else ())
            }
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_32 : (jessie : (n == ((- 1) :%> uint64)))));
         ()
      };
      (_C_33 : (__retres = null));
      (return_label : 
      (return __retres))
   }
}
