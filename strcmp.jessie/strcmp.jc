
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

axiomatic Strlen {

  predicate valid_str{L}(charP[..] s) =
  \at((\exists uint64 n_1;
        (((s + (n_1 :> integer)).charM == (0 :> int8)) &&
          \at((if (\at(0,L) <= \at(n_1,L)) then (((\offset_min(\at(s,L)) <=
                                                    \at(0,L)) &&
                                                   (\offset_max(\at(s,L)) >=
                                                     \at(n_1,L))) &&
                                                  (\forall integer __framac_tmp1;
                                                    (((\at(0,L) <=
                                                        __framac_tmp1) &&
                                                       (__framac_tmp1 <=
                                                         \at(n_1,L))) ==>
                                                      true))) else true),L))),L)
   
  lemma valid_str_shift1{L} :
  (_C_1 : (\forall charP[..] s_0;
            (((s_0.charM != (0 :> int8)) && valid_str{L}(s_0)) ==>
              valid_str{L}((s_0 + 1)))))
   
  lemma valid_str_strend{L} :
  (_C_2 : (\forall charP[..] s_1;
            ((\at((((\offset_min(\at(s_1,L)) <= \at(0,L)) &&
                     (\offset_max(\at(s_1,L)) >= \at(0,L))) &&
                    true),L) &&
               (s_1.charM == (0 :> int8))) ==>
              valid_str{L}(s_1))))
   
  logic uint64 strlen{L}(charP[..] s_2) =
  \at((if ((s_2 + 0).charM == (0 :> int8)) then (0 :> uint64) else ((1 +
                                                                    (strlen{L}(
                                                                    (s_2 + 1)) :> integer)) :> uint64)),L)
   
  lemma strlen_before_null{L} :
  (_C_3 : (\forall charP[..] s_3;
            (\forall integer i;
              (((valid_str{L}(s_3) && (0 <= i)) &&
                 (i < (strlen{L}(s_3) :> integer))) ==>
                ((s_3 + i).charM != (0 :> int8))))))
   
  lemma strlen_at_null{L} :
  (_C_4 : (\forall charP[..] s_4;
            (valid_str{L}(s_4) ==>
              ((s_4 + (strlen{L}(s_4) :> integer)).charM == (0 :> int8)))))
   
  lemma strlen_shift{L} :
  (_C_5 : (\forall charP[..] s_5;
            (\forall uint64 i_0;
              ((valid_str{L}(s_5) && (i_0 <= strlen{L}(s_5))) ==>
                ((strlen{L}((s_5 + (i_0 :> integer))) :> integer) ==
                  ((strlen{L}(s_5) :> integer) - (i_0 :> integer)))))))
   
  lemma strlen_shift_ex{L} :
  (_C_6 : (\forall charP[..] s_6;
            (\forall uint64 i_1;
              (((valid_str{L}(s_6) && ((0 :> uint64) < i_1)) &&
                 (i_1 <= strlen{L}(s_6))) ==>
                (strlen{L}((s_6 + (i_1 :> integer))) < strlen{L}(s_6))))))
   
  lemma strlen_shift1{L} :
  (_C_7 : (\forall charP[..] s_7;
            ((valid_str{L}(s_7) && (s_7.charM != (0 :> int8))) ==>
              ((strlen{L}(s_7) :> integer) ==
                (1 + (strlen{L}((s_7 + 1)) :> integer))))))
   
  lemma strlen_pointers{L} :
  (_C_8 : (\forall charP[..] s_8;
            (\forall charP[..] sc;
              (((((valid_str{L}(s_8) && valid_str{L}(sc)) &&
                   (\base_block(s_8) == \base_block(sc))) &&
                  ((\base_block(s_8) == \base_block(sc)) &&
                    ((s_8 - sc) <= 0))) &&
                 (\forall integer i_2;
                   (((0 <= i_2) && (i_2 <= (sc - s_8))) ==>
                     ((s_8 + i_2).charM != (0 :> int8))))) ==>
                (strlen{L}(sc) <= strlen{L}(s_8))))))
   
  lemma strlen_main{L} :
  (_C_9 : (\forall charP[..] s_9;
            (\forall uint64 n_2;
              (((valid_str{L}(s_9) &&
                  ((s_9 + (n_2 :> integer)).charM == (0 :> int8))) &&
                 (\forall integer i_3;
                   (((0 <= i_3) && (i_3 < (n_2 :> integer))) ==>
                     ((s_9 + i_3).charM != (0 :> int8))))) ==>
                (strlen{L}(s_9) == n_2)))))
   
  lemma valid_str_shiftn{L} :
  (_C_10 : (\forall charP[..] s_10;
             (\forall integer i_4;
               (((valid_str{L}(s_10) && (0 <= i_4)) &&
                  (i_4 < (strlen{L}(s_10) :> integer))) ==>
                 valid_str{L}((s_10 + i_4))))))
  
}

uint64 strlen(charP[..] s)
  requires (_C_16 : valid_str{Here}(s));
behavior default:
  assigns \nothing;
  ensures (_C_11 : ((_C_12 : (\result == strlen{Here}(\at(s,Old)))) &&
                     ((_C_14 : ((\at(s,Old) + (\result :> integer)).charM ==
                                 (0 :> int8))) &&
                       (_C_15 : (\forall integer i_5;
                                  (((0 <= i_5) &&
                                     (i_5 < (\result :> integer))) ==>
                                    ((\at(s,Old) + i_5).charM != (0 :> int8))))))));
;

int32 strcmp(charP[..] cs, charP[..] ct)
  requires ((_C_76 : valid_str{Here}(cs)) && (_C_77 : valid_str{Here}(ct)));
behavior default:
  assigns \nothing;
  ensures true;
behavior equal:
  assumes (\forall integer i_8;
            (((0 <= i_8) && (i_8 <= (strlen{Here}(cs) :> integer))) ==>
              ((cs + i_8).charM == (ct + i_8).charM)));
  ensures (_C_70 : (\result == (0 :> int32)));
behavior not_equal:
  assumes (\exists integer i_6;
            (((0 <= i_6) && (i_6 <= (strlen{Here}(cs) :> integer))) &&
              ((cs + i_6).charM != (ct + i_6).charM)));
  ensures (_C_71 : ((_C_72 : ((\result == ((- 1) :> int32)) ||
                               (\result == (1 :> int32)))) &&
                     (_C_73 : (\exists integer i_7;
                                (((((0 <= i_7) &&
                                     (i_7 <=
                                       (strlen{Here}(\at(cs,Old)) :> integer))) &&
                                    (\forall integer j;
                                      (((0 <= j) && (j < i_7)) ==>
                                        ((\at(cs,Old) + j).charM ==
                                          (\at(ct,Old) + j).charM)))) &&
                                   ((\at(cs,Old) + i_7).charM !=
                                     (\at(ct,Old) + i_7).charM)) &&
                                  (if (((\at(cs,Old) + i_7).charM :%> uint8) <
                                        ((\at(ct,Old) + i_7).charM :%> uint8)) then 
                                  (\result ==
                                    ((- 1) :> int32)) else (\result ==
                                                             (1 :> int32))))))));
{  
   (check (disjoint_behaviors : (! ((\forall integer i_8;
                                      (((0 <= i_8) &&
                                         (i_8 <=
                                           (strlen{Here}(cs) :> integer))) ==>
                                        ((cs + i_8).charM ==
                                          (ct + i_8).charM))) &&
                                     (\exists integer i_6;
                                       (((0 <= i_6) &&
                                          (i_6 <=
                                            (strlen{Here}(cs) :> integer))) &&
                                         ((cs + i_6).charM !=
                                           (ct + i_6).charM)))))));
   
   (check (complete_behaviors : ((\exists integer i_6;
                                   (((0 <= i_6) &&
                                      (i_6 <= (strlen{Here}(cs) :> integer))) &&
                                     ((cs + i_6).charM != (ct + i_6).charM))) ||
                                  (\forall integer i_8;
                                    (((0 <= i_8) &&
                                       (i_8 <= (strlen{Here}(cs) :> integer))) ==>
                                      ((cs + i_8).charM == (ct + i_8).charM))))));
   
   (var uint8 c1);
   
   (var uint8 c2);
   
   (var charP[..] tmp);
   
   (var charP[..] tmp_0);
   
   (var int32 res);
   
   (var int32 tmp_1);
   
   (var int32 tmp_2);
   
   (var int32 __retres);
   
   {  
      {  
         (assert for default: (_C_17 : (jessie : ((\forall integer i;
                                                    (((0 <= i) &&
                                                       (i <=
                                                         (strlen{Here}(
                                                         cs) :> integer))) ==>
                                                      ((cs + i).charM ==
                                                        (ct + i).charM))) <==>
                                                   (\forall integer i;
                                                     (((0 <= i) &&
                                                        (i <=
                                                          (strlen{Here}(
                                                          cs) :> integer))) ==>
                                                       (((cs + i).charM :%> uint8) ==
                                                         ((ct + i).charM :%> uint8))))))));
         ()
      };
      
      loop 
      behavior default:
        invariant (_C_36 : ((_C_37 : valid_str{Here}(cs)) &&
                             (_C_38 : valid_str{Here}(ct))));
      behavior default:
        invariant (_C_29 : (((_C_31 : (\base_block(\at(cs,Pre)) ==
                                        \base_block(cs))) &&
                              (_C_32 : ((\at(cs,Pre) - cs) <= 0))) &&
                             ((_C_34 : (\base_block(cs) ==
                                         \base_block((\at(cs,Pre) +
                                                       (strlen{Here}(
                                                       \at(cs,Pre)) :> integer))))) &&
                               (_C_35 : ((cs -
                                           (\at(cs,Pre) +
                                             (strlen{Here}(\at(cs,Pre)) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_22 : (((_C_24 : (\base_block(\at(ct,Pre)) ==
                                        \base_block(ct))) &&
                              (_C_25 : ((\at(ct,Pre) - ct) <= 0))) &&
                             ((_C_27 : (\base_block(ct) ==
                                         \base_block((\at(ct,Pre) +
                                                       (strlen{Here}(
                                                       \at(ct,Pre)) :> integer))))) &&
                               (_C_28 : ((ct -
                                           (\at(ct,Pre) +
                                             (strlen{Here}(\at(ct,Pre)) :> integer))) <=
                                          0)))));
      behavior default:
        invariant (_C_21 : ((cs - \at(cs,Pre)) == (ct - \at(ct,Pre))));
      behavior default:
        invariant (_C_20 : (\forall integer i;
                             (((0 <= i) && (i < (cs - \at(cs,Pre)))) ==>
                               ((\at(cs,Pre) + i).charM ==
                                 (\at(ct,Pre) + i).charM))));
      behavior default:
        invariant (_C_19 : ((strlen{Here}(cs) :> integer) ==
                             ((strlen{Here}(\at(cs,Pre)) :> integer) -
                               (cs - \at(cs,Pre)))));
      variant (_C_18 : ((strlen{Here}(\at(cs,Pre)) :> integer) -
                         (cs - \at(cs,Pre))));
      while (true)
      {  
         {  
            {  (_C_39 : (tmp = cs));
               (_C_41 : (cs = (_C_40 : (cs + (1 :> int32)))));
               (_C_44 : (c1 = (_C_43 : ((_C_42 : tmp.charM) :%> uint8))))
            };
            
            {  (_C_45 : (tmp_0 = ct));
               (_C_47 : (ct = (_C_46 : (ct + (1 :> int32)))));
               (_C_50 : (c2 = (_C_49 : ((_C_48 : tmp_0.charM) :%> uint8))))
            };
            (if (_C_66 : ((_C_65 : (c1 :> int32)) != (_C_64 : (c2 :> int32)))) then 
            {  (if (_C_55 : ((_C_54 : (c1 :> int32)) <
                              (_C_53 : (c2 :> int32)))) then (_C_52 : (tmp_1 = (-1 :> int32))) else 
               (_C_51 : (tmp_1 = (1 :> int32))));
               (_C_56 : (res = tmp_1));
               
               {  
                  (assert for default: (_C_57 : (jessie : (\exists integer i;
                                                            ((((((0 <= i) &&
                                                                  (i <=
                                                                    (strlen{Here}(
                                                                    \at(cs,Pre)) :> integer))) &&
                                                                 (\forall integer j;
                                                                   (((0 <= j) &&
                                                                    (j < i)) ==>
                                                                    ((\at(cs,Pre) +
                                                                    j).charM ==
                                                                    (\at(ct,Pre) +
                                                                    j).charM)))) &&
                                                                ((\at(cs,Pre) +
                                                                   i).charM !=
                                                                  (\at(ct,Pre) +
                                                                    i).charM)) &&
                                                               (if (((\at(cs,Pre) +
                                                                    i).charM :%> uint8) <
                                                                    ((\at(ct,Pre) +
                                                                    i).charM :%> uint8)) then 
                                                               (res ==
                                                                 ((- 1) :> int32)) else 
                                                               (res ==
                                                                 (1 :> int32)))) &&
                                                              (i ==
                                                                ((cs -
                                                                   \at(cs,Pre)) -
                                                                  1)))))));
                  ()
               };
               (if (_C_62 : ((_C_61 : (c1 :> int32)) <
                              (_C_60 : (c2 :> int32)))) then (_C_59 : (tmp_2 = (-1 :> int32))) else 
               (_C_58 : (tmp_2 = (1 :> int32))));
               
               {  (_C_63 : (__retres = tmp_2));
                  
                  (goto return_label)
               }
            } else ());
            (if (_C_67 : (! ((c1 :> uint8) != (0 :> uint8)))) then 
            (goto while_0_break) else ());
            
            {  
               (assert for default: (_C_68 : (jessie : ((\at(cs,Pre) +
                                                          ((cs - \at(cs,Pre)) -
                                                            1)).charM ==
                                                         (\at(ct,Pre) +
                                                           ((cs -
                                                              \at(cs,Pre)) -
                                                             1)).charM))));
               ()
            }
         }
      };
      (while_0_break : ());
      (_C_69 : (__retres = (0 :> int32)));
      (return_label : 
      (return __retres))
   }
}
